/*
	File:		RecDomain.h

	Contains:	Recognition of input strokes and recognition of higher level
					combinations of strokes (forming characters and words, etc.)
					is performed using recognition domains, each of which performs
					a particular recognition task.
					Recognition domains, or recognizers generate one or more competing
					interpretations for the same input. The recognizers use a data structure
					called a unit, where a unit is a set of subhypotheses together with
					all their interpretations generated by a single recognizer.
					An interpretation is a description of a particular portion of the
					input data (strokes), where the description is based on the strokes
					or on other lower-level interpretations.
					A recognizer operates at a first level for identifying one or more
					groups of related subhypotheses using the unit absent any interpretations
					and stores the unit in the database in piece-pool memory.
					A recognizer has a second level of operation where each unit generated
					in the grouping stage is classified to provide the unit with one or more
					interpretations. The classified unit is stored in a unit pool memory.
					

	Written by:	Newton Research Group.
*/

#if !defined(__RECDOMAIN_H)
#define __RECDOMAIN_H 1

#include "Unit.h"

class CController;

/*--------------------------------------------------------------------------------
	C R e c D o m a i n

	Formerly TDomain.
	The CRecDomain class implements a recognizer.
--------------------------------------------------------------------------------*/

class CRecDomain : public CRecObject
{
public:
						CRecDomain();
						~CRecDomain();

	static CRecDomain *  make(CController * inController, RecType inUnitType, const char * inName);
	static bool				vUnitInClass(RecType inType1, RecType inType2);

// reference counting
	virtual void		release(void);

// debug
	virtual size_t		sizeInBytes(void);
	virtual void		dump(CMsg * outMsg);
	void					dumpName(CMsg * outMsg);

	void					setController(CController * inController);

	void					addPieceType(RecType inSubtype);

	virtual NewtonErr	preGroup(CRecUnit * inUnit);
	virtual bool		group(CRecUnit * inPiece, RecDomainInfo * info);

	virtual void		classify(CRecUnit * inUnit);
	virtual void		reclassify(CRecUnit * inUnit);

	virtual long		pruneDictionary(CRecUnit * inUnit);
	virtual long		pruneConstraints(CRecUnit * inUnit);

	virtual void		domainParameter(ULong, OpaqueRef, OpaqueRef);
	virtual bool		setParameters(Ptr inParms);
	virtual void		invalParameters(void);
	virtual void		configureSubDomain(CRecArea * inArea);
	virtual long		completeUnit(void);

	CController *		controller(void) const;

	RecType				getType(void) const;
	ULong					getDelay(void) const;

protected:
	NewtonErr			iRecDomain(CController * inController, RecType inUnitType, const char * inName);

	friend class CController;

	CController *  fController;	// +08	The controller in charge of this domain.
													// The controller passes this pointer to the make method.
	CTypeList *		fPieceTypes;	// +0C	A list of the types of units, or pieces, that this domain
													// accepts as input. The domain's initialization method should
													// add types to this field using the addPieceType method.
	RecType			fUnitType;		// +10	The type of the unit produced by this domain.
													// The unit type is specified by the domain's make method.
	const char *	fDomainName;	// +14	A string that holds the domain's name.
													// This name is currently used only for debugging purposes,
													// but might eventually be used to control settings for a domain.
													// The string should be descriptive, like "Word" or "Simple Shape".
													// The domain name is specified by the domain's make method.
	ULong				fDelay;			//	+18	The amount of time, following a call to CSIUnit::addSub,
													// that the controller should wait before calling the domain's
													// classify method.
	long				f1C;
	Ptr				fParameters;	// +20	was Handle
};

inline CController *	CRecDomain::controller(void) const  { return fController; }
inline void			CRecDomain::setController(CController * inController)  { fController = inController; }
inline RecType		CRecDomain::getType(void) const  { return fUnitType; }
inline ULong		CRecDomain::getDelay(void) const  { return fDelay; }


#endif	/* __RECDOMAIN_H */
