/*	File:		NewtonScript.cc	Contains:	NewtonScript interface for Newton C Tools.	Written by:	Newton Research Group.*/#if !defined(forFramework)#include "RootView.h"#endif#include "Objects.h"#include "Interpreter.h"#include "Funcs.h"#include "Lookup.h"#include "NewtGlobals.h"/*------------------------------------------------------------------------------	Call function object.------------------------------------------------------------------------------*/RefNSCall(RefArg inFn){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	return DoCall(inFn, 0);}RefNSCall(RefArg inFn, RefArg inArg1){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	gInterpreter->pushValue(inArg1);	return DoCall(inFn, 1);}RefNSCall(RefArg inFn, RefArg inArg1, RefArg inArg2){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	return DoCall(inFn, 2);}RefNSCall(RefArg inFn, RefArg inArg1, RefArg inArg2, RefArg inArg3){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	return DoCall(inFn, 3);}RefNSCall(RefArg inFn, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	return DoCall(inFn, 4);}RefNSCall(RefArg inFn, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	return DoCall(inFn, 5);}RefNSCall(RefArg inFn, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	gInterpreter->pushValue(inArg6);	return DoCall(inFn, 6);}RefNSCallWithArgArray(RefArg inFn, RefArg inArgs){	if (!IsFunction(inFn))		ThrowBadTypeWithFrameData(kNSErrNotAFunction, inFn);	return DoCall(inFn, PushArgArray(inArgs));}#pragma mark -/*------------------------------------------------------------------------------	Call named global function.------------------------------------------------------------------------------*/RefNSGetGlobalFn(RefArg inSym){	Ref	fn = GetFrameSlot(gFunctionFrame, inSym);#if defined(hasPureFunctionSupport)	if (ISNIL(fn))		fn = GetFrameSlot(gConstFuncFrame, inSym);#endif	if (ISNIL(fn))		ThrowExInterpreterWithSymbol(kNSErrUndefinedGlobalFunction, inSym);	return fn;}RefNSCallGlobalFn(RefArg inSym){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn);}RefNSCallGlobalFn(RefArg inSym, RefArg inArg1){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn, inArg1);}RefNSCallGlobalFn(RefArg inSym, RefArg inArg1, RefArg inArg2){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn, inArg1, inArg2);}RefNSCallGlobalFn(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn, inArg1, inArg2, inArg3);}RefNSCallGlobalFn(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn, inArg1, inArg2, inArg3, inArg4);}RefNSCallGlobalFn(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn, inArg1, inArg2, inArg3, inArg4, inArg5);}RefNSCallGlobalFn(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	RefVar	fn(NSGetGlobalFn(inSym));	return NSCall(fn, inArg1, inArg2, inArg3, inArg4, inArg5, inArg6);}RefNSCallGlobalFnWithArgArray(RefArg inSym, RefArg inArgs){	RefVar	fn(NSGetGlobalFn(inSym));	return DoBlock(fn, inArgs);}#pragma mark -/*------------------------------------------------------------------------------	Send message.------------------------------------------------------------------------------*/RefNSSend(RefArg inRcvr, RefArg inSym){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	return DoSend(inRcvr, impl, inSym, 0);}RefNSSend(RefArg inRcvr, RefArg inSym, RefArg inArg1){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	return DoSend(inRcvr, impl, inSym, 1);}RefNSSend(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	return DoSend(inRcvr, impl, inSym, 2);}RefNSSend(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	return DoSend(inRcvr, impl, inSym, 3);}RefNSSend(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	return DoSend(inRcvr, impl, inSym, 4);}RefNSSend(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	return DoSend(inRcvr, impl, inSym, 5);}RefNSSend(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	gInterpreter->pushValue(inArg6);	return DoSend(inRcvr, impl, inSym, 6);}RefNSSendWithArgArray(RefArg inRcvr, RefArg inSym, RefArg inArgs){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	return DoSend(inRcvr, impl, inSym, PushArgArray(inArgs));}#pragma mark -/*------------------------------------------------------------------------------	Send message - donÕt fail if not defined.------------------------------------------------------------------------------*/RefNSSendIfDefined(RefArg inRcvr, RefArg inSym){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	return DoSend(inRcvr, impl, inSym, 0);}RefNSSendIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	return DoSend(inRcvr, impl, inSym, 1);}RefNSSendIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	return DoSend(inRcvr, impl, inSym, 2);}RefNSSendIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	return DoSend(inRcvr, impl, inSym, 3);}RefNSSendIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	return DoSend(inRcvr, impl, inSym, 4);}RefNSSendIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	return DoSend(inRcvr, impl, inSym, 5);}RefNSSendIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	gInterpreter->pushValue(inArg6);	return DoSend(inRcvr, impl, inSym, 6);}RefNSSendIfDefinedWithArgArray(RefArg inRcvr, RefArg inSym, RefArg inArgs){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	return DoSend(inRcvr, impl, inSym, PushArgArray(inArgs));}#pragma mark -/*------------------------------------------------------------------------------	Send message - look up in proto chain.------------------------------------------------------------------------------*/RefNSSendProto(RefArg inRcvr, RefArg inSym){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	return DoSend(inRcvr, impl, inSym, 0);}RefNSSendProto(RefArg inRcvr, RefArg inSym, RefArg inArg1){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	return DoSend(inRcvr, impl, inSym, 1);}RefNSSendProto(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	return DoSend(inRcvr, impl, inSym, 2);}RefNSSendProto(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	return DoSend(inRcvr, impl, inSym, 3);}RefNSSendProto(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	return DoSend(inRcvr, impl, inSym, 4);}RefNSSendProto(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	return DoSend(inRcvr, impl, inSym, 5);}RefNSSendProto(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	gInterpreter->pushValue(inArg6);	return DoSend(inRcvr, impl, inSym, 6);}RefNSSendProtoWithArgArray(RefArg inRcvr, RefArg inSym, RefArg inArgs){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	return DoSend(inRcvr, impl, inSym, PushArgArray(inArgs));}#pragma mark -/*------------------------------------------------------------------------------	Send message - look up in proto chain - donÕt fail if not defined.------------------------------------------------------------------------------*/RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	return DoSend(inRcvr, impl, inSym, 0);}RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	return DoSend(inRcvr, impl, inSym, 1);}RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	return DoSend(inRcvr, impl, inSym, 2);}RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	return DoSend(inRcvr, impl, inSym, 3);}RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	return DoSend(inRcvr, impl, inSym, 4);}RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	return DoSend(inRcvr, impl, inSym, 5);}RefNSSendProtoIfDefined(RefArg inRcvr, RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	gInterpreter->pushValue(inArg1);	gInterpreter->pushValue(inArg2);	gInterpreter->pushValue(inArg3);	gInterpreter->pushValue(inArg4);	gInterpreter->pushValue(inArg5);	gInterpreter->pushValue(inArg6);	return DoSend(inRcvr, impl, inSym, 6);}RefNSSendProtoIfDefinedWithArgArray(RefArg inRcvr, RefArg inSym, RefArg inArgs){	if (!IsSymbol(inSym))		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inSym);	RefVar	impl(FindProtoImplementor(inRcvr, inSym));	if (ISNIL(impl))		return NILREF;	return DoSend(inRcvr, impl, inSym, PushArgArray(inArgs));}#pragma mark -#if !defined(forFramework)/*------------------------------------------------------------------------------	Send a message to the root view.------------------------------------------------------------------------------*/RefNSSendRootMessage(RefArg inSym){	return NSSend(gRootView->fContext, inSym);}RefNSSendRootMessage(RefArg inSym, RefArg inArg1){	return NSSend(gRootView->fContext, inSym, inArg1);}RefNSSendRootMessage(RefArg inSym, RefArg inArg1, RefArg inArg2){	return NSSend(gRootView->fContext, inSym, inArg1, inArg2);}RefNSSendRootMessage(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3){	return NSSend(gRootView->fContext, inSym, inArg1, inArg2, inArg3);}RefNSSendRootMessage(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4){	return NSSend(gRootView->fContext, inSym, inArg1, inArg2, inArg3, inArg4);}RefNSSendRootMessage(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5){	return NSSend(gRootView->fContext, inSym, inArg1, inArg2, inArg3, inArg4, inArg5);}RefNSSendRootMessage(RefArg inSym, RefArg inArg1, RefArg inArg2, RefArg inArg3, RefArg inArg4, RefArg inArg5, RefArg inArg6){	return NSSend(gRootView->fContext, inSym, inArg1, inArg2, inArg3, inArg4, inArg5, inArg6);}RefNSSendRootMessageWithArgArray(RefArg inSym, RefArg inArgs){	return DoMessage(gRootView->fContext, inSym, inArgs);}#endif	/* forFramework */