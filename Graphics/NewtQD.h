/*	File:		NewtQD.h	Contains:	C Interface to QuickDraw structures	Written by:	Newton Research Group*/#if !defined(__NEWTQD_H)#define __NEWTQD_H 1#if !defined(__CONFIGQD_H)#include "ConfigQD.h"#endif#if !defined(__NEWTONTYPES_H)#include "NewtonTypes.h"#endif#if !defined(__GEOMETRY_H)#include "Geometry.h"#endif/*---  PixelMap ---*/#define	kPixMapStorage			0xC0000000	// to mask off the appropriate bits#define	kPixMapHandle			0x00000000	// baseAddr is a handle#define	kPixMapPtr				0x40000000	// baseAddr is a pointer#define	kPixMapOffset			0x80000000	// baseAddr is an offset from the PixelMap#define	kPixMapLittleEndian	0x20000000	// pixMap is little endian#define	kPixMapAllocated		0x10000000	// pixMap "owns" the bits memory#if defined(QD_Gray)#define	kPixMapGrayTable		0x08000000	// grayTable field exists#define	kPixMapNoPad			0x04000000	// direct pixel format, no pad byte#define	kPixMapByComponent	0x02000000	// direct pixel format, stored by component#define	kPixMapAntiAlias		0x01000000	// antialiasing ink text#endif#define	kPixMapVersionMask	0x0000F000	// version of this struct#define	kPixMapDeviceType		0x00000F00	// bits 8..11 are device type code#define	kPixMapDevScreen		0x00000000	// 	screen or offscreen bitmap#define	kPixMapDevDotPrint	0x00000100	// 	dot matrix printer#define	kPixMapDevPSPrint		0x00000200	// 	postscript printer#define	kPixMapDepth			0x000000FF	// bits 0..7 are chunky pixel depth#define	kOneBitDepth			1#define	kDefaultDPI				72				// default value for deviceRes fields#define	kVersionShift			12#define	kPixMapVersion1		(0x0 << kVersionShift)#define	kPixMapVersion2		(0x1 << kVersionShift)typedef struct{	Ptr			baseAddr;	short			rowBytes;		// pads to long	short			reserved1;	Rect			bounds;	ULong			pixMapFlags;	Point			deviceRes;		// resolution of input device (0 indicates kDefaultDPI)#if defined(QD_Gray)	UChar *		grayTable;		// gray tone table#endif} PixelMap;typedef PixelMap * PixelMapPtr;#if defined(__cplusplus)#if defined(QD_Gray)inline long GrayTableExists(const PixelMap * pixmap)	{ return pixmap->pixMapFlags & kPixMapGrayTable; }inline long NoPadByte(const PixelMap * pixmap)			{ return pixmap->pixMapFlags & kPixMapNoPad; }inline long ByComponent(const PixelMap * pixmap)		{ return pixmap->pixMapFlags & kPixMapByComponent; }inline long AntiAlias(const PixelMap * pixmap)			{ return pixmap->pixMapFlags & kPixMapAntiAlias; }inline long PixelDepth(const PixelMap * pixmap)			{ return pixmap->pixMapFlags & kPixMapDepth; }#elseinline long PixelDepth(PixelMap * /*pixmap*/)			{ return kOneBitDepth; }#endifinline ULong IsPixMap(long rowBytes) 						{ return (rowBytes & 0x8000); }inline ULong GetPixMapVersion(const PixelMap * p)		{ return (p->pixMapFlags & kPixMapVersionMask); }#endif/*---  Patterns ---*/typedef	PixelMap **	PatternHandle;						// patterns expressed as handle to PixelMapenum{	whitePat,	ltGrayPat,	grayPat,	dkGrayPat,	blackPat};typedef unsigned char GetPatSelector;#define	kPatternDataSize 		8						// number of pixels in square pattern definition#define	kExpPatArraySize		16						// number of longs in expanded pattern array#define	kExpPatArrayMask		kExpPatArraySize - 1/*----- QuickDraw structures -----*/typedef short StructSizeType;/*typedef Fixed		fixed;typedef FixedPoint point;typedef struct Curve{	point 	first;	point 	control;	point 	last;} Curve;typedef Curve * CurvePtr;typedef struct Path{	long		vectors;	long		controlBits[1];	point		vector[];} Path;typedef struct Paths{	long		contours;	Path		contour[];} Paths;typedef Paths * PathsPtr, ** PathsHandle;typedef struct PathWalker{	int		isLine;	Curve		c;//private:	long		index;	long		ep;	long *	bits;	point *	p;} PathWalker;*/#if !defined(__QUICKDRAW__)typedef struct FontInfo{	long		ascent;	long		descent;	long		widMax;	long		leading;} FontInfo;typedef struct PenState{	Point		pnLoc;	Point		pnSize;	short		pnMode;	PatternHandle	fgPat;} PenState;typedef struct Region{	StructSizeType	rgnSize;	Rect				rgnBBox;} Region;typedef Region * RgnPtr, ** RgnHandle;typedef struct Picture{	StructSizeType	picSize;	Rect				picFrame;} Picture;typedef Picture * PicPtr, ** PicHandle;typedef struct Polygon{	StructSizeType	polySize;	Rect				polyBBox;	Point				polyPoints[];} Polygon;typedef Polygon * PolyPtr, ** PolyHandle;/*--- Standard Procs ---*/enum{	/* Source transfer modes */	srcCopy,	srcOr,	srcXor,	srcBic,	notSrcCopy,	notSrcOr,	notSrcXor,	notSrcBic,	/* Pattern transfer modes */	patCopy,	patOr,	patXor,	patBic,	notPatCopy,	notPatOr,	notPatXor,	notPatBic};/*enum{	kQDGrafVerbFrame,	kQDGrafVerbPaint,	kQDGrafVerbErase,	kQDGrafVerbInvert,	kQDGrafVerbFill};typedef unsigned char GrafVerb;typedef void (*ArcProcPtr) (GrafVerb inVerb, Rect * inBox, long inStartAngle, long inArcAngle);typedef void (*BitsProcPtr) (const PixelMap * srcBits, const Rect * srcRect, const Rect * dstRect, long mode, RgnHandle maskRgn);typedef void (*CurveProcPtr) (GrafVerb inVerb, CurvePtr inCurve);typedef void (*GetPicDataProc) (Ptr inData, long inByteCount);typedef void (*LineProcPtr) (Point inPt);typedef void (*OvalProcPtr) (GrafVerb inVerb, const Rect * inBox);typedef void (*PathsProcPtr) (GrafVerb inVerb, PathsHandle inPaths);typedef void (*PicCommentProc) (short inKind, short inDataSize, Handle inDataHandle);typedef void (*PolyProcPtr) (GrafVerb inVerb, PolyHandle inPoly);typedef void (*PutPicDataProc) (Ptr inData, long inByteCount);typedef void (*RectProcPtr) (GrafVerb inVerb, Rect * inBox);typedef void (*RgnProcPtr) (GrafVerb inVerb, RgnHandle inRgn);typedef void (*RRectProcPtr) (GrafVerb inVerb, const Rect * inBox, long inOvalWidth, long inOvalHeight);typedef void (*TextObjProc) (TextObjectRef inText, long inByteCount, Fixed inNumer, Fixed inDenom);typedef struct{	ArcProcPtr			arcProc;			// +00	BitsProcPtr			bitsProc;		// +04	CurveProcPtr 		curveProc;		// +08	GetPicDataProc		getPicProc;		// +0C	LineProcPtr			lineProc;		// +10	OvalProcPtr			ovalProc;		// +14	PathsProcPtr 		pathsProc;		// +18	PicCommentProc		commentProc;	// +1C	PolyProcPtr			polyProc;		// +20	PutPicDataProc		putPicProc;		// +24	RectProcPtr			rectProc;		// +28	RgnProcPtr			rgnProc;			// +2C	RRectProcPtr		rRectProc;		// +30	TextObjProc			textProc;		// +34} QDProcs;typedef QDProcs * QDProcsPtr;*/typedef struct{	PixelMap			portBits;	// +00	Rect				portRect;	// +1C	RgnHandle		visRgn;		// +24	RgnHandle		clipRgn;		// +28	PatternHandle	fgPat;		// +2C	PatternHandle	bgPat;		// +30	Point				pnLoc;		// +34	Point				pnSize;		// +38	short				pnMode;		// +3C	short				pnVis;		// +3E//	QDProcsPtr		grafProcs;	// +40	Handle			picSave;		/* used for saving picts		*/	Handle			rgnSave;		/* used for saving rgns			*/	Handle			polySave;	/* used for saving polys		*/	Point				patAlign;	/* used for picture playback	*/} GrafPort;typedef GrafPort * GrafPtr;extern GrafPort	gScreenPort;	// 0C1067CC;#if defined(__cplusplus)inline long	IsPrinterPort(const GrafPtr port)				{ return port->portBits.pixMapFlags & (kPixMapDevDotPrint + kPixMapDevPSPrint); }extern "C" {#endiftypedef struct{	long			x00;				// +00	PixelMap 	pixmap;			// +04	long			x20;				// +20	long			polyMemSize;	// +28	PolyHandle	polyMem;			// +2C	long			x30;	long			rgnMemSize;		// +34	RgnHandle	rgnMem;			// +38} QDGlobals;extern QDGlobals	qd;			// 0C107D88extern void		InitGraf();extern void		OpenPort(GrafPtr port);extern void		InitPort(GrafPtr port);extern void		InitPortRgns(GrafPtr port);extern GrafPtr	GetCurrentPort(void);extern GrafPtr	SetPort(GrafPtr port);extern void		GetPort(GrafPtr * port);extern void		SetPortBits(PixelMap * inBits);extern void		ClosePort(GrafPtr port);extern void		SetOrigin(short inH, short inV);extern void		PenSize(short inH, short inV);extern void		PenMode(short inMode);extern void		PenNormal(void);extern void		MoveTo(short inH, short inV);extern void		LineTo(short inH, short inV);extern Ptr		GetPixelMapBits(PixelMap * pixmap);extern void		CopyBits(const PixelMap * srcBits, const PixelMap * dstBits,								const Rect * srcRect, const Rect * dstRect,								short mode, RgnHandle maskRgn);extern RgnHandle	NewRgn(void);extern void		OpenRgn(void);extern void		CloseRgn(RgnHandle dstRgn);extern void		HandleToRgn(Handle oldRegion, RgnHandle region);extern void		RgnToHandle(RgnHandle region, Handle flattenedRgnDataHdl);extern void		DisposeRgn(RgnHandle rgn);extern void		CopyRgn(RgnHandle srcRgn, RgnHandle dstRgn);extern void		SetEmptyRgn(RgnHandle rgn);extern void		SetRectRgn(RgnHandle rgn, short left, short top, short right, short bottom);extern void		RectRgn(RgnHandle rgn, const Rect * r);extern void		OffsetRgn(RgnHandle rgn, short dh, short dv);extern void		InsetRgn(RgnHandle rgn, short dh, short dv);extern void		UnionRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn);extern void		SectRgn(	RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn);extern void		DiffRgn(	RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn);extern void		XorRgn(	RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn);extern BOOL		RectInRgn(const Rect * r, RgnHandle rgn);extern BOOL		EqualRgn(RgnHandle rgnA, RgnHandle rgnB);extern BOOL		EmptyRgn(RgnHandle rgn);extern void		FrameRgn(RgnHandle rgn);extern void		PaintRgn(RgnHandle rgn);extern void		EraseRgn(RgnHandle rgn);extern void		InvertRgn(RgnHandle rgn);extern void		FillRgn(RgnHandle rgn, const PatternHandle pat);#if defined(__cplusplus)}#endif#endif	/* __QUICKDRAW__ */void				SetFgPattern(PatternHandle inPat);BOOL				GetPattern(RefArg inPatNo, BOOL * outGot, PatternHandle * outPat, BOOL inHuh);PatternHandle	GetFgPattern(void);void				DisposeFgPattern(void);void				DisposePattern(PatternHandle inPat);PatternHandle	GetStdPattern(long inPatNo);PatternHandle	GetStdGrayPattern(ULong inR, ULong inG, ULong inB);#endif	/* __NEWTQD_H */