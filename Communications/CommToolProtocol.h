/*	File:		CommToolProtocol.h	Contains:	Protocol common to CCommTools.	Copyright:	© 1993-1995 by Apple Computer, Inc., all rights reserved.*/#if !defined(__COMMTOOLPROTOCOL_H)#define __COMMTOOLPROTOCOL_H 1#ifndef __PROTOCOLS_H#include "Protocols.h"#endif#ifndef	__OPTIONARRAY_H#include "OptionArray.h"#endif#ifndef	__COMMTOOL_H#include "CommTool.h"#endifclass CServiceInfo;class CPCommTool;class CCMService;PROTOCOL CCommToolProtocol;NewtonErr StartCommToolProtocol(COptionArray* options, ULong serviceId, CServiceInfo* serviceInfo, CCMService* service, CCommToolProtocol* ctProtocol);PROTOCOL CCommToolProtocol : public CProtocol{public:	static		CCommToolProtocol *	New(char*);					void						Delete();					NewtonErr			taskConstructor();					void					taskDestructor();					UChar *				getToolName();					void					handleRequest(CUMsgToken& msgToken, ULong msgType);					void					handleReply(ULong userRefCon, ULong msgType);					void					doControl(ULong opCode, ULong msgType);					void					doKillControl(ULong msgType);					void					getCommEvent();					void					doKillGetCommEvent();					NewtonErr			postCommEvent(CCommToolGetEventReply& theEvent, NewtonErr result);					NewtonErr			openStart(COptionArray* options);					NewtonErr			openComplete();					bool					close();					void					closeComplete(NewtonErr result);					void					connectStart();					void					connectComplete(NewtonErr result);					void					listenStart();					void					listenComplete(NewtonErr result);					void					acceptStart();					void					acceptComplete(NewtonErr result);					void					disconnectComplete(NewtonErr result);					void					releaseStart();					void					releaseComplete(NewtonErr result);					void					bind();					void					unbind();					void					getProtAddr();					ULong					processOption(COption* theOption, ULong label, ULong opcode);					NewtonErr			addDefaultOptions(COptionArray* options);					NewtonErr			addCurrentOptions(COptionArray* options);					void					putBytes(CBufferList* clientBuffer);					void					putFramedBytes(CBufferList* clientBuffer, bool endOfFrame);					void					putComplete(NewtonErr result, ULong putBytesCount);					void					killPut();					void					killPutComplete(NewtonErr result);					void					getBytes(CBufferList* clientBuffer);					void					getFramedBytes(CBufferList* clientBuffer);					void					getComplete(NewtonErr result, bool endOfFrame = false, ULong getBytesCount = 0);					void					getBytesImmediate(CBufferList* clientBuffer, Size threshold);					void					killGet();					void					killGetComplete(NewtonErr result);					void					terminateConnection();					void					terminateComplete();					void					getNextTermProc(ULong terminationPhase,ULong& terminationFlag,CerminateProcPtr& CerminationProc);					void					setChannelFilter(int msgType, bool enable);	/*	callbacks for base CommTool behavior, call as "utility" functions or treat as		inherited calls (i.e. given function X(), inherited::X() would be CTX())	*/	NONVIRTUAL	NewtonErr			CTTaskConstructor();	NONVIRTUAL	void					CTTaskDestructor();	NONVIRTUAL	NewtonErr			CTGetToolPort(CObjectName toolId, CUPort& port);	NONVIRTUAL	CObjectName			CTGetToolId();	NONVIRTUAL	void					CTCompleteRequest(CUMsgToken& msgToken, NewtonErr result);	NONVIRTUAL	void					CTCompleteRequest(CUMsgToken& msgToken, NewtonErr result, CCommToolReply& reply);	NONVIRTUAL	void					CTCompleteRequest(CommToolChannelNumber channel, NewtonErr result);	NONVIRTUAL	void					CTCompleteRequest(CommToolChannelNumber channel, NewtonErr result, CCommToolReply& reply);	NONVIRTUAL	void					CTHandleRequest(CUMsgToken& msgToken, ULong msgType);	NONVIRTUAL	void					CTHandleReply(ULong userRefCon, ULong msgType);	NONVIRTUAL	void					CTDoControl(ULong opCode, ULong msgType);	NONVIRTUAL	void					CTDoKillControl(ULong msgType);	NONVIRTUAL	void					CTGetCommEvent();	NONVIRTUAL	void					CTDoKillGetCommEvent();	NONVIRTUAL	NewtonErr			CTPostCommEvent(CCommToolGetEventReply& theEvent, NewtonErr result);	NONVIRTUAL	void					CTOpenContinue();	NONVIRTUAL	NewtonErr			CTOpenStart(COptionArray* options);	NONVIRTUAL	NewtonErr			CTOpenComplete();	NONVIRTUAL	bool					CTClose();	NONVIRTUAL	void					CTCloseComplete(NewtonErr result);	NONVIRTUAL	void					CTConnectStart();	NONVIRTUAL	void					CTConnectComplete(NewtonErr result);	NONVIRTUAL	void					CTListenStart();	NONVIRTUAL	void					CTListenComplete(NewtonErr result);	NONVIRTUAL	void					CTAcceptStart();	NONVIRTUAL	void					CTAcceptComplete(NewtonErr result);	NONVIRTUAL	void					CTDisconnectComplete(NewtonErr result);	NONVIRTUAL	void					CTReleaseStart();	NONVIRTUAL	void					CTReleaseComplete(NewtonErr result);	NONVIRTUAL	void					CTBind();	NONVIRTUAL	void					CTUnbind();	NONVIRTUAL	void					CTGetProtAddr();	NONVIRTUAL	ULong					CTProcessOption(COption* theOption, ULong label, ULong opcode);	NONVIRTUAL	NewtonErr			CTAddDefaultOptions(COptionArray* options);	NONVIRTUAL	NewtonErr			CTAddCurrentOptions(COptionArray* options);	NONVIRTUAL	void					CTPutComplete(NewtonErr result, ULong putBytesCount);	NONVIRTUAL	void					CTKillPutComplete(NewtonErr result);	NONVIRTUAL	void					CTGetComplete(NewtonErr result, bool endOfFrame = false, ULong getBytesCount = 0);	NONVIRTUAL	void					CTKillGetComplete(NewtonErr result);	NONVIRTUAL	void					CTKillRequestComplete(CommToolRequestType requestTypeKilled, NewtonErr killResult);	NONVIRTUAL	void					CTHoldAbort();	NONVIRTUAL	void					CTAllowAbort();	NONVIRTUAL	NewtonErr			CTStartAbort(NewtonErr abortError);	NONVIRTUAL	bool					CTShouldAbort(ULong stateFlag, NewtonErr result);	NONVIRTUAL	void					CTTerminateConnection();	NONVIRTUAL	void					CTTerminateComplete();		NONVIRTUAL	NewtonErr			CTInitAsyncRPCMsg(CUAsyncMessage& asyncMsg, ULong refCon);	NONVIRTUAL	NewtonErr			CTFlushChannel(CommToolRequestType filter, NewtonErr flushResult);	NONVIRTUAL	void					CTSetChannelFilter(CommToolRequestType msgType, bool enable);	NONVIRTUAL	CommToolChannelNumber	CTRequestTypeToChannelNumber(CommToolRequestType msgType);	NONVIRTUAL	CommToolRequestType		CTChannelNumberToRequestType(CommToolChannelNumber channelNumber);	// getters/setters…	NONVIRTUAL	ULong					CTGetToolConnectState();	NONVIRTUAL	void					CTSetToolConnectState(ULong state);	NONVIRTUAL	NewtonErr			CTGetAbortErr();	NONVIRTUAL	void					CTSetAbortErr(NewtonErr err);	NONVIRTUAL	ULong					CTGetTerminationEvent();	NONVIRTUAL	void					CTSetTerminationEvent(ULong event);	NONVIRTUAL	CCMOCTConnectInfo &		CTGetConnectInfo();	NONVIRTUAL	void					CTSetConnectInfo(CCMOCTConnectInfo& info);	NONVIRTUAL	ULong					CTGetRequestSize();	NONVIRTUAL	UChar*				CTGetRequest();	NONVIRTUAL	CCommToolMsgContainer	CTGetRequestListItem(UChar item);	NONVIRTUAL  ConnectParms &		CTGetConnectParms();	NONVIRTUAL	CCMOTransportInfo &		CTGetCMOTransportInfo();	NONVIRTUAL	void					CTSetCMOTransportInfo(CCMOTransportInfo& info);	NONVIRTUAL 	CommToolRequestType		CTGetRequestsToKill();	NONVIRTUAL  void					CTSetRequestsToKill(CommToolRequestType rType);// private, don't use	NONVIRTUAL	void					coolInit(CPCommTool* tool);//private:					CPCommTool *		fCommTool;};#endif	/* __COMMTOOLPROTOCOL_H*/