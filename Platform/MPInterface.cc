/*------------------------------------------------------------------------------
	M P I n t e r f a c e
	Objective-C interface to Newton C++.
------------------------------------------------------------------------------*/
#include "TabletBuffer.h"
#include <thread>

extern "C" void	PenDown(float inX, float inY);
extern "C" void	PenMoved(float inX, float inY);
extern "C" void	PenUp(void);


ARMisticeSamples gFakeTabletSamples;		// 033C0000

pthread_mutex_t mutex;

void SetUpFakeTablet(void)
{
	int result = pthread_mutex_init(&mutex, NULL);
// later...
//	pthread_mutex_destroy(&mutex);
}

/*------------------------------------------------------------------------------
	A R M i s t i c e
	Fill buffer with sample generated by host platform.
------------------------------------------------------------------------------*/

NewtonErr
InsertFakeTabletSample(ULong inSample)
{
	NewtonErr err = noErr;

	int result = pthread_mutex_lock(&mutex);

	ARMisticeSamples * samples = &gFakeTabletSamples;
	ULong * samplePtr = samples->wrPtr;
	*samplePtr = inSample;
	// bump and wrap the sample pointer
	++samplePtr;
	if (samplePtr >= samples->bufEnd)
		samplePtr = samples->bufStart;
	if (samplePtr == samples->rdPtr)
		err = -56006;	// Cannot add sample to buffer
	else
		samples->wrPtr = samplePtr;

	pthread_mutex_unlock(&mutex);

	return err;
}


/*------------------------------------------------------------------------------
	A R M i s t i c e
	Insert samples from buffer filled by host platform.
------------------------------------------------------------------------------*/

void
InsertArmisticeSamples(void)
{
	int result = pthread_mutex_lock(&mutex);
	for (bool isDone = false; !isDone; )
	{
//		bool isLocked = false;
		newton_try
		{
			// read sample from ARMistice buffer
			ARMisticeSamples * samples = &gFakeTabletSamples;	//0x03380000->x04
			// do 10 at a time
			int count = 9;
			// iterate over available samples
			for (ULong * samplePtr = samples->rdPtr; samplePtr != samples->wrPtr & count >= 0; )
			{
//				if (!isLocked)
				{
					NewtonErr err = InsertAndSendTabletSample(*samplePtr, 0);
					if (err == noErr) {
						--count;
					} else if (err == -1) {	// there may be an err, but -1 can never happen
						break;
					}
				}
				// bump and wrap the sample pointer
//				isLocked = true;
				++samplePtr;
				if (samplePtr >= samples->bufEnd)
					samplePtr = samples->bufStart;
				samples->rdPtr = samplePtr;
//				isLocked = false;
			}
			isDone = true;
		}
		newton_catch(exAbort)
		{ }
		end_try;
	}
	pthread_mutex_unlock(&mutex);
}


/*------------------------------------------------------------------------------
	Handle host platform pen events.
------------------------------------------------------------------------------*/

void
PenDown(float inX, float inY)
{
	NewtonErr err;
	TabletSample sample;
	sample.intValue = kPenDownSample;
//printf("PenDown(x=%f,y=%f)\n",inX,inY);
	err = InsertFakeTabletSample(sample.intValue);
	PenMoved(inX, inY);
}


void
PenMoved(float inX, float inY)
{
	NewtonErr err;
	TabletSample sample;
	sample.x = inX;
	sample.y = inY;
	sample.z = kPenMidPressureSample;
//printf("PenMoved(x=%f,y=%f)\n",inX,inY);
	err = InsertFakeTabletSample(sample.intValue);
}


void
PenUp(void)
{
	NewtonErr err;
	TabletSample sample;
	sample.intValue = kPenUpSample;
//printf("PenUp()\n");
	err = InsertFakeTabletSample(sample.intValue);
}

