/*	File:		UserSharedMem.h	Contains:	User task interface to shared memory objects.	Written by:	Newton Research Group.*/#if !defined(__USERSHAREDMEM_H)#define __USERSHAREDMEM_H 1#if !defined(__NEWTON_H)#include "Newton.h"#endif#if !defined(__USEROBJECTS_H)#include "UserObjects.h"#endif#include "SharedTypes.h"#include "UserGlobals.h"#include "LongTime.h"class CUMsgToken;/*--------------------------------------------------------------------------------	C U S h a r e d M e m--------------------------------------------------------------------------------*/class CUSharedMem : public CUObject{public:					CUSharedMem(ObjectId id = 0);	void			operator=(const CUSharedMem & inCopy);	NewtonErr	init(void);	NewtonErr	setBuffer(void * inBuffer, size_t inSize, ULong inPermissions = kSMemReadOnly);	NewtonErr	getSize(size_t * outSize, void ** outBuffer = NULL);	NewtonErr	copyToShared(void * inBuffer, size_t inSize, ULong inOffset = 0, CUMsgToken * inToken = NULL);	NewtonErr	copyFromShared(size_t * outSize, void * outBuffer, size_t inSize, ULong inOffset = 0, CUMsgToken * inToken = NULL);};/*------------------------------------------------------------------------------	C U S h a r e d M e m   I n l i n e s------------------------------------------------------------------------------*/inline			CUSharedMem::CUSharedMem(ObjectId id) : CUObject(id) { }inline void		CUSharedMem::operator=(const CUSharedMem & inCopy) { copyObject(inCopy); }/*--------------------------------------------------------------------------------	U S h a r e d M e m M s g--------------------------------------------------------------------------------*/class CUSharedMemMsg : public CUSharedMem{public:					CUSharedMemMsg(ObjectId id = 0);	void			operator=(const CUSharedMemMsg & inCopy);	NewtonErr	init(void);	NewtonErr	setTimerParms(Timeout inTimeout = kNoTimeout, CTime * inDelay = NULL);	NewtonErr	setMsgAvailPort(ObjectId inAvailPortId);	NewtonErr	getSenderTaskId(ObjectId * outSenderTaskId);	NewtonErr	getSize(size_t * outSize, void ** outBuffer = NULL, OpaqueRef * outRefCon = NULL);	NewtonErr	setUserRefCon(OpaqueRef inRefCon);	NewtonErr	getUserRefCon(OpaqueRef * outRefCon);	NewtonErr	checkForDone(ULong inFlags, ObjectId * inSentById = NULL, ObjectId * inReplyMemId = NULL, ULong * inMsgType = NULL, ULong * inSignature = NULL);	NewtonErr	msgDone(NewtonErr inResult, ObjectId inSignature);};/*------------------------------------------------------------------------------	C U S h a r e d M e m M s g   I n l i n e s------------------------------------------------------------------------------*/inline			CUSharedMemMsg::CUSharedMemMsg(ObjectId id) : CUSharedMem(id) { }inline void		CUSharedMemMsg::operator=(const CUSharedMemMsg & inCopy) { copyObject(inCopy); }inline NewtonErr	CUSharedMemMsg::checkForDone(ULong inFlags, ObjectId * inSentById, ObjectId * inReplyMemId, ULong * inMsgType, ULong * inSignature){ return SMemMsgCheckForDoneSWI(fId, inFlags, inSentById, inReplyMemId, inMsgType, inSignature); }inline NewtonErr	CUSharedMemMsg::msgDone(NewtonErr inResult, ObjectId inSignature){ return SMemMsgMsgDoneSWI(fId, inResult, inSignature); }#endif	/* __USERSHAREDMEM_H */