/*------------------------------------------------------------------------------	C o n s t a n t s------------------------------------------------------------------------------*/DefineGlobalConstant('kLandscapeParams,{	pixelDepth: 4,	orientation: 1,	scrTop: 0,	scrLeft: 0,	scrWidth: 480,	scrHeight: 320,	rootBounds:			SetBounds(  0, 0, 480, 320),	appAreaGlobalTop: 0,	appAreaGlobalLeft: 0,	appAreaTop: 0,	appAreaLeft: 0,	appAreaWidth: 434,	appAreaHeight: 320,	appAreaBounds:		SetBounds(  0, 0, 434, 320),	buttonBarBounds:  SetBounds(434, 0, 480, 320),	buttonBarPosition: 'right,	buttonBarControlsPosition: 'bottom,	bellyButtonPosition: 'inside,	buttonBarVThickness: 46,	buttonBarHThickness: 46});DefineGlobalConstant('kPortraitParams,{	_proto: kLandscapeParams,	orientation: 0,	scrWidth: 320,	scrHeight: 480,	rootBounds:			SetBounds(  0,   0, 320, 480),	appAreaWidth: 320,	appAreaHeight: 434,	appAreaBounds:		SetBounds(  0,   0, 320, 434),	buttonBarBounds:  SetBounds(  0, 434, 320, 480),	buttonBarPosition: 'bottom,	buttonBarControlsPosition: 'right});DefineGlobalConstant('kGetFrameStuffFunc, plainC.FGetFrameStuff);/*------------------------------------------------------------------------------	G l o b a l   F u n c t i o n s	These are built into the ROM.------------------------------------------------------------------------------*/internalFuncs := {// Math Operators	|+|: plainC.FAdd,								/* freq-func */	|-|: plainC.FSubtract,						/* freq-func */	|*|: plainC.FMultiply,						/* freq-func */	|/|: plainC.FDivide,							/* freq-func */	|div|: plainC.FDiv,							/* freq-func */	|mod|: plainC.FMod,	|negate|: plainC.FNegate,	|not|: plainC.FNot,							/* freq-func */	|=|: plainC.FEqual,							/* freq-func */	|<>|: plainC.FUnorderedLessOrGreater,  /* freq-func */	|<|: plainC.FLessThan,						/* freq-func */	|>|: plainC.FGreaterThan,					/* freq-func */	|>=|: plainC.FGreaterOrEqual,				/* freq-func */	|<=|: plainC.FLessOrEqual,					/* freq-func */	|aref|: plainC.FAref,						/* freq-func */	|setAref|: plainC.FSetAref,				/* freq-func */	|newIterator|: plainC.FNewIterator,		/* freq-func */// Utilities - Object System	classOf: plainC.FClassOf,					/* freq-func */	clone: plainC.FClone,						/* freq-func */	DeepClone: plainC.FDeepClone,	TotalClone: plainC.FTotalClone,	EnsureInternal: plainC.FEnsureInternal,	GetFunctionArgCount: plainC.FGetFunctionArgCount,	GetPath: plainC.FGetPath,	GetSlot: plainC.FGetSlot,	GetVariable: plainC.FGetVariable,	hasPath: plainC.FHasPath,					/* freq-func */	HasSlot: plainC.FHasSlot,	hasVar: plainC.FHasVar,						/* aka exists */	HasVariable: plainC.FHasVariable,	Intern: plainC.FIntern,	IsArray: plainC.FIsArray,	IsBinary: plainC.FIsBinary,	IsCharacter: plainC.FIsCharacter,	IsDirty: plainC.FIsDirty,	IsFrame: plainC.FIsFrame,	IsFunction: plainC.FIsFunction,	IsImmediate: plainC.FIsImmediate,	IsInstance: plainC.FIsInstance,	IsInteger: plainC.FIsInteger,	IsPathExpr: plainC.FIsPathExpr,	IsMagicPtr: plainC.FIsMagicPtr,	IsNativeFunction: plainC.FIsNativeFunction,	IsNumber: plainC.FIsNumber,	IsPackage: plainC.FIsPackage,	IsReadOnly: plainC.FIsReadOnly,	IsReal: plainC.FIsReal,	IsRichString: plainC.FIsRichString,	IsSoupEntry: plainC.FIsSoupEntry,	IsString: plainC.FIsString,	IsSubclass: plainC.FIsSubclass,	IsSymbol: plainC.FIsSymbol,	IsValid: func(obj) true,					/* TEST *///	IsValidString: plainC.FIsValidString,	IsVBO: plainC.FIsVBO,	length: plainC.FLength,						/* freq-func */	MakeBinary: plainC.FMakeBinary,	Map: plainC.FMap,	PrimClassOf: plainC.FPrimClassOf,	RemoveSlot: plainC.FRemoveSlot,	ReplaceObject: plainC.FReplaceObject,	setClass: plainC.FSetClass,				/* freq-func */	SetVariable: plainC.FSetVariable,	SymbolCompareLex: plainC.FSymbolCompareLex,//	Utilities - Strings	BeginsWith: plainC.FBeginsWith,	Capitalize: plainC.FCapitalize,	CapitalizeWords: plainC.FCapitalizeWords,	CharPos: plainC.FCharPos,	Downcase: plainC.FDowncase,	EndsWith: plainC.FEndsWith,	StrEqual: plainC.FStrEqual,	StrFilled: plainC.FStrFilled,	StrFontWidth: func(str, fnt) begin StrLen(str) * 6 end,  /* TEST */	stringer: plainC.FStringer,				/* freq-func */	StrLen: plainC.FStrLen,	StrMunger: plainC.FStrMunger,	StrPos: plainC.FStrPos,	StrReplace: plainC.FStrReplace,	SubStr: plainC.FSubStr,	TrimString: plainC.FTrimString,	Upcase: plainC.FUpcase,//	Utilities - Bitwise	band: plainC.FBitAnd,						/* freq-func */	bor: plainC.FBitOr,							/* freq-func */	bxor: plainC.FBitXor,	bnot: plainC.FBitNot,						/* freq-func *///	Utilities - Array	addArraySlot: plainC.FAddArraySlot,		/* freq-func */	Array: plainC.FArray,	ArrayInsert: plainC.FArrayInsert,	ArrayMunger: plainC.FArrayMunger,	ArrayRemoveCount: plainC.FArrayRemoveCount,	LFetch: plainC.FLFetch,	LSearch: plainC.FLSearch,	SetLength: plainC.FSetLength,	Sort: plainC.FSort,//	Utilities - Integer Math	max: plainC.FMax,	min: plainC.FMin,	|<<|: plainC.FLShift,	|>>|: plainC.FRShift,// Utilities - Exceptions//	Throw: plainC.FThrow,//	Rethrow: plainC.FRethrow,//	CurrentException: plainC.FCurrentException,//	IsSubexception: plainC.FIsSubexception,// Utilities - Message Sending	Apply: plainC.FApply,	Perform: plainC.FPerform,	PerformIfDefined: plainC.FPerformIfDefined,	ProtoPerform: plainC.FProtoPerform,	ProtoPerformIfDefined: plainC.FProtoPerformIfDefined,// Utilities - Deferred Message Sending	AddDeferredSend: plainC.FAddDeferredSend,	AddDeferredCall: plainC.FAddDeferredCall,	AddDelayedSend: plainC.FAddDelayedSend,	AddDelayedCall: plainC.FAddDelayedCall,// Utilities - Getting and Setting Globals	DefGlobalFn: plainC.FDefGlobalFn,	UnDefGlobalFn: func(inTag)			begin RemoveSlot(functions, inTag); nil end,	GetGlobalFn: func(inTag)			functions.(inTag),	GlobalFnExists: func(inTag)		HasSlot(functions, inTag),	DefGlobalVar: func(inTag, inValue)  vars.(EnsureInternal(inTag)) := inValue,	UnDefGlobalVar: func(inTag)		begin RemoveSlot(vars, inTag); nil end,	GetGlobalVar: func(inTag)			vars.(inTag),	GlobalVarExists: func(inTag)		HasSlot(vars, inTag),// Utilities - Debugging	Print: plainC.FPrint,	Write: plainC.FWrite,	BadWickedNaughtyNoot: func(inErr, inReason)		begin		local msg := if IsInteger(inErr) then			"Nasty practice #" & inErr & (if inReason then $( & inReason & $)) & $\n		else			"\nUse of " & inReason & " API:\n-  " & inErr & $\n;		if vars.noEvilLiveOn then			begin			Write(msg);			BreakLoop()			end		else if inReason <> 'obsolete then			Write(msg)		end,	DebugHashToName: func(inHash) // should really be installed by debug package		begin		local index := LSearch('[646, 5075, 90824, 11538576, 362838, 1448480, 728989, 11541917, 23283101, 2911004, 280740, 1444304, 5800980, 5775968, 2887824, 5826406, 46622864, 45415, 90112, 45085, 90867, 72801, 724016, 90529, 45061, 2904837, 181408, 182001, 181520, 363081, 22568, 11340, 360639, 5572, 5605, 21708, 1222, 17692, 46168208, 5800646, 361046, 71574, 1144630, 5438275, 2323, 2356, 5802140, 1451, 4529, 16733, 2574, 23027604, 90204, 726132, 37436, 97212, 23994396, 78008, 2542296, 2182, 2888314, 757625, 1444048, 722074, 1451126, 46321264, 723740, 46240, 21728, 11649, 2288, 1031, 188577, 628, 8790, 739977, 20601, 32890, 363708, 272060, 16989, 585660, 71773, 263868, 8413, 352956, 22045, 44040, 265948, 657, 303504, 1527504, 40025, 160442, 381876, 81529, 642633, 320500, 186553, 23370, 4266, 10410, 16702, 314703, 43078, 156619, 19835, 19866, 158172, 5930, 165658, 21204266, 119418192, 5301797, 16503, 741783, 9693, 9476, 143920, 1392176, 9104503, 42186, -382561072, 156805, 350698, 265274, 43969, 2161822, 3041, 192553, 18827, 4641, 93364, 371716, 8256, 9385, 4777060, 759704, 8249, 5463, 4384, 46632, 8205, 16513, 4121, 165689, 8221, 153023, 78425, 2752, 78400, 9281, 9392, 308009, 10726, 10554, 2737449, 23255048, 186293128, 89299848, 78458, 5019632, 71132, 1264988, 346713, 2511770, 2511739, 79248, 72912, 148080, 557905, 9289008, 346592, 18867984, 267472, 10055132, 2618844, 1377180, 84057, 84043, 45552, 38757, 77100, 11369, 2122537, 78502, 42665, -329551966, 362187, 8817, 93808, 17357, 18635, 156971, 80875, 87352533, 2936, 16887, 22697, 67840, 2909404, 71595, 45916, 75348, 2375, 4189, 18952, 2336, 5552, 2716, 18878, 9203, 1405, 595, 22287, 19734, 87889, 6040, 286, 2649, 85068, 41826, 331701, 8554065, 133473, 269199, 269208, 534565, 724748, 362739, 725250, 725147, 5223, 2533, 176528, 77405, 10185, 319180, 17422, 40867024, 10222800, 157285, 2115625, 5802460, 136028, 2105737, 33744, 35824, 81047, 11086, 22842, 371049, 2406, 8202, 16397, 611997, 33484, 8425, 1075909, 4238277, 8553925, 33488, 32865, 42299, 4176, 8342, 1450448, 77968, 65936, 161680, 574352, 714576, 2862800, 42000, 157264, 40020, 299128, 149728, 1301114, 22162, 4711, 20475, 162496, 16478, 2598, 4294, 20913, 167787, 81963, 165669, 83237, 20914, 41617, 5245, 10553, 2658, 41677, 20915, 5196, 334792, 19857600, 167410, 83638, 20916, 668673, 1337236, 5313940, 20917, 85652, 43430, 264614, 2727334, 2546086, 5104, 556342, 5461302, 57008, 2901296, 17209715, 37368179, 37393237, 1546772, 2651810, 41095, 279519, 41951, 43746, 16845, 20235, 21933, 77307, 147023, 187855, 2839247, 77148, 85311, 72709794, 1135751, 1555963, 569673], inHash, 0, '|=|, nil);		if index then '["root", "buttons", "protoBorder", "protoPictureButton", "protoCloseBox", "protoStaticText", "protoInputLine", "protoRichInputLine", "protoLabelInputLine", "protoLabelPicker", "entryLineIcon", "protoTextButton", "protoCheckboxIcon", "protoRadioCluster", "protoRadioButton", "protoIconCheckBox", "protoIconRadioButton", "protoGauge", "protoSlider", "protoTable", "protoGlance", "analogClock", "protoStatusBar", "protoStatus", "protoTitle", "protoBottomTitle", "protoDivider", "protoDragNGo", "protoFloater", "protoFloatNGo", "ProtoRoll", "protoApp", "protoRollItem", "polygon", "picture", "paragraph", "group", "clipboard", "protoPictRadioButton", "protoCategorylist", "protoTextList", "contentList", "contentPictList", "textListScrollers", "AZTabs", "AZVert", "protoNumberPicker", "years", "decades", "centuries", "poptop", "PeriodicAlarmEditor", "protoPicker", "protoCorrector", "NetChooser", "zoneChooser", "printerSerialPicker", "notify roll", "notificationRoll", "msgBox", "protoRoutingSlip", "stringDataView", "protoSendButton", "protoRouteSlip", "protoFormatList", "protoTransportHeader", "protoTransport", "statusText", "titleText", "progress", "barber", "gauge", "stop primary", "icon", "closeBox", "statusTemplate", "secondary", "filingSlip", "protoKeyboard", "alphaKeyboard", "alphaKeys", "numberKeyboard", "numericKeys", "datesKeyboard", "dateKeys", "phoneKeyboard", "phoneKeys", "phoneKeys2", "AddressPicker", "Show", "IORouteButton", "TransportButton", "IOItemView", "IOItemLayout", "transportIcon", "IOEntryView", "IOEmbeddedView", "IOItemViewDef", "PrintPreview", "PrintSlip", "FaxSlip", "willDial", "faxAssist", "ManualDialing", "TitleLabel", "NoteContents", "NotesArea", "NotesSlip", "NotesContent", "ZapSlip", "ScheduleSlip", "scheduleslip cancel", "scheduleslip schedule button", "ScheduleSlipTitle", "DateValue", "StartStopValue", "Invitees", "Location", "MtgMsgHeader", "SeriesMsgHeader", "FirstLastDateValue", "RemindSlip", "remindslip cancel button", "MeetingTitle", "toSubjectSlip", "addresseeSlip", "worldClock", "calculatorkeypad", "Styles", "WritingStyle", "inputArea", "metrics", "TryEasyWord", "TryHarderWord", "calendar", "cribView", "cribMoreIndicator", "UpDownScroller", "dateView", "weeknum", "divider", "Status Bar", "DatesNew", "DatesShow", "DayView", "scheduleView", "DayTable", "HeaderLabels", "MeetingView", "Slider", "MeetingText", "CribNote", "CribText", "MonthOverview", "ToDoList", "ToDoSlip", "ToDoListOverview", "protoCalendarFinder", "protoMeetingSoupFinder", "protoRepeatingMeetingSoupFinder", "MeetingSlip", "MeetingSlipHeader", "AlarmPicker", "FrequencyPicker", "RepeatingView", "MeetingNotesSlip", "MeetingNotesArea", "NotesButton", "doit button", "AskThisOrAll", "DeleteRMDialog", "ChangeDialogHeader", "RepeatCluster", "ConfirmChangeButton", "cancel button", "MeetingAlarmPicker", "EventAlarmPicker", "WeekStartPicker", "WarningView", "WarningTime", "protoMonth", "MonthTitle", "monthInYear", "YearView", "calendarOverview", "MeetingList", "ToDoAgenda", "protoCalendarPrintFormat", "protoPrintDay", "divider1", "PrintHeader", "DayOfWeek", "CribFrame", "MeetingFrame", "ExtrasFrame", "RemoveOldMeetingsForm", "prompt", "DaysValue", "protoBook", "Copperfield", "protoFuncContent", "contentArea", "subContent", "markuplayer", "Browse", "Outline", "broscroll", "BroBar", "showBar", "picker", "markupBtn", "bookmark", "page#", "info", "pgRouting", "ctrlPanel", "page#Dialog", "writein", "ofN", "pgDlog", "remoteThumb", "pageFormat", "pageRangeForm", "canonicalTextBlock", "canonCompass", "canonScrollee", "canonScroller", "canonicalTitle", "protoStoryCard", "protoBookmark", "protoBookAbout", "protoBookPrefs", "TinyTim", "dTitle", "topicsButton", "HelpOutline", "ListView", "assist drawer", "actionBox", "assist cancel button", "assist doit button", "AssistFrames", "cityTimeOverview", "protoConfigPicker", "DevicePicker", "CallSlipTemplate", "callButton", "LCD Screen", "KeyedDigits", "PhonePad", "QuickDial", "SpeakerToggle", "Hangup", "CallSlip", "Demo Data", "OnlineServices", "FindDrawer", "findDate", "findGlobalRadio", "findSelectedRadio", "findFrontmostRadio", "findButton", "findStatus", "selectApps", "FindAll", "findlist", "protoNullButton", "NamesButton", "DatesButton", "ExtrasButton", "OverviewButton", "ScrollUpButton", "ScrollDownButton", "UndoButton", "AssistButton", "mailEditor", "messageHolder", "messageField", "mailRoutingSlip", "smartMail", "message", "MailPrefs", "mailRegister", "cancelBtn", "regBtn", "backBtn", "register1", "regFirstName", "regLastName", "regHomePhone", "regDayPhone", "register2", "regAddress", "regCity", "regState", "regZip", "regCountry", "register3", "regCard", "regCardNumber", "CreditExperRegister", "regCardFirst", "regCardLast", "register4", "regCertificate", "regCertPassword", "regBackupPassword", "register5", "regPassword", "ReviewDict", "AddReviewDict", "RemoveReviewDict", "ExpandReviewDict", "AutoAdd", "AddAutoAddDict", "RemoveAutoAddDict", "a2zIndexer", "zero2nineIndexer", "kUCBlockCharSetInfo", "kStandardCharSetInfo", "HWRecPreferencesForm", "userStyleOption", "soundPickerPopup", "SoundGauge", "ActionEffects", "PenEffects", "sleepPopup", "countries", "keyboards", "paperSize", "modemVolume", "blinddialing", "pulseDialing", "touchtonedialing", "modemPicker", "RemoveModem", "alarmSoundPickerPopup", "AlarmSoundGauge", "useSystemVolume", "AnnoyingAlarms"][index]		end,	BreakLoop: plainC.FBreakLoop,	ExitBreakLoop: plainC.FExitBreakLoop,	DV: plainC.FDV,	GC: plainC.FGC,	StackTrace: plainC.FStackTrace,	Stats: plainC.FStats,//	StrHexDump: plainC.FStrHexDump,	Uriah: plainC.FUriah,	UriahBinaryObjects: plainC.FUriahBinaryObjects,	ObjectSize:	func(inObject, ioResults, arg3, inPath)		begin		if IsImmediate(inObject) or IsReadOnly(inObject) then			return;		if ioResults.reference and inObject = ioResults.reference then			AddArraySlot(ioResults.capture,  {  path: Clone(inPath),															object: inObject,															class: ClassOf(inObject),															size: 0,															sizeAll: 0 });		if SetContains(arg3, inObject) then			return;		local objSize, objPath;		local objClass := ClassOf(inObject);		if ClassOf(objClass) = 'int then			(objClass := 'map);		if IsImmediate(objClass) then			return;		local initialSize := ioResults.objects.size;		SetAdd(arg3, inObject, true);		local primObjClass := PrimClassOf(inObject);		if IsSubclass(objClass, 'string) then			(objClass := 'string);		if {  rectangle: true,				line: true,				roundrectangle: true,				oval: true,				wedge: true,				region: true,				polygon: true,				text: true,				picture: true }.(objClass) then			objClass := 'shape;		if not HasSlot(ioResults, objClass) then			objClass := primObjClass;		if primObjClass = 'frame then			begin			local frameMap := call kGetFrameStuffFunc with (inObject, 0);			if frameMap then				begin				objPath := Clone(inPath);				AddArraySlot(objPath, 'map);				ObjectSize(frameMap, ioResults, arg3, objPath)				end;			local faultSoup := call kGetFrameStuffFunc with (inObject, 1);			if faultSoup then				begin				objPath := Clone(inPath);				AddArraySlot(objPath, 'faultSoup);				ObjectSize(faultSoup, ioResults, arg3, objPath)				end;			foreach tag, obj in inObject do				if tag <> '_parent and tag <> 'viewCObject then					begin					if not IsReadOnly(tag) then						begin						objPath := Clone(inPath);						AddArraySlot(objPath, 'slot);						ObjectSize(tag, ioResults, arg3, objPath)						end;					if not IsImmediate(obj) and not IsReadOnly(obj) then						begin						objPath := Clone(inPath);						AddArraySlot(objPath, tag);						ObjectSize(obj, ioResults, arg3, objPath)						end					end;			if HasSlot(inObject, 'viewCObject) then				begin				local obj := inObject.viewCObject;				if obj then					begin					obj := inObject:ChildViewFrames();					if Length(obj) > 0 then						begin						objPath := Clone(inPath);						AddArraySlot(objPath, 'kids);						ObjectSize(inObject:ChildViewFrames(), ioResults, arg3, objPath)						end					end				end;			objSize := 12 + Length(inObject) * 4			end		else if primObjClass = 'array then			begin			foreach tag, obj in inObject do				if not IsImmediate(obj) and not IsReadOnly(obj) then					begin					objPath := Clone(inPath);					AddArraySlot(objPath, tag);					ObjectSize(obj, ioResults, arg3, objPath);					end;			objSize := 12 + Length(inObject) * 4			end		else if primObjClass = 'binary then			objSize := Length(inObject) + 12		else			objSize := 0;		if primObjClass <> 'frame and not IsReadOnly(objClass) then			begin			objPath := Clone(inPath);			AddArraySlot(objPath, 'binary);			ObjectSize(objClass, ioResults, arg3, objPath)			end;		ioResults.(objClass).count := ioResults.(objClass).count + 1;		ioResults.(objClass).size := ioResults.(objClass).size + objSize;		ioResults.objects.count := ioResults.objects.count + 1;		ioResults.objects.size := ioResults.objects.size + objSize;		if ioResults.capture = 'print then			nil		else			ioResults.capture and (not ioResults.reference and (ioResults.filter <> 'all and ioResults.filter <> 'allKids and objClass = ioResults.filter or ioResults.filter = 'all or ioResults.filter = 'allKids)			 and AddArraySlot(ioResults.capture, { path: Clone(inPath),																object: inObject,																class: objClass,																size: objSize,																sizeAll: ioResults.objects.size - initialSize }))		end,	TrueSize: func(inObject, inFilter)		begin		local object := inObject;		local results := {	objects: {count: 0, size: 0},									binary: {count: 0, size: 0},									frame: {count: 0, size: 0},									array: {count: 0, size: 0},									string: {count: 0, size: 0},									symbol: {count: 0, size: 0},									bitmap: {count: 0, size: 0},									shape: {count: 0, size: 0},									map: {count: 0, size: 0},									real: {count: 0, size: 0},									instructions: {count: 0, size: 0},									capture: [],									reference: nil,									filter: inFilter };		if not inFilter then			results.capture := nil;		else if ClassOf(inFilter) <> 'symbol then			begin			results.reference := inFilter;			results.filter := nil			end;		local local3;		if object = nil then			begin			object := { undo: [  call kGetFrameStuffFunc with (object, 2),										call kGetFrameStuffFunc with (object, 3) ],							root: GetRoot(),							vars: vars };			local3 := []			end		else if object = vars then			local3 := [GetRoot()]		else if object = GetRoot() then			local3 := [vars]		else			local3 := [GetRoot(), vars];		ObjectSize(object, results, local3, SetClass([], 'pathExpr));		local logger := func(inPrintDef)			begin			local curLength := 0;			for i := 1 to Length(inPrintDef) by 2 do				begin				local tabLength := inPrintDef[i - 1];				if curLength < tabLength then					Write(Substr("                                             ", 0, tabLength - curLength));				curLength := tabLength;				if i < Length(inPrintDef) then					begin					local oneLine := SubstituteChars(Stringer([inPrintDef[i]]), "\n", " ");					Write(oneLine);					end				else					return;				curLength := curLength + StrLen(oneLine)				end;			Write("\n")			end;		foreach tag, item in results do			if ClassOf(item) = 'frame and tag <> 'reference and item.count > 0 then				call logger with ([0, tag, 20, item.count, 35, item.size]);		if inFilter then			begin			local captured := Clone(results.capture);			Sort(captured, '|>|, if inFilter = 'allKids then 'sizeAll else 'size);			if inFilter <> 'all and inFilter <> 'allKids then				Write("\n" & inFilter & "\n");			foreach item in captured do				begin				local pathStr := nil;				foreach element in item.path do					if ClassOf(element) = 'int then						pathStr := pathStr & $[ & element & $]					else						pathStr := pathStr & $. & element;				if StrFilled(pathStr) and pathStr[0] = $. then					pathStr := Substr(pathStr, 1, nil);				if ClassOf(inFilter) <> 'symbol then					call logger with ([2, item.class, 20, "", 30, pathStr]);				else					call logger with ([2, item.size, 10, item.sizeAll, 18, item.class, 30, "", 40, pathStr]);			end		end;		if not inFilter then			results		end,	ViewAutopsy: plainC.FViewAutopsy,// Utilities - Miscellaneous	BinEqual: plainC.FBinEqual,	BinaryMunger: plainC.FBinaryMunger,	Chr: plainC.FCHR,	Ord: plainC.FORD,// Views	GetOrientation: plainC.FGetOrientation,	GetRoot: plainC.FGetRoot,	GetView: plainC.FGetView,	GetViewFlags: plainC.FGetFlags,	SetValue: plainC.FSetValue,	SetBounds: plainC.FSetBounds,	RelBounds: plainC.FRelBounds,	InsetRect: plainC.FInsetRect,	OffsetRect: plainC.FOffsetRect,	MakeBitmap: plainC.FMakeBitmap,	MakeLine: plainC.FMakeLine,	MakeRect: plainC.FMakeRect,	MakeText: plainC.FMakeText,	MakeTextBox: plainC.FMakeTextBox,	MakeTextLines: plainC.FMakeTextLines,	MakeShape: plainC.FMakeShape,	OffsetShape: plainC.FOffsetShape,	PictureBounds: plainC.FPictureBounds,	ShapeBounds: plainC.FShapeBounds,	GraphicBounds: func(inGraphic)		begin		if IsBinary(inGraphic) and IsInstance(inGraphic, 'picture) then			PictureBounds(inGraphic)		else if IsFrame(inGraphic) and IsFrame(inGraphic.bounds) then			inGraphic.bounds		else			ShapeBounds(inGraphic)		end,	GraphicSize: func(inGraphic)		begin		local box := GraphicBounds(inGraphic);		SetBounds(0, 0, box.right - box.left, box.bottom - box.top)		end,	SetKeyView: plainC.FSetKeyView,	SystemConfigChange: func(inTag)		begin		PerformIfDefined({			lcdContrast: func()				begin				SetLCDContrast(GetUserConfig('lcdContrast))				end,			alarmVolume: func()				begin				local volume := GetUserConfig('alarmVolume);				if volume <> DecibelsToVolume(GetUserConfig('alarmVolumeDb)) then					SetUserConfig('alarmVolumeDb, VolumeToDecibels(volume))				end,			alarmVolumeDb: func()				begin				local volume := DecibelsToVolume(GetUserConfig('alarmVolumeDb));				if volume <> GetUserConfig('alarmVolume) then					SetUserConfig('alarmVolume, volume)				end,			soundVolume: func()				begin				local actualVolume := GetVolume();				local volume := GetUserConfig('soundVolume);				if volume <> actualVolume then					SetVolume(volume);				if volume <> DecibelsToVolume(GetUserConfig('soundVolumeDb)) then					SetUserConfig('soundVolumeDb, VolumeToDecibels(volume))				end,			soundVolumeDb: func()				begin				local sysVolume := GetSystemVolume();				local dBvolume := GetUserConfig('soundVolumeDb);				if dBvolume <> sysVolume then					SetSystemVolume(dBvolume);				local volume := DecibelsToVolume(dBvolume);				if volume <> GetUserConfig('soundVolume) then					SetUserConfig('soundVolume, volume)				end,			inputGain: func()				begin				local gain := GetUserConfig('inputGain);				if IsInteger(gain) then					begin					if gain < 0 then						gain := 0					else if gain > 255 then						gain := 255					end				else					gain := 128;				gain := SetInputGain(gain);				if gain <> userConfiguration.inputGain then					begin					userConfiguration.inputGain := gain;					FlushUserConfig()					end				end,			outputDevice: func()				begin				local device := GetUserConfig('outputDevice);				device := SetOutputDevice(device);				if device <> userConfiguration.outputDevice then					begin					userConfiguration.outputDevice := device;					FlushUserConfig()					end				end		}, inTag, nil)		end,	FlushUserConfig: func()		begin	//	AddProcrastinatedCall('_FlushUserConfig, functions.EntryChangeXmit, [userConfiguration, '_newt], 0)		end,	SetUserConfig: func(inTag, inValue)		begin		local protoValue := userConfiguration._proto.(inTag);		if inValue = protoValue		or (IsBinary(inValue) and IsBinary(protoValue) and BinEqual(inValue, protoValue)) then			RemoveSlot(userConfiguration, inTag)		else			userConfiguration.(EnsureInternal(inTag)) := EnsureInternal(inValue);		local configFrame := {};		configFrame.(inTag) := userConfiguration.(inTag);		try			SystemConfigChange(inTag)		onexception |evt.ex| do			begin			end;		foreach tag, configFunc deeply in userConfigChangeRegistry do			if userConfigChangeRegistry.(tag) = configFunc then				try					if GetFunctionArgCount(configFunc) = 2 then						call configFunc with (inTag, configFrame);					else						call configFunc with (inTag)				onexception |evt.ex| do					begin					end;		FlushUserConfig();		inValue		end,	SetUserConfigEnMasse: func(inTag, inValue)		begin		foreach tag, value in inValue do			begin			local protoValue := userConfiguration._proto.(tag);			if value = protoValue			or (IsBinary(value) and IsBinary(protoValue) and BinEqual(value, protoValue)) then				RemoveSlot(userConfiguration, tag)			else				userConfiguration.(EnsureInternal(tag)) := EnsureInternal(value);			end;		try			SystemConfigChange(inTag)		onexception |evt.ex| do			begin			end;		foreach tag, configFunc deeply in userConfigChangeRegistry do			if userConfigChangeRegistry.(tag) = configFunc then				try					if GetFunctionArgCount(configFunc) = 2 then						call configFunc with (inTag, inValue);					else						call configFunc with (inTag)				onexception |evt.ex| do					begin					end;		FlushUserConfig();		inValue		end,	GetUserConfig: func(inTag) userConfiguration.(inTag),	RegUserConfigChange: func(id, fn)		begin		userConfigChangeRegistry.(EnsureInternal(id)) := fn;		nil		end,	UnRegUserConfigChange: func(id)		begin		RemoveSlot(userConfigChangeRegistry, id);		nil		end,	RegFolderChanged: func(id, fn)		begin		folderChangedRegistry.(EnsureInternal(id)) := fn;		nil		end,	UnRegFolderChanged: func(id)		begin		RemoveSlot(folderChangedRegistry, id);		nil		end,	RegStoreChange: func(id, fn)		begin		storeChangeRegistry.(EnsureInternal(id)) := fn;		nil		end,	UnRegStoreChange: func(id)		begin		RemoveSlot(storeChangeRegistry, id);		nil		end,	RegPowerStatusChange: func(id, fn)		begin		PowerStatusChangeRegistry.(EnsureInternal(id)) := fn;		nil		end,	UnRegPowerStatusChange: func(id)		begin		RemoveSlot(PowerStatusChangeRegistry, id);		nil		end,	GetRegisteredSound: func(id)		begin		local snd := soundRegistry.(id);		if not snd then			snd := soundRegistry.simpleBeep;		return snd		end,	PlaySoundIrregardlessAtVolume: func(snd, vol)		begin		local sound := Clone(snd);		sound := ConvertToSoundFrame(sound);		sound.volume := vol;	//	PlaySoundIrregardless(sound)		end,	GetAppPrefs: func(appSym, defaults)		begin	/*	local sysSoup := GetStores()[0]:GetSoup(ROM_systemSoupName);		local appName := SymbolName(appSym);		local crsr := Query(sysSoup, {type: 'index, indexPath: 'tag, beginKey: appName, endKey: appName});		local prefs := crsr:Entry();		if prefs then			prefs		else if defaults then			begin			prefs := Clone(defaults);			if not prefs.tag then				prefs.tag := appName;			sysSoup:Add(prefs)			end	*/ defaults						/* TEST */		end,	GetAuxButtons: func(appSym)		begin		local auxBtns := [];		if appSym then			foreach btn in auxButtonRegistry do				if btn.destApp = appSym then					AddArraySlot(auxBtns, btn);		if appSym = GetUserConfig('blessedApp) then			foreach btn in auxButtonRegistry do				if not btn.destApp then					AddArraySlot(auxBtns, btn);		auxBtns		end,	ModalState: plainC.FModalState,	Time: plainC.FTime,	TimeInSeconds: plainC.FTimeInSeconds,	GetStores: func() [nil],	/* TEST */	BatteryCount: func() 1,		/* TEST */	BatteryStatus: func(selector) { acPower: 'yes, batteryCapacity: 100 },	/* TEST */	GetAllRawDisplayParams: func()		begin		if GlobalVarExists('allRawDisplayParams) then			allRawDisplayParams		else			[	kPortraitParams,				kLandscapeParams,				{  _proto: kPortraitParams,					orientation: 2,					appAreaBounds: { left: 0, top: 0, right: 320, bottom: 434 } },				{  _proto: kLandscapeParams,					orientation: 3,					appAreaBounds: { left: 0, top: 0, right: 434, bottom: 320 } } ]		end,	GetRawDisplayParams: func(inOrientation)		GetAllRawDisplayParams()[inOrientation],	GetBBParams: func(inOrientation)		begin		local bbParms;		if GlobalVarExists('buttonBarParams) then			bbParms := buttonBarParams[inOrientation];		if not bbParms then			begin			local bbPositions := GetUserConfig('buttonBarPositions);			local bbControlsPositions := GetUserConfig('buttonBarControlsPositions);			local bbBellyButtonPositions := GetUserConfig('bellyButtonPositions);			if bbPositions or bbControlsPositions or bbBellyButtonPositions then				begin				local rawParms := GetRawDisplayParams(inOrientation);				local barPosition := if bbPositions and bbPositions[inOrientation] then bbPositions[inOrientation] else rawParms.buttonBarPosition;				local ctrlsPosition := if bbControlsPositions and bbControlsPositions[inOrientation] then bbControlsPositions[inOrientation] else rawParms.buttonBarControlsPosition;				local bellyBtnPosition := if bbBellyButtonPositions and bbBellyButtonPositions[inOrientation] then bbBellyButtonPositions[inOrientation] else rawParms.bellyButtonPosition;				if barPosition = 'right or barPosition = 'left then					begin					if ctrlsPosition <> 'bottom then ctrlsPosition := 'top					end				else					begin					if ctrlsPosition <> 'right then ctrlsPosition := 'left					end;				if barPosition <> rawParms.buttonBarPosition or ctrlsPosition <> rawParms.buttonBarControlsPosition or bellyBtnPosition <> rawParms.bellyButtonPosition then					begin					if barPosition = 'right or barPosition = 'left then						bbParms := { buttonBarPosition: barPosition,										 buttonBarThickness: rawParms.buttonBarVThickness,										 buttonBarControlsPosition: ctrlsPosition,										 bellyButtonPosition: bellyBtnPosition }					else if barPosition = 'top or barPosition = 'bottom then						bbParms := { buttonBarPosition: barPosition,										 buttonBarThickness: rawParms.buttonBarHThickness,										 buttonBarControlsPosition: ctrlsPosition,										 bellyButtonPosition: bellyBtnPosition }					end				end			end;		bbParms		end,	CreateDisplayParams: func(inOrientation)		begin		if not inOrientation then			inOrientation := GetOrientation();		local rawParms, disParms, bbParms;		rawParms := GetRawDisplayParams(inOrientation);		disParms := rawParms;		bbParms := GetBBParams(inOrientation);		if bbParms then			begin			disParms := {  _proto: rawParms,								appAreaBounds: nil, appAreaWidth: nil, appAreaHeight: nil,								buttonBarBounds: nil, buttonBarPosition: nil };			if bbParms.buttonBarPosition = 'right then				begin				disParms.appAreaWidth := rawParms.rootBounds.right - bbParms.buttonBarThickness;				disParms.appAreaHeight := rawParms.rootBounds.bottom;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.left := rawParms.rootBounds.right - bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'right				end			else if bbParms.buttonBarPosition = 'left then				begin				disParms.appAreaWidth := rawParms.rootBounds.right - bbParms.buttonBarThickness;				disParms.appAreaHeight := rawParms.rootBounds.bottom;				disParms.appAreaGlobalLeft := bbParms.buttonBarThickness;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.right := bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'left				end			else if bbParms.buttonBarPosition = 'top then				begin				disParms.appAreaWidth := rawParms.rootBounds.right;				disParms.appAreaHeight := rawParms.rootBounds.bottom - bbParms.buttonBarThickness;				disParms.appAreaGlobalTop := bbParms.buttonBarThickness;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.bottom := bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'top				end			else if bbParms.buttonBarPosition = 'bottom then				begin				disParms.appAreaWidth := rawParms.rootBounds.right;				disParms.appAreaHeight := rawParms.rootBounds.bottom - bbParms.buttonBarThickness;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.top := rawParms.rootBounds.bottom - bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'bottom				end			else if bbParms.buttonBarPosition = 'none then				begin				disParms.appAreaHeight := rawParms.rootBounds.bottom;				disParms.appAreaWidth := rawParms.rootBounds.right;				disParms.buttonBarBounds := { left: 0, top: 0, right: 0, bottom: 0 };				disParms.buttonBarPosition := 'none			end;			disParms.appAreaBounds := RelBounds(disParms.appAreaLeft, disParms.appAreaTop, disParms.appAreaWidth, disParms.appAreaHeight);			if bbParms.buttonBarControlsPosition and bbParms.buttonBarControlsPosition <> disParms.buttonBarControlsPosition then				disParms.buttonBarControlsPosition := bbParms.buttonBarControlsPosition;			if bbParms.bellyButtonPosition and bbParms.bellyButtonPosition <> disParms.bellyButtonPosition then				disParms.bellyButtonPosition := bbParms.bellyButtonPosition			end;		disParms		end,	GetAppParams: func()		{  appAreaGlobalTop: displayParams.appAreaGlobalTop,			appAreaGlobalLeft: displayParams.appAreaGlobalLeft,			appAreaTop: displayParams.appAreaTop,			appAreaLeft: displayParams.appAreaLeft,			appAreaWidth: displayParams.appAreaWidth,			appAreaHeight: displayParams.appAreaHeight,			appAreaBounds: displayParams.appAreaBounds,			buttonBarBounds: displayParams.buttonBarBounds,			buttonBarPosition: displayParams.buttonBarPosition },	BHNotify: func(inLevel, inHeaderStr, inMessageStr, inSound, inVolume)		begin		local notInfo := {_proto: if inLevel = 9 then @86 else @127,								timestamp: 1,  //Time(),								nfType: inLevel,								nfText: EnsureInternal(inMessageStr),								overview: EnsureInternal(inHeaderStr),								seenByUser: nil,								sound: inSound,								volume: inVolume};	//	if not inSound and BFind([2,3,5,9], inLevel, '|<|, nil) then	//		notInfo.sound := GetRegisteredSound(GetUserConfig('beepSound));		local notifyApp := GetRoot().notification;		if inLevel = 5 or inLevel = 6 or inLevel = 3 /*FOR TEST*/ then			notifyApp:ShowItem(notInfo, nil)		else if inLevel = 2 then			AddDeferredSend(GetRoot().notifyIcon, 'AddMessage, [notInfo])		else if inLevel = 1 then			AddDeferredSend(notifyApp, 'AddItem, [notInfo, true])		else			AddDeferredSend(notifyApp, 'ShowItem, [notInfo, nil]);		notInfo		end};// These get added into the functions frame at CNotebook initexternalFuncs := {};