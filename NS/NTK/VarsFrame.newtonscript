/* -----------------------------------------------------------------------------	NTK, being desktop-based, has different vars requirements to the MessagePad	hardware platform. Primarily, in addition to the usual vars, we have:		protoEditor, since editing is done using NewtonScript key handlers.		__platform, since we can switch platform definitions.		__origVars & __origFunctions also support platform switching.	Based on an analysis of GetGlobals() in NTK:	NTK vars are different to Newton vars because we don’t have the view system.	NTK functions are the same, but we also want build-time functions for NTK, and some functions are swapped out when changing platform.	So here is the confusion: how are these organised?gVarFrame -- all vars	InitObjects() => AddGCRoot AND AllocateFrame	REPInit sets vars.varsgConstantsFrame -- global constants	InitInterpreter() => AddGCRoot AND AllocateFrame	used in Frames.cc if hasGlobalConstantFunctions to FDefineGlobalConstant	used by compiler to detect var/const collision	These are already handled by the compiler.		constant xx := 123;	and		DefineGlobalConstant('xx, 123);	have the same effect.vars.constantsNILconstant xx := 123NILxx123vars.xx := 456456xx123vars.xx456xx := 789Assignment to constant xx	HOW ARE THEY LOOKED UP?	---- it’s done by the compilergFunctionFrame -- user-defined functions	---- file "Functions Frame" predefines externalFunctions := {...}; // OpenResFile, StuffHex et al	InitObjects() => AddGCRoot	InitFunctions() => AllocateFrame	REPInit sets vars.functions	InitScriptGlobals() copies externalFunctions to gFunctionFrame==vars.functions	---- function lookup starts here then tries the internalFuncs framegConstFuncFrame -- pure functions	---- forNTK:	---- file "Functions Frame" predefines constantFunctions := {...}; // LocObj, ButtonBounds et al	---- InitScriptGlobals() sets vars.constantFunctions to this frame	CCompiler::CCompiler => AddGCRoot AND AllocateFrame / ref from vars.constantFunctions	Here’s what we need to do to build this in to NTKConstData:		build NTX which contains protoProtoEditor		run MachOtoNTK with args (Toolkit.exp, NTX.app) to build ntkC streamfile containing C entry points		build NSConstData defining forNTK -- vars will have protoProtoEditor!		build NTK.framework		build NTX again -- it will now have the plain C protoProtoEditor functions----------------------------------------------------------------------------- */vars := {	compilerCompatibility: 1,//	vdescHandlers: nil,		// original defines a frame: { picture: {...} } for handling that resource	constantFunctions: nil,	functions: nil,			// build-time functions (see __origFunctions) plus those from the platform file	vars: nil,	userConfiguration: nil,	// not original, but we do more now	international: nil, 	this: nil,	protoEditor: nil,			// to be read from EditorCommands stream file	protoProtoEditor: nil,	// defined below	// for debug	dbgnovarnames: nil, 	prettyPrint: true,	printDepth: 3,	printLength: nil,	trace: nil,/*		swapped in from __platform.platformVariables	knownglobalfunctions: nil,	GlobalFnHelpStrings: nil,	_UnitManager: nil,	_GetSoundFrameCache: nil,	_GetSynthSoundFrameCache: nil,	_GetSynthSoundFrameSlowCache: nil,*/	__platform: nil,			// to be read from platform stream file	/*		MagicPointerTable			[]		platformFunctions		platformWeakFunctions	DefConst, XORPixels, MakeExtrasIcons		platformVariables		platformConstants		__ntDefaults		nameMapReasons		nameMap					mapping new proto names		viewClasses				frame defining all viewClass defaults		viewClassArray			ditto but as array		templates				frame defining all view template defaults		templateArray			ditto but as array		scriptSlots				default script slot text & help		attributeSlots			default attribute slot text & help		toolPaletteIcons		symbols for all icons in the tool palette		version					5		copyrightNotice		"© Apple Computer, Inc. 1993-1997"		screenSize				frame defining platform screen size 		installer				Install(), Remove()		Dump	*/	// vars to be restored when platform is removed	__origVars: nil,	/*		'[	compilerCompatibility, vdescHandlers,			constantFunctions, functions, vars, userConfiguration, international,			protoEditor, protoProtoEditor, 			dbgnovarnames, prettyPrint, printDepth, printLength, trace, 			__origFunctions, __origVars ],	*/	// functions to be restored when platform is removed	//	we really should define these in the functions slot but since they’re native Mac functions they’re a little difficult to reverse-engineer	__origFunctions: nil,	/*		'[	BrowseSlot,			ReadFramePartFile,			ReadMemoryPartFile,			ReadStreamFile,			PutMacScrap,			GetMacScrap,			Time,		// defined in global functions			Ticks,	// deprecated			FullPathNameFromFileSpec,			OpenResFile,			CloseResFile,			OpenResFileX,			CloseResFileX,			OpenResourceFileSpec,			UseResourceFile,			CurrentResourceFile,			CountResources,			CountResourceTypes,			GetResource,			Get1Resource,			GetNamedResource,			GetIndexedResource,			GetIndexedResourceType,			GetIndexedResourceInfo,			MeasureString,			StuffHex,			ExtractData,			VerboseGC,			GetSndAsSamples,			GetSndAsSamplesRate11KHz,			GetSndAsSamples8kMuLaw,			GetSndAsSamplesCompressed6To1,			ImageFile,			ImageFileFunction,			CalculateMask,			XORBitMaps,			GetPICTDepth,			GetPICTData,			GetPictAsBits,			GetProjectInfo,			GetPartCount,			GetPartInfo,			GetPartData,			GetPartFrame ]*/	// the usual vars (now we have a full Newton OS in the toolkit)	_curClick: nil,	_dataDefs: nil,	_viewDefs: nil,	actionDescription: nil,	activePackageList: nil,	appClassesRegistry: nil,	auxButtonRegistry: nil,	availablePrinters: nil,	baudTypes: nil,	busyPackages: nil,	busySlots: nil,	cardfilePrefs: nil,	cardSlotIcons: nil,	cardSoups: nil,	classes: nil,	commConfigChangeRegistry: nil,	commConfigRegistry: nil,//	constantFunctions: nil,	correctInfo: nil,	coverPageRegistry: nil,	creditCardTypes: nil,	dataConversionRegistry: nil,	dictionaries: nil,	displayParams: nil,	emailSystems: nil,	entryForms: nil,	extras: nil,	findApps: nil,	folderChangedRegistry: nil,	fonts: nil,	formulaList: nil,	formulasRegistry: nil,//	functions: nil,	inboxApps: nil,//	international: nil,	ioBusy: nil,	lastTextChanged: nil,	lastTextHiliteChanged: nil,	modemLocations: nil,	navigator: nil,	notifications: nil,	oldPowerOffHandler: nil,	openCardViews: nil,	pagerTypes: nil,	paperPrefs: nil,	parts1x: nil,	phoneTypes: nil,	powerOffFenceSitters: nil,	powerOffRegistry: nil,	powerOnRegistry: nil,	preferences: nil,	prefs: nil,	prefsRegistry: nil,//	prettyPrint: nil,//	printDepth: nil,//	printLength: nil,	procrastinatedActions: nil,	psFonts: nil,	registry: nil,	routing: nil,	setTimeRegistry: nil,	setTimeSeed: nil,	soundRegistry: nil,	soupChangedRegistry: nil,	storeSlipRegistry: nil,//	trace: nil,	transports: nil,	unionSoupRegistry: nil,	userConfigChangeRegistry: nil,//	userConfiguration: nil,//	vars: nil};/* -----------------------------------------------------------------------------	Now define the protoProtoEditor.	The protoEditor is defined in the EditCommands file which is read at NTK	launch.----------------------------------------------------------------------------- */vars.protoProtoEditor := {	Selection: plainC.Selection,	SelectionOffset: plainC.SelectionOffset,	SelectionLength: plainC.SelectionLength,	SetSelection: plainC.SetSelection,	ReplaceSelection: plainC.ReplaceSelection,	TextString: plainC.TextString,	TextLength: plainC.TextLength,	FindLine: plainC.FindLine,	LineStart: plainC.LineStart,	NumberOfLines: plainC.NumberOfLines,	LineTop: plainC.LineTop,	LineBottom: plainC.LineBottom,	LineBaseline: plainC.LineBaseline,	LeftEdge: plainC.LeftEdge,	RightEdge: plainC.RightEdge,	PointToOffset: plainC.PointToOffset,	MapChars: plainC.MapChars,	SearchChars: plainC.SearchChars,	Peek: plainC.Peek,	SetKeyHandler: plainC.SetKeyHandler,	GetKeyHandler: plainC.GetKeyHandler,	SetMetaBit: plainC.SetMetaBit,	QuoteCharacter: plainC.QuoteCharacter,	CharacterClass: plainC.CharacterClass,	SetCharacterClass: plainC.SetCharacterClass,	TokenStart: plainC.TokenStart,	TokenEnd: plainC.TokenEnd,	TellUser: plainC.TellUser,	VisibleTop: plainC.VisibleTop,	VisibleLeft: plainC.VisibleLeft,	VisibleHeight: plainC.VisibleHeight,	VisibleWidth: plainC.VisibleWidth,	SetVisibleTop: plainC.SetVisibleTop,	SetVisibleLeft: plainC.SetVisibleLeft};/* -----------------------------------------------------------------------------	Globals are initialized in the same way as normal.----------------------------------------------------------------------------- */initGlobalsFunc := func()	begin	// update read-only vars programatically	foreach tag, item in @546 do		if not vars.(tag) then			vars.(tag) := if IsFunction(item) then call item with ()														 else item;	// update read/write vars	foreach tag, item in @547 do		if not vars.(tag) then			vars.(tag) := Clone(item);	// update user configuration from persistent storage	call @118 with ();	// set default print configuration	vars.printDepth := 1;	vars.printLength := 16	end;/* -----------------------------------------------------------------------------	Initialize stores (for VBOs), and default soups.----------------------------------------------------------------------------- */initScriptsFunc := func()	begin// set up the internal store	local internalStore := GetStores()[0];	if StrEqual(internalStore:GetName(), "Untitled") then		internalStore:SetName("Internal");// set up initial soup state	foreach item in @548 do		begin		if not internalStore:HasSoup(item.soupDef.name) then			begin			local soupName := item.soupDef.name;			local soup := CreateSoupFromSoupDef(item.soupDef, internalStore, nil);			if item.initialEntries then				begin				local initialPopulation := item.initialEntries;				if IsFunction(initialPopulation) then					initialPopulation := call initialPopulation with ();				foreach entry in initialPopulation do					soup:AddFlushed(if IsReadOnly(entry) then Clone(entry) else entry)				end			end		end;/*// run the initialization scripts	foreach initScript in @549 do		begin	//	local now := Ticks();	// don’t know what that’s doing here		call initScript with ()		end;// start alarms	AddDeferredCall(functions.SetNextAlarm, nil)*/	end;