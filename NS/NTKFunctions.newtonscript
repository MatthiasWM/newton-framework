/*----------------------------------------------------------------------	NTK functions used at build time.	Since this is a custom part, we need a custom partframe.----------------------------------------------------------------------*/partData := {	externalFunctions:  {		// plain C functions will be substituted by ResMaker		DefineGlobalConstant: 'FDefineGlobalConstant,		UnDefineGlobalConstant: 'FUnDefineGlobalConstant,		DefPureFn: 'FDefPureFn,		StuffHex: 'FStuffHex,		LoadDataFile: 'FLoadDataFile,		ReadStreamFile: 'FReadStreamFile,		Disasm: _FDisasm,		DisasmRange: _FDisasmRange		// we may add others like GetProjectInfo, GetPartInfo, etc	},	constantFunctions: {		// localization		LocObj: func(obj, path) begin			if not vars.kSyntaxCheck then begin				if not vars.locRoot exists then					Throw('|evt.ex.msg|, "No localization frame specified.");				if not locRoot.english exists then					locRoot.english := {};				if locRoot.english.(path) exists then begin					local pp := locRoot.english.(path);					if ClassOf(obj) = 'string and ClassOf(pp) = 'string and Length(obj) <> Length(pp) then begin						local err := Stringer(foreach x in path collect x & ".");						err[length(err) div 2 - 2] := $ ;						Throw('|evt.ex.msg|, "Localization string for path '" & err & " redefined as: " & obj)					end				end;				locRoot.english.(path) := obj;				if locRoot.(language) exists then begin					if locRoot.(language).(path) exists then						locRoot.(language).(path)	// this is the expression thatâ€™s returned					else						Throw('|evt.ex.msg|, "Localization frame for " & language & " has no entry at " & path)				end else					Throw('|evt.ex.msg|, "Localization frame has no entry for language " & language)			end		end	},	scripts: {		formInstallScript: func(partFrame) begin			local extras := vars.extras;			if IsArray(extras) then begin				foreach one in extras do begin					if one.app = partFrame.app then begin						GetRoot():Notify(kNotifyAlert, "Extras Drawer", "The application you just installed conflicts with another application. Please contact the application vendor for an updated version.");						break					end				end			end;			if HasSlot(partFrame, 'devInstallScript) then begin				partFrame:devInstallScript(partFrame);				partFrame.devInstallScript := nil			end;			partFrame.InstallScript := nil		end,		formRemoveScript: func(removeFrame) begin			if HasSlot(removeFrame, 'devRemoveScript) then				removeFrame:devRemoveScript(removeFrame)			// no point making it nil, package is going anyway		end,		autoInstallScript: func(partFrame, removeFrame) begin			removeFrame := EnsureInternal({RemoveScript:partFrame.devRemoveScript});			partFrame:devInstallScript(partFrame, removeFrame);	// dev can add extra slots to removeFrame			removeFrame		end	}};