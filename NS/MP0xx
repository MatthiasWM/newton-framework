/*------------------------------------------------------------------------------	Get required resources.------------------------------------------------------------------------------*///OpenResFile(home & "Resources0");//DefineGlobalConstant('kIcon_mail,     GetPictAsBits("email", nil));//DefineGlobalConstant('kSoundPackage,	 GetNamedResource("pkg ", "sound", 'package));//CloseResFile();DefineGlobalConstant('kMemoHeaderField,{	_proto: protoStaticText,	preallocatedContext: 'explanation,	viewBounds: SetBounds(0, 1, 0, 14),	viewJustify: 0x800032,	text: "Memo Header"});DefineGlobalConstant('kMemoAddresseeField,{	_proto: newtSmartNameView,	preallocatedContext: 'toSubject,	viewBounds: SetBounds(0, 13, -5, 47),	viewJustify: vjParentFullH + vjParentTopV,	viewLineSpacing: 30,	label: "Name",	indent: 55,	memory: 'memoAddresee,	path: 'toName,	flavor:	{	_proto: newtSmartNameFilter,		picker: func()			begin			protoPeoplePopup:New({_proto: GetDataDefs('|nameRef.people|), singleSelect: true}, nil, self, nil)			end	},	viewSetupDoneScript: func()		begin		SetKeyView(self.entryLine, 9999)		end});DefineGlobalConstant('kAddresseeField,{	_proto: protoStaticText,	preallocatedContext: 'explanation,	viewBounds: SetBounds(0, 1, 0, 14),	viewJustify: 0x800032,	text: "Addressee"});DefineGlobalConstant('kCribField,{	preallocatedContext: 'textView,	viewClass: 0x51,	viewFlags: vVisible,	viewBounds: SetBounds(26, 0, 0, 0),	viewJustify: 0x8000F0,	textFlags: 0x18,	text: nil,	viewSetupFormScript: func()		begin		text := :GetMeetingText(realData);		self.viewFont := cribFont;		self.viewLineSpacing := cribLineSpacing		end,	viewChangedScript: func(arg1, arg2)		begin		if arg1 = 'text then			begin			local local1 := MakeRichString(arg2.text, arg2.styles);			AddProcrastinatedSend('calendar, cribView, 'changeNote, [realData, 'mtgText, local1], 500)			end		end,	_cacheContext:	{		_parent: nil,		_proto: nil,		viewCObject: nil,		viewBounds: SetBounds(26, 0, 0, 0),		viewFont: nil,		viewLineSpacing: nil,		text: nil	},	debug: 9392});DefineGlobalConstant('kCheckBoxMask,	MakeBinaryFromHex("0000000000040019001900360026004300080000003000000000000000C00000198000003B8000000F0000000F0000000600000004000000000000000000000000000000", 'mask));DefineGlobalConstant('kCheckBoxOffBitmap,{	mask: kCheckBoxMask,	bits: MakeBinaryFromHex("000000000004001900190013002600200000000000000000DB60000000000000802000008020000000000000802000008020000000000000DB6000000000000000000000", 'bits),	bounds: SetBounds(0, 0, 13, 13)});DefineGlobalConstant('kCheckBoxOnBitmap,{	mask: kCheckBoxMask,	bits: MakeBinaryFromHex("000000000004003400340013004100200008000000300000DB60000000C0000099A00000BBA000000F0000008F2000008620000004000000DB6000000000000000000000", 'bits),	bounds: SetBounds(0, 0, 13, 13)});DefineGlobalConstant('kTimeStampField,{	_proto: protoGlance,	preallocatedContext: 'timeStampField,	viewJustify: vjLeftH + vjCenterV,	viewSetupFormScript: func()		begin		self.text := $  & DateNTime(timestamp);		self.viewBounds := RelBounds(15, 0, StrFontWidth(text, viewFont), 12)		end});DefineGlobalConstant('kScrollers,	//kRef44BD99{	viewJustify: vjParentRightH + vjParentCenterV + vjParentClip,	//0x160	viewFlags: vReadOnly,	ScrollRect: nil,	DataRect: nil,	ViewRect: nil,	viewScroll2DScript: func(arg1, arg2)		begin		local theParent := :Parent();		if :GetArrow(arg1) = 'more then			begin			local dt := Ticks();			theParent:Scroll(arg1);			RefreshViews();			dt := Ticks() - dt;			if dt < scrollingSleepTime then				Sleep(scrollingSleepTime - dt)			end;		theParent:SetScrollers()		end,	preallocatedContext: 'scrollers,	_proto: @656});/*------------------------------------------------------------------------------	Magic pointers 0 - 101------------------------------------------------------------------------------*/mp0xx := [/*------------------------------------------------------------------------------	@0			All the assistantÕs actions?*/	[		kFindAction,		kFaxAction,		kPrintAction,		kRemindAction,		kMailAction,		kScheduleAction,		kCallAction,		kAboutAction	],/*------------------------------------------------------------------------------	@1			Letter format?*/	{  _proto: protoFloatNGo,		viewBounds: SetBounds(0, -196, 220, -26),		viewJustify: vjParentCenterH + vjParentBottomV,		viewEffect: 0,		fields: nil,		target: nil,		ReOrientToScreen: ROM_DefRotateFunc,		stepChildren: [ stepChildren: 			{				_proto:				{	_proto: newtFalseEntryView,					viewBounds: SetBounds(0, 0, 0, -16),					viewJustify: vjParentFullH + vjParentFullV,					targetSlot: 'fields				},				viewBounds: SetBounds(0, 0, 0, -16),				viewJustify: vjParentFullH + vjParentFullV,				targetSlot: 'fields,				viewChildren: [ viewChildren: 					kAddresseeField,					{						_proto: newtSmartNameView,						viewBounds: SetBounds(0, 13, 0, 138),						viewJustify: vjParentFullH + vjParentTopV,						viewLineSpacing: 30,						label: "To",						indent: 30,						memory: 'addressee,						path: 'toFullAddress,						flavor:						{							_proto: newtSmartNameFilter,							EntryToPath: func(arg1)								begin								target.toName := :PrimaryName(arg1);								local streetAddr := GetRoot().cardfile:bcStreetAddress(arg1, 'string);								target.(path) := :PrimaryName(arg1);								if streetAddr then									target.(path) := target.(path) & $\n & :bcFullAddress(streetAddr[0])								end,							picker: func()								begin								protoPeoplePopup:New({_proto: GetDataDefs('|nameRef.people|), singleSelect: true}, nil, self, nil)								end						},						viewSetupFormScript: func()							begin							inherited:viewSetupFormScript();							entryLine.viewJustify := vjParentLeftH + vjParentFullV							end,						viewSetupDoneScript: func()							begin							SetKeyView(self.entryLine, 9999)							end,					},					{	_proto: newtCheckBox,						viewBounds: SetBounds(30, 5, 130, 18),						viewJustify: 0x2000,						text: "Sign Letter",						path: 'fromSignature,						added: nil,						viewSetupFormScript: func()							begin							local persona := ResolveEntryAlias(userConfiguration.currentPersona);							if not persona or not persona.owner.signature then								viewFlags := 0							else								added := true;							target.fromSignature := GetUserConfig('signLetter);							inherited:viewSetupFormScript()							end,						viewQuitScript: func()							begin							if added then								SetUserConfig('signLetter, target.fromSignature)							end					}				],				explanation: nil,				allocateContext: [					'explanation, kAddresseeField				]			}		],		debug: 265274	},/*------------------------------------------------------------------------------	@2		protoPeriodicAlarmEditor*/	{},/*------------------------------------------------------------------------------	@3			Meeting alarm soup index?*/	{ type: 'index, indexPath: 'mtgAlarm, beginKey: 0 },/*------------------------------------------------------------------------------	@4		ROM_alarmWakeup			Bell sound.*/	{	sndFrameType: 'codec,		codecName: "TDTMFCodec",		dataType: 16,		bufferSize: 6400,		bufferCount: 4,		compressionType: 6,		samplingRate: 21600,		samples: MakeBinaryFromHex("0001000100000000000202EE00004E200000000A000A006401F48000000002EE0000002800000000000003E8000000000000", 'samples),		userName: "Bell"	},/*------------------------------------------------------------------------------	@5		protoAnalogClock*/	{		viewClass: clView,		viewFlags: vVisible + vClickable,		viewFormat: vfRound(6),		viewBounds: SetBounds(4, 0, 21, 17),		viewJustify: vjParentLeftH + vjParentCenterV,		drawFillPat: 5,		smallClocks:		{			bits: MakeBinaryFromHexbits),			bounds: SetBounds(0, 0, 408, 17)		},		handsBounds: SetBounds(0, 0, 17, 17),		hours: 0,		minutes: 0,		lastSeed: 0,		CalcTime: func()			begin			local secs := TimeInSeconds();			minutes := secs div 60;			hours := minutes div 60;			minutes := minutes mod 60 div 5;			if minutes > 6 then				hours := hours + 1;			hours := hours mod 12;			(300 - secs mod 300) * 1000			end,		viewSetupFormScript: func()			begin			:SetupIdle(:CalcTime())			end,		viewDrawScript: func()			begin			if lastSeed <> setTimeSeed then				begin				lastSeed := setTimeSeed;				:SetupIdle(:CalcTime())				end;			DrawXBitmap(handsBounds, smallClocks, hours, 0);			DrawXBitmap(handsBounds, smallClocks, 12 + minutes, 1)			end,		viewIdleScript: func()			begin			local msecs := :CalcTime();			:Dirty();			msecs			end,		viewClickScript: func(unit)			begin			InkOff(unit);			:Hilite(true);			timeField:Toggle();			:Hilite(nil);			true			end,		debug: 72801	},/*------------------------------------------------------------------------------	@6			Delimiters table, used by InitUnicode.*/	MakeBinaryFromHex("01010101010101010101010101010101"							"01010101010101010101010101010101"							"01010101010101010101010101010101"							"00000000000000000000010101010101"							"01000000000000000000000000000000"							"00000000000000000000000000000000"							"00000000000000000000000000000000"							"00000000000000000000000000000000"							"00000000000000000000000000000000"							"00000000000000000000000000000000"							"01010101010101010101010101010101"							"01010101010101010101010101010000"							"01010101010101010101010000000000"							"01010101010101010000000000000000"							"00000000000000000000000000000000"							"00000000000000000000000000000000", 'table),/*------------------------------------------------------------------------------	@7			toupper table?*/	MakeBinaryFromHex("000102030405060708090A0B0C0D0E0F"							"101112131415161718191A1B1C1D1E1F"							"202122232425262728292A2B2C2D2E2F"							"303132333435363738393A3B3C3D3E3F"							"404142434445464748494A4B4C4D4E4F"							"505152535455565758595A5B5C5D5E5F"							"604142434445464748494A4B4C4D4E4F"							"505152535455565758595A7B7C7D7E7F"							"414143454E4F55414141414141434545"							"4545494949494E4F4F4F4F4F55555555"							"A0A1A2A3A4A5A6AEA8A9AAABACADAE4F"							"B0B1B2B3B4B5B6B7B8B9BABBBCBDAE4F"							"C0C1C2C3C4C5C62222C92041414FAEAE"							"D0D122222727D6D75959DADBDCDDAEAE"							"E0E1E2E3E44145414545494949494F4F"							"F04F55555549F6F7F8F9FAFBFCFDFEFF", 'table),/*------------------------------------------------------------------------------	@8			assistFrames*/	assistFrames,/*------------------------------------------------------------------------------	@9			Card slip?*/	{},/*------------------------------------------------------------------------------	@10	protoPasswordSlip - NPG 2.1 OS Addendum			Password slip.*/	{},/*------------------------------------------------------------------------------	@11	ROM_checkBitmaps*/	[	kCheckBoxOffBitmap,		kCheckBoxOnBitmap,	],/*------------------------------------------------------------------------------	@12	ROM_priorityItems*/	[		{	bits: MakeBinaryFromHex("00000000000400CF00CF013300DD01421FF000007FFC00007FFC0000FE7E0000F87E0000FE7E0000FE7E0000FE7E0000FE7E0000FE7E0000FE7E00007FFC00007FFC00001FF00000", 'bits),			bounds: SetBounds(0, 0, 15, 14)		},		{	bits: MakeBinaryFromHex("00000000000400DF00DF013300ED01421FF000007FFC00007FFC0000F83E0000F39E0000FF9E0000FF3E0000FE7E0000FCFE0000F9FE0000F01E00007FFC00007FFC00001FF00000", 'bits),			bounds: SetBounds(0, 0, 15, 14)		},		{	bits: MakeBinaryFromHex("00000000000400EF00EF013300FD01421FF000007FFC00007FFC0000F83E0000F39E0000FF9E0000FE3E0000FE3E0000FF9E0000F39E0000F83E00007FFC00007FFC00001FF00000", 'bits),			bounds: SetBounds(0, 0, 15, 14)		},		{	bits: MakeBinaryFromHex("00000000000400FF00FF0133010D01421FF000007FFC00007EFC0000FC7E0000FC7E0000FC7E0000FC7E0000FC7E0000FFFE0000FFFE0000FC7E00007C7C00007FFC00001FF00000", 'bits),			bounds: SetBounds(0, 0, 15, 14)		}	],/*------------------------------------------------------------------------------	@13			notification alert wavy border*/	MakeBinaryFromHex("89504E470D0A1A0A0000000D49484452000000D00000009A0802000000570551290000000467414D410000D90342D64FA1000000097048597300000B1300000B1301009A9C180000002474455874536F66747761726500517569636B54696D6520362E352E3120284D6163204F53205829004B23F8CA0000000774494D4507D407100B142F2E687AFB0000029149444154789CEDDBD16EDA50104551B0F2FFBF4C835245145F1B0B79CE9D266BBD953079DA22909C5E6FB7DB65D7F57A7D7AE4E5892B579B27C367ACBFD1D0FAF6C8A1ABDF70353CBCAC833BF8BDE0A0A7C096C77FA88DD33D45B56C7D01CEF298D6B27E084EF71DD8C7CBA7F67F7FEAEA3FBABA7F68183EA9D56769573FE0EAEB701CDC91EF08FB865D2DC3A74211C111F5E6BB373862FD53D52B1C5182234A7044098E28C111B5BCBD76827D7EF1CB7C8223EA1E9C9FAA9C6EEB0FF45EE188121C5182234A7044098EA87B7016BF9C6EEB571F5EE188121C5116BF14B2F86532C1112538A2044794E088B2F8A58AC52FF3098E288B5F4A58FCD282E088121C5182234A704459FC52C2E29716044794C52F852C7E994C7044098E28C1112538A22C7EA962F1CB7C8223CAE2971216BFB42038A2044794E088121C5116BF94B0F8A505C11165F14B218B5F26131C5182234A7044098E288B5FAA58FC329FE088B2F8A584C52F2D088E28C1112538A2044794C52F252C7E6941704459FC52C8E297C9044794E088121C518223CAE2972A16BFCC2738A22C7E2961F14B0B82234A7044098E28C11165F14B098B5F5A101C5116BF14B2F86532C1112538A2044794E088B2F8A58AC52FF3098E288B5F4A58FCD282E088121C5182234A704459FC52C2E29716044794C52F852C7E994C7044098E28C1112538A22C7EA962F1CB7C8223CAE2971216BFB42038A2044794E088121C5116BF94B0F8A505C11165F14B218B5F26131C5182234A7044098E288B5FAA58FC329FE088FA183EFAF96278E4D7BFEFFD11D6D5EFBCFAFBF8D7F1CEFBB6F7DEE4B972357CF2EBE0E014FFFC9F067F3FA5D47760CBFA2138D7635ACBD617E0144F518D3F8D1E7C4BD7F6FDA9ABE957C3C3CB5670FBDFBDFF2770576DAFFE00C93BE41FCBEA39EB0000000049454E44AE426082", 'picture),/*------------------------------------------------------------------------------	@14			Blinking star notify icon; standard phase.*/	{	mask: MakeBinaryFromHex("00000000000400D600D601BE00E401CD7FFC0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE00007FFC0000", 'mask),		bits: MakeBinaryFromHex("000000000004003D003D0196004B01A5000000003EF800007EFC00007C7C00007C7C000000000000600C0000701C0000783C0000711C0000739C000067CC00002FE8000000000000", 'bits),		bounds: SetBounds(0, 0, 15, 14)	},/*------------------------------------------------------------------------------	@15			Blinking star notify icon; blinking phase.*/	{	mask: MakeBinaryFromHex("00000000000400D600D601BE00E401CD7FFC0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE0000FFFE00007FFC0000", 'mask),		bits: MakeBinaryFromHex("00000000000400D600D601BE00E401CD000000003C7800007C7C0000783C000000000000000000000000000040040000600C0000600C0000610C00004384000007C0000000000000", 'bits),		bounds: SetBounds(0, 0, 15, 14)	},/*------------------------------------------------------------------------------	@16	ROM_bootSound*/	{	sndFrameType: 'codec,		codecName: "TDTMFCodec",		dataType: 16,		bufferSize: 6400,		bufferCount: 4,		compressionType: 6,		samplingRate: 21600,		samples: MakeBinaryFromHex("000100010000000000080105A0421B5800000001001405DC05141F4000000105A042009600000001001403E80514012C00000149A0C51B5800320001001405DC04B01F4000000149A0C5009600320001001403E804B0012C00000187FEB81B5800640001001405DC044C1F4000000187FEB8009600640001001403E8044C012C0000020B40421B5800960001001405DC03E81F400000020B4042009600960001001403E803E8012C0000", 'samples),		userName: "Chord"	},/*------------------------------------------------------------------------------	@17			Calculator app.*/	GetLayout("calculator"),	/*------------------------------------------------------------------------------	@18			Meeting duration slip?*/	{},/*------------------------------------------------------------------------------	@19	protoRepeatDateDurationTextPicker*/	{},/*------------------------------------------------------------------------------	@20	protoSenderPopup*/	{},/*------------------------------------------------------------------------------	@21	protoStatusBarber*/	{	viewClass: clView,		viewFlags: vVisible + vReadOnly,		viewBounds: SetBounds(0, 8, 166, 18),		viewJustify: vjParentCenterH + vjSiblingBottomV,		name: 'barber,		indicator: true,		index: 0,		pattern: [  "\uE0C183070E1C3870",						"\u3870E0C183070E1C",						"\u0E1C3870E0C18307",						"\u83070E1C3870E0C1" ],		viewSetupDoneScript: func()			begin			self.box := MakeShape(:LocalBox())			end,		viewUpdateFormScript: func()			begin			index := index + 1;			if index > 3 then				index := 0;			:Dirty()			end,		viewDrawScript: func()			begin			:DrawShape(box, {penPattern: 3, fillPattern: pattern[index]})			end,		debug: 2288	},/*------------------------------------------------------------------------------	@22	ROM_calendarNotesName*/	"Calendar Notes",/*------------------------------------------------------------------------------	@23	ROM_calendarSoupName*/	"Calendar",/*------------------------------------------------------------------------------	@24			Repeating day strings.*/	[		"Every day",		"first",		"second",		"third",		"fourth",		"last",		"Every other ^0",		"Every ^0",		"Every ^0 and ^1",		"Every ^0, ^1, and ^2",		"Every ^0, ^1, ^2, and ^3",		"Every ^0, ^1, ^2, ^3, and ^4",		"Every ^0, ^1, ^2, ^3, ^4, and ^5",		"The ^0 ^1 of every month",		"The ^0 and ^1 ^2 of every month",		"The ^0, ^1 and ^2 ^3 of every month",		"The ^0, ^1, ^2 and ^3 ^4 of every month",		"The ^0 of every month",		"Every ^0",		"The ^0 ^1 of every ^2"	],/*------------------------------------------------------------------------------	@25			Annotated meeting stuff.*/	{},/*------------------------------------------------------------------------------	@26	newtAreaCodeLine*/	{	_proto: newtProtoLine,		flavor:		{	_proto: newtTextFilter,			recFlags: 16779777,			dictionaries: 117,			InitFilter: func() nil		},		viewSetupFormScript: func()			begin			inherited:viewSetupFormScript();			entryLine._keyboard := GetRoot().phoneKeyboard			end	},/*------------------------------------------------------------------------------	@27			Empty frame.*/	{ },/*------------------------------------------------------------------------------	@28	protoCanonicalCompass*/	{},/*------------------------------------------------------------------------------	@29			Template for base view frame.*/	{	_parent: nil,		_proto: nil,		viewCObject: nil	},/*------------------------------------------------------------------------------	@30			Template for ?*/	{  _proto: @168,		bounds: nil,		pickItems: nil,		refCon: nil,		wordInfo: nil	},/*------------------------------------------------------------------------------	@31			Template for ?*/	{	_proto: nil,		_parent: nil,		viewCObject: nil,		realData: nil	},/*------------------------------------------------------------------------------	@32			Canonical date frame.*/	{		year: nil,		month: nil,		Date: nil,		dayOfWeek: nil,		hour: nil,		minute: nil,		second: nil,		daysInMonth: nil	},/*------------------------------------------------------------------------------	@33	*/	{	viewClass: clView,		viewFlags: vVisible + vCalculateBounds,		viewBounds: SetBounds(0, 20, 0, 100),		viewJustify: vjParentFullH + vjSiblingBottomV + vjChildrenLasso,		viewChildren: nil,		viewCObject: nil,		_parent: nil,		debug: 1222	},/*------------------------------------------------------------------------------	@34*/	{	_proto: nil,		viewBounds: nil,		textFlags: 0	},/*------------------------------------------------------------------------------	@35*/	{	_proto: protoPicker,		bounds: nil,		pickItems: nil,		callbackcontext: nil	},/*------------------------------------------------------------------------------	@36	SYS_boundsFrame*/	{ left:nil, top:nil, right:nil, bottom:nil },/*------------------------------------------------------------------------------	@37*/	{	viewClass: 0x4C,		viewFlags: vVisible + vClickable,		viewJustify: 0,		viewOriginX: 0,		viewOriginY: 0,		dataBounds: nil,		viewSetupDoneScript: func()			begin			(:Parent()).scrolledView := self;			self.viewBounds := Clone(viewBounds)			end,		debug: 269199	},/*------------------------------------------------------------------------------	@38*/	{	viewClass: clView,		viewFlags: vVisible + vClipping + vClickable,		declareSelf: 'base,		ShowScroller: func()			begin			local kids := :ChildViewFrames();			kids[1]:Show()			end,		HideScroller: func()			begin			local kids := :ChildViewFrames();			kids[1]:Hide()			end,		scrolledView: nil,		scroller: nil,		debug: 269208	},/*------------------------------------------------------------------------------	@39*/	{	_proto: nil,		viewBounds: nil	},/*------------------------------------------------------------------------------	@40*/	{	_proto: protoStaticText,		viewFlags: 0xA03,		viewFormat: 0,		viewJustify: 0,		textFlags: 0x100,		tabs: [ 18, 36, 54, 72, 90, 108, 126, 144, 162, 180, 198, 216, 234 ],	// every 1/4 inch		viewGestureScript: func(unit, gesture)			begin			if gesture = aeTap then				:?buttonClickScript();			end,		viewClickScript: func(unit) nil,		buttonClickScript: func() nil,		debug: 8554065	},/*------------------------------------------------------------------------------	@41*/	{	_proto: protoStaticText,		viewBounds: SetBounds(0, 0, 0, 16),		viewJustify: vjCenterH + vjParentFullH,		viewFont: tsSimple + tsSize(9) + tsBold,		debug: 534565	},/*------------------------------------------------------------------------------	@42*///	@42,	// thatÕs just nastyÉ	nil,/*------------------------------------------------------------------------------	@43*/	{	_proto: protoFloater,		viewFlags: vApplication + vFloating + vClipping + vClickable,		appSymbol: 'cardfile,		preallocatedContext: 'cardfile	},/*------------------------------------------------------------------------------	@44			Names soup indexes.*/	[ { structure: 'slot, path: 'sorton, type: 'string },	  { structure: 'slot, path: 'labels, type: 'tags, tags: nil }	],/*------------------------------------------------------------------------------	@45*/	{	_proto: protoFloatNGo,		viewBounds: SetBounds(0, -156, 220, -26),		viewJustify: vjParentCenterH + vjParentBottomV,		viewEffect: 0,		viewSetupFormScript: func() nil,		ReOrientToScreen: ROM_DefRotateFunc,		stepChildren: [ stepChildren: 			{				_proto:				{					_proto: newtFalseEntryView,					viewBounds: SetBounds(0, 0, 0, -16),					viewJustify: vjParentFullH + vjParentFullV,					targetSlot: 'fields				},				viewBounds: SetBounds(0, 0, 0, -16),				viewJustify: vjParentFullH + vjParentFullV,				targetSlot: 'fields,				viewChildren: [ viewChildren: 					kMemoHeaderField,					kMemoAddresseeField,					{	_proto: newtLabelCustomInputLine,						viewBounds: SetBounds(0, 50, -5, 115),						viewJustify: vjParentFullH + vjParentTopV,						viewLineSpacing: 30,						newRecFlags: 1636865,						label: "Subject",						indent: 55,						path: 'title,						memory: 'memoSubject,						jamFromEntry: func(arg1) nil,					}				],				explanation: nil,				toSubject: nil,				allocateContext: [					'explanation, kMemoHeaderField,					'toSubject, kMemoAddresseeField				]			}		],		debug: 350698	},/*------------------------------------------------------------------------------	@46*/	{ type: 'index, indexPath: '_uniqueId },/*------------------------------------------------------------------------------	@47	ROM_cardfileSoupName*/	"Names",/*------------------------------------------------------------------------------	@48			Empty frame.*/	{ },/*------------------------------------------------------------------------------	@49			Recognizer popup*/	{		recognizers:		{			text:			{				name: 'text,				symbol: 'doTextRecognition,				default: [ 'numbersCursiveOption, 'wordsCursiveOption ],				all: [ 'wordsCursiveOption, 'numbersCursiveOption ]			},			shapes:			{				name: 'shapes,				symbol: 'doShapeRecognition,				default: [ ],				all: [ ]			},			ink:			{				name: 'ink,				symbol: 'doInkWordRecognition,				default: [ ],				all: [ ]			}		},		recogText:		{			icon: @720,			item: "Text",			indent: 20,			symbol: 'recogText,			commands:			{				text:		{ recState: true, recSettings: 'default },				shapes:  { recState: nil, recSettings: 'default },				ink:		{ recState: true, recSettings: 'default }			}		},		recogNumbers:		{			icon:			{	bits: MakeBinaryFromHex("00000000000400DA00DA002000E4002E03180000063000001FFC00003FF800000C60000018C000007FF00000FFE000003180000063000000", 'bits),				bounds: SetBounds(0, 0, 14, 10)			},			item: "Numbers",			indent: 20,			symbol: 'recogNumbers,			commands:			{				text:		{ recState: true, recSettings: 'numbersCursiveOption },				shapes:  { recState: nil, recSettings: 'default },				ink:		{ recState: true, recSettings: 'default }			}		},		recogChars:		{			icon:			{	bits: MakeBinaryFromHex("0000000000040185018500C3018F00D21EF000000C60000006C000000380000006C000000C6000001EF0000080020000B6DA000080020000", 'bits),				bounds: SetBounds(0, 0, 15, 10)			},			item: "Letter-by-letter",			indent: 20,			symbol: 'recogChars,			commands:			{				text:		{ recState: true, recSettings: 'lettersCursiveOption },				shapes:  { recState: nil, recSettings: 'default },				ink:		{ recState: true, recSettings: 'default }			}		},		recogInkText:		{			icon: @722,			item: "Ink Text",			indent: 20,			symbol: 'recogInkText,			commands:			{				text:		{ recState: nil, recSettings: 'default },				shapes:  { recState: nil, recSettings: 'default },				ink:		{ recState: true, recSettings: 'default }			}		},		recogTextShapes:		{			icon:			{	bits: MakeBinaryFromHex("00000000000401C901C900C301D400D206FE000006FE00000F6600000F6600001BB600001BB6000031DE00003FDE000060EE000060EE0000F0F60000", 'bits),				bounds: SetBounds(0, 0, 15, 11)			},			item: "Text & Shapes",			indent: 20,			symbol: 'recogTextShapes,			commands:			{	text:		{ recState: true, recSettings: 'default },				shapes:  { recState: true, recSettings: 'default },				ink:		{ recState: true, recSettings: 'default }			}		},		recogShapes:		{			icon: @721,			item: "Shapes",			indent: 20,			symbol: 'recogShapes,			commands:			{	text:		{ recState: nil, recSettings: 'default	},				shapes:  { recState: true, recSettings: 'default },				ink:		{ recState: nil, recSettings: 'default }			}		},		recogSketches:		{			icon: @723,			item: "Sketches",			indent: 20,			symbol: 'recogSketches,			commands:			{	text:		{ recState: nil, recSettings: 'default },				shapes:  { recState: nil, recSettings: 'default },				ink:		{ recState: nil, recSettings: 'default }			}		},		recToggleSettings:		{			icon: @724,			item: "Preferences",			indent: 20,			symbol: 'recToggleSettings		}	},/*------------------------------------------------------------------------------	@50			Cities for Time Zones.*/	[		{	name: "Atlanta",			latitude: 50331648,			longitude: 411029364,			gmt: -18000,			country: 'USA,			areacode: 404		},		{	name: "Bangkok",			latitude: 20480631,			longitude: 149876462,			gmt: 25200,			country: 'Thailand,			areacode: 2		},		{	name: "Boston",			latitude: 63132042,			longitude: 430863762,			gmt: -18000,			country: 'USA,			areacode: 617		},		{	name: "Chicago",			latitude: 62386388,			longitude: 406008627,			gmt: -21600,			country: 'USA,			areacode: 312		},		{	name: "Denver",			latitude: 59254641,			longitude: 380308417,			gmt: -25200,			country: 'USA,			areacode: 303		},		{	name: "Hong Kong",			latitude: 33181605,			longitude: 170257673,			gmt: 28800,			country: 'HongKong		},		{	name: "London",			latitude: 76802366,			longitude: 536622375,			gmt: 0,			country: 'UK,			areacode: 71		},		{	name: "Los Angeles",			latitude: 50803895,			longitude: 360523730,			gmt: -28800,			country: 'USA,			areacode: 213		},		{	name: "Montr\u00E9\ual",			latitude: 67854518,			longitude: 427110636,			gmt: -18000,			country: 'Canada,			areacode: 514		},		{	name: "Moscow",			latitude: 83140426,			longitude: 56048329,			gmt: 10800,			country: 'Russia,			areacode: "095"		},		{	name: "New York",			latitude: 60721094,			longitude: 426489258,			gmt: -18000,			country: 'USA,			areacode: 212		},		{	name: "Paris",			latitude: 72875235,			longitude: 3479711,			gmt: 3600,			country: 'France,			areacode: 1		},		{	name: "San Francisco",			latitude: 56371445,			longitude: 354334801,			gmt: -28800,			country: 'USA,			areacode: 415		},		{	name: "Sydney",			latitude: 486365278,			longitude: 225510638,			gmt: 36000,			country: 'Australia,			areacode: 2		},		{	name: "Tokyo",			latitude: 53239698,			longitude: 208435160,			gmt: 32400,			country: 'Japan,			areacode: 3		}	],/*------------------------------------------------------------------------------	@51	ROM_click*/	{	sndFrameType: 'simpleSound,		dataType: 8,		compressionType: 0,		samplingRate: MakeBinaryFromHex("56EE8BA3", 'fixed),		samples: MakeBinaryFromHex("13335C8CC3EDFAFBEDD3AA753F1701000F2C5890CBF1FAF8EAD2AD71391000051430588CCCEFF9F6EAD3AB6E38100105112B568ECDEEF8F4E9DCB473390F03071229508AC7EBF9F5EBDBB1743A110B0C0E244C87BFE2F1EAE6DCB4814F2E251A111D3D6B9AC1E0F2F2DFB88958341D0F112546709AC1E0F3F0DBB78B5D3920131428456B94BDE0F1EAD2B08B67432617182C476890B8DDEEE0CAAD8F6D45281B21344C698DB2D5E0D5C2AB9170472E242A3B4E688BAECED3C9B8A591714B36323C4B576A86A4BCC0B9AFA18E6F4E40404D585F70859EAEAEA9A096876F584E4F585F6676899AA29B98958B7C665A5F64696C73808A8E8D8988877E736A686F73777A808788858280807D73", 'samples)	},/*------------------------------------------------------------------------------	@52	protoFrameFormat*/	{	_proto: protoRoutingFormat,		symbol: 'protoFrameFormat	},/*------------------------------------------------------------------------------	@53	ROM_cloud1*/	MakeBinaryFromHex("89504E470D0A1A0A0000000D49484452000000B20000006D0403000000F7CC26A10000000467414D410000D904DCB2DA0200000030504C5445FFFFFF00FF00000000000000000000000000000000000000000000000000000000000000000000000000000000000000BDE418330000000274524E53FF00E5B7304A0000001974455874536F6674776172650047726170686963436F6E766572746572355D48EE0000059B49444154789CB49ADB95C3280C86D90A745C01FD77872BD09A9BF44B089C64767998E338CE872474034FBAFEAF915E9FC8FC8CFBBF27576C49F403FA85DCC1CFF0E8AAC95FC8F5F7A90D62036B263A2B72260BF8119A0196CDA7DFC8C5911BAC810B9DD1477256912BA67DE07EBF8C9B3F930B80C5E0A0CA41E80FC968961B55F92B99149CD2ADE06E9C1FC82229B250FE67CE1FC899D5E790050AD073D125F8869C9961FD009CD0614A1A227C4ECE28A611193F31FFD3334080DE91AD6577E4EA75BB700CC8ED39B34AC618763035A305C970250F19CC921DC9C32EAFE44EB5E8C3602A63F637F24C095B41899D73CF0B6F0E4F66E3AC818C6C02E57332A484149293F314C82C6FE41D6F33482E5EC8EF0BB79BF9EF6434BF75CD03F989D50FC890368A09A73DB9BAD3076686C99FA7E5F9A50628B9A62CF2644A7E1498FDF1795B28EF905C455EC263350E3EF45CC9D44BC643721078AB7518A7D32B5A329E90734F59CE188D6CF37E49C6D02A726B4042725A23BA4732D95BF0998ACCDEBBBF88CCF3C9D51810675530D4A9D8448269DA91D3619066EE99C0A950311EFE1B79745F9C4606171D4D9BB392ADDE1158BA9A61A332C9A411F30B59EC2BCAB392B517DE9123519DC83045E964C25A1090AD7CD06D169ABA0B708C3274C4347626771798E550AD3A708B3A184AE5F6E45C04361C6A567BB63FC6C4199125580659A5947437352D8B7C62E875B61A3A37928DF6C98E62FFB259423F4823BC91A1EF5C8B0A98993C19977A6A4448D6EF97D46FC41B646D04982DBA67282567F0B15D6734D6A07921907BFA44910D59FBA9D5CAC62689A7A0BD52CD08D4B461C9199B7B6F8CB9FE835CE686B3CA20FB38A8E6097D033A2EDE92C5BB473C1B1B18C9C09FCD1678638641267521789210205565438682840A6CCC6636D17744168B410C986E8BA34B539819A23B5A4048D6868CB60536E1A5AEA03910280B0DD30D5E5A32E4DC23993157C41EEE0CADD91BF246444E3F93AB36F7209B76418258C9716DB4D16A778FFC4A9EFA6DC8B89ED607EFCF64DE5903E77767095BF2AC2EE940DE6FC543F2C80AA5F73FDA5644229FE6614F1EDB531A2DABC91847B07B6692F1188A67E2D14020ED61E1A7670D3CB9E6F2690128064B6F1EA8E0277691429A69B1534BABCC7EB8AF89A32CEA976DEDDC0291ADFF33C764DFF58FFB5B9B50F13E2791E2CE282D5ACE458C2276EE556425DBD66415398DEAB721D72FB1558DC8E2D3F357E8D3F1514AA2E53B9AE4CB58008FA79CFC07327CF7282EE46CC41C2D15B133CCCEA97B26B0750CFA3A6CA0E6EECC817747567D1707322339F3B2BC5F9199AD9D950CCD687FB8ED6D966CB0889ACC09077CA76487A6D1A1B9DCB86850C2E82C86ECA55E4FA2382073D870A39DBBAD9766D18AEC43AD8C465CD454F26DC8D74AB6A702FE787B64124D94FDBE34D007B2ED22905CA671C0861AAD9E1C9C2E9ADADBF41FAD5E058E63672D481DAF2F864E645D356221937CEC421B05199AD1237966D5A9FA7447B3614105DB8CF70764790DD605E2B16D9BBB33D7F8339B43BB33D96CF9A86FD87846A77565CD36D747E4B6466A6CE2455679B0BECE029191FC52FA67AFB029B74F52CE0876678CE741681B19B35B690CE17E4736BD93271FDE4D9C7B0A45FB7BB308EFC9D9FAD0EB2C42EE8E731FC9BA67F3679447351AFF40BEC06F5DDBF3422E928536E43CBD2A179F8BCF64E36C1159DEC7E5E250BD32C583730C36E411447D2DFDBE7A27375F31D8BE4F19D3B740F7E4CD916960E0885C0D72F7E373EB1C5C76CBB87F951EBE2DF5CEF1685C288EE92FDF77B733223863ADA66F1629029D91B7153926B7A05132DFF3AC90853C4ACB1E7C204F197BF9E9BEAEAD3F6DE2E3857C8D9C46452A66171A36875CEBC001BC216786A19395A1C4D86F9DFF5166F3261DD037EAC1D22DD3DBBF12EDDFD13B30DC72A5F44B72F4DF3B5F813FF81FAA0DFA7E7BF82BB29AFF957B5DFF020000FFFF0300AF520371BDBC309D0000000049454E44AE426082", 'picture),/*------------------------------------------------------------------------------	@54	ROM_cloud2*/	MakeBinaryFromHexpicture),/*------------------------------------------------------------------------------	@55	ROM_cloud3*/	MakeBinaryFromHexpicture),/*------------------------------------------------------------------------------	@56*/	"ConnectingÉ",/*------------------------------------------------------------------------------	@57*/	"container",/*------------------------------------------------------------------------------	@58			Copperfield app.*/	GetLayout("copperfield"),/*------------------------------------------------------------------------------	@59			International dialling codes.*/	{		Argentina:  {  name: "Argentina",	outgoing: "00",	countryCode:  54 },		Australia:  {  name: "Australia",	outgoing: "0011", countryCode:  61 },		Austria:		{  name: "Austria",		outgoing: "00",	countryCode:  43 },		Belgium:		{  name: "Belgium",		outgoing: "00",	countryCode:  32 },		Brazil:		{  name: "Brazil",		outgoing: "00",	countryCode:  55 },		Canada:		{  name: "Canada",		outgoing: "011",  countryCode:   1 },		Colombia:	{  name: "Colombia",		outgoing: "90",	countryCode:  57 },		Denmark:		{  name: "Denmark",		outgoing: "009",  countryCode:  45 },		Egypt:		{  name: "Egypt",			outgoing: "00",	countryCode:  20 },		ElSalvador: {  name: "El Salvador",	outgoing: "0",		countryCode: 503 },		Finland:		{  name: "Finland",		outgoing: "990",  countryCode: 358 },		France:		{  name: "France",		outgoing: "19",	countryCode:  33 },		Germany:		{  name: "Germany",		outgoing: "00",	countryCode:  49 },		Greece:		{  name: "Greece",		outgoing: "00",	countryCode:  30 },		HongKong:	{  name: "Hong Kong",	outgoing: "001",  countryCode: 852 },		Hungary:		{  name: "Hungary",		outgoing: "00",	countryCode:  36 },		India:		{  name: "India",			outgoing: "00",	countryCode:  91 },		Iraq:			{  name: "Iraq",			outgoing: "00",	countryCode: 964 },		Iran:			{  name: "Iran",			outgoing: "00",	countryCode:  98 },		Ireland:		{  name: "Ireland",		outgoing: "16",	countryCode: 353 },		Israel:		{  name: "Israel",		outgoing: "00",	countryCode: 972 },		Italy:		{  name: "Italy",			outgoing: "00",	countryCode:  39 },		Japan:		{  name: "Japan",			outgoing: "001",  countryCode:  81 },		Korea:		{  name: "South Korea",	outgoing: "001",  countryCode:  82 },		Kuwait:		{  name: "Kuwait",		outgoing: "00",	countryCode: 965 },		Mexico:		{  name: "Mexico",		outgoing: "98",	countryCode:  52 },		Nepal:		{  name: "Nepal",			outgoing: "00",	countryCode: 977 },		Netherlands:{  name: "Netherlands",	outgoing: "00",	countryCode:  31 },		NewZealand: {  name: "New Zealand",	outgoing: "00",	countryCode:  64 },		Norway:		{  name: "Norway",		outgoing: "095",  countryCode:  47 },		Philippines:{  name: "Philippines",	outgoing: "00",	countryCode:  63 },		Poland:		{  name: "Poland",		outgoing: "00",	countryCode:  48 },		Portugal:	{  name: "Portugal",		outgoing: "00",	countryCode: 351 },		Russia:		{  name: "Russia",		outgoing: "810",  countryCode:   7 },		SaudiArabia:{  name: "Saudi Arabia",outgoing: "00",	countryCode: 966 },		Singapore:  {  name: "Singapore",	outgoing: "005",  countryCode:  65 },		SouthAfrica:{  name: "South Africa",outgoing: "09",	countryCode:  27 },		Spain:		{  name: "Spain",			outgoing: "07",	countryCode:  34 },		Sweden:		{  name: "Sweden",		outgoing: "009",  countryCode:  46 },		Switzerland:{  name: "Switzerland",	outgoing: "00",	countryCode:  41 },		Taiwan:		{  name: "Taiwan",		outgoing: "002",  countryCode: 886 },		Thailand:	{  name: "Thailand",		outgoing: "001",  countryCode:  66 },		Tunisia:		{  name: "Tunisia",		outgoing: "00",	countryCode: 216 },		Turkey:		{  name: "Turkey",		outgoing: "99",	countryCode:  90 },		UK:			{  name: "UK",				outgoing: "00",	countryCode:  44 },		USA:			{  name: "USA",			outgoing: "011",  countryCode:   1 },		Venezuela:  {  name: "Venezuela",	outgoing: "00",	countryCode:  58 },	},/*------------------------------------------------------------------------------	@60	protoCoverPageFormatDeprecated*/	{  _proto: protoPrintFormat },/*------------------------------------------------------------------------------	@61*/	{	_proto:		{	viewClass: 0x5F,			viewFlags: vVisible,			recConfig: ROM_rcInkOrText,			iconShape: nil,			sliderWidth: 12,			transformStyle: { transform: [ 13, 1 ] },			viewSetupFormScript: func()				begin				local local1 := GetMeetingTypeInfo(realData);				iconShape := local1.shape				end,			viewDrawScript: func()				begin				if iconShape then					:DrawShape(iconShape, transformStyle)				end,			viewClickScript: func(unit)				begin				local tapX := GetPoint(firstX, unit);				local tapY := GetPoint(firstY, unit);				local box := :GlobalBox();				local sliderRight := box.left + sliderWidth;				if tapX >= sliderRight				and tapX <= sliderRight + ShapeBounds(iconShape).right				and tapY >= box.top				and tapY <= box.top + 16 then					begin					calendar.selectedMeeting := realData;					isNewMeeting := nil;					:OpenMeetingSlip(selectedMeeting, nil, nil);					true					end				end		},		viewFormat: 0,		viewBounds: nil,		viewJustify: vjParentFullH + vjSiblingBottomV,		target: nil,		targetView: nil,		sliderWidth: 0,		transformStyle: { transform: [ 1, 1 ] },		viewSetupFormScript: func()			begin			local local1 := realData;			if local1.repeatTemplate then				local1 := local1.repeatTemplate;			if local1.version <> 2 and not EntryStore(local1):IsReadOnly() then				begin				:Convert10to20(local1, nil);				EntryChangeXmit(local1, 'calendar);				if realData.repeatTemplate then					realData := :MakeInstanceOfRepeatingMeeting(local1, realData.mtgStartDate)				end;			target := self.realData;			targetView := self;			viewBounds := SetBounds(2, 0, 0, cribLineSpacing);			inherited:viewSetupFormScript()			end,		viewFindTargetScript: func(arg1)			begin			foreach item in arg1 do				if SetContains(item.types, 'meeting) then					return cribView;			self			end,		viewDropScript: func(arg1, arg2, arg3)			begin			nil			end,		viewChildren: [ viewChildren: 			{	viewClass: 0x60,				viewFlags: vVisible + vClickable,				viewFormat: 0,				viewBounds: SetBounds(0, 0, 0, 12),				viewJustify: vjParentLeftH + vjParentTopV,				debug: "Slider"			},			kCribField		],		textView: nil,		allocateContext: [			'textView, kCribField		],		_cacheContext:		{			_parent: nil,			_proto: nil,			viewBounds: nil,			viewCObject: nil,			realData: nil,			target: nil,			targetView: nil,			iconShape: nil,			textView: nil		},		debug: 9281	},/*------------------------------------------------------------------------------	@62	ROM_crumple*/	{	sndFrameType: 'codec,		codecName: "TIMACodec",		dataType: 16,		bufferSize: 10240,		bufferCount: 4,		compressionType: 6,		compressionRatio: 1.88235294117647,		samplingRate: MakeBinaryFromHex("36B00000", 'fixed),		samples: MakeBinaryFromHexsamples)	},/*------------------------------------------------------------------------------	@63	ROM_dataName*/	"data",/*------------------------------------------------------------------------------	@64*/	[		{	structure: 'slot, path: 'mtgStartDate, type: 'int },		{  structure: 'slot, path: 'mtgAlarm, type: 'int }	],/*------------------------------------------------------------------------------	@65*/	{ type: 'index, indexPath: 'mtgStartDate, beginKey: 0, endExclKey: nil },/*------------------------------------------------------------------------------	@66	ROM_dateTimeStrSpecs*/	{		longDateStrSpec: 11582026,		abbrDateStrSpec: 11614802,		yearMonthDayStrSpec: 180969,		yearMonthStrSpec: 2827,		dayStrSpec: 80466,		monthDayStrSpec: 745,		numericDateStrSpec: 183017,		numericMDStrSpec: 2793,		numericYearStrSpec: 44,		longMonthStrSpec: 11,		abbrMonthStrSpec: 19,		numericDayStrSpec: 41,		longDayOfWeekStrSpec: 10,		abbrDayOfWeekStrSpec: 18,		longTimeStrSpec: 10922700,		shortTimeStrSpec: 170636,		shortestTimeStrSpec: 2666,		hourStrSpec: 41,		minuteStrSpec: 42,		secondStrSpec: 43	},/*------------------------------------------------------------------------------	@67			Calendar day view.*/	{},/*------------------------------------------------------------------------------	@68	ROM_dialtones*/	[		MakeBinaryFromHex("0001000000000000000205380000041100000003000000C8000A0000000F03AD0000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000204B90000041100000003000000C8000A0000000F02B90000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205380000041100000003000000C8000A0000000F02B90000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205C50000041100000003000000C8000A0000000F02B90000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000204B90000041100000003000000C8000A0000000F03020000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205380000041100000003000000C8000A0000000F03020000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205C50000041100000003000000C8000A0000000F03020000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000204B90000041100000003000000C8000A0000000F03540000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205380000041100000003000000C8000A0000000F03540000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205C50000041100000003000000C8000A0000000F03540000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000204B90000041100000003000000C8000A0000000F03AD0000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000205C50000041100000003000000C8000A0000000F03AD0000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000206610000041100000003000000C8000A0000000F02B90000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000206610000041100000003000000C8000A0000000F03020000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000206610000041100000003000000C8000A0000000F03540000036C00000003000000C8000A0000000F", 'TDTMFCodec),		MakeBinaryFromHex("0001000000000000000206610000041100000003000000C8000A0000000F03AD0000036C00000003000000C8000A0000000F", 'TDTMFCodec)	],/*------------------------------------------------------------------------------	@69			Empty array.*/	[ ],/*------------------------------------------------------------------------------	@70			Dictionaries.*/	[		{	_proto: @171,			name: "User (forward)",			dictID: 31,			dictType: 0,			domainType: 4198400,			order: 0,			status: 1,			count: 0,			limit: 1000,			addDuplicates: true		},		{	_proto: @171,			name: "DarkStar (forward)",			dictID: 32,			ROMDictID: 2,			dictType: 0,			domainType: 4096,			order: 0,			status: 0		},		{	_proto: @171,			name: "letters",			dictID: 33,			ROMDictID: 0,			dictType: 0,			domainType: 4096,			order: 0,			status: 0		},		{	_proto: @171,			name: "symbols",			dictID: 40,			localDictSlot: 'recogSymbolsDictionary,			dictType: 0,			domainType: 4096,			order: 0,			status: 0		},		{	_proto: @171,			name: "address abbreviations",			dictID: 121,			ROMDictID: 28,			dictType: 0,			domainType: 2097152,			order: 0,			status: 1		},		{	_proto: @171,			name: "ParaGraph prefixes",			dictID: 122,			ROMDictID: 124,			dictType: 0,			domainType: 4097,			order: 0,			status: 1		},		{	_proto: @171,			name: "ParaGraph suffixes",			dictID: 123,			ROMDictID: 125,			dictType: 0,			domainType: 4097,			order: 0,			status: 1		},		{	_proto: @171,			name: "commons (attributed) (forward)",			dictID: 0,			linkedDictID: 15,			ROMDictID: 19,			reverseDictID: 15,			dictType: 0,			domainType: 6295552,			order: 0,			status: 1		},		{	_proto: @171,			name: "commons (attributed) (reverse)",			dictID: 15,			linkedDictID: 6,			ROMDictID: 20,			dictType: 1,			domainType: 6295552,			order: 0,			status: 1		},		{	_proto: @171,			name: "shared commons",			dictID: 6,			linkedDictID: 3,			ROMDictID: 17,			dictType: 0,			domainType: 6295552,			order: 0,			status: 1		},		{	_proto: @171,			name: "local commons",			dictID: 3,			linkedDictID: 0,			localDictSlot: 'recogCommonsDictionary,			dictType: 0,			domainType: 6295552,			order: 0,			status: 1		},		{	_proto: @171,			name: "days & months",			dictID: 34,			ROMDictID: 3,			dictType: 0,			domainType: 524288,			order: 0,			status: 0		},		{	_proto: @171,			name: "shared first names",			dictID: 48,			ROMDictID: 22,			dictType: 0,			domainType: 4198400,			order: 0,			status: 0		},		{	_proto: @171,			name: "shared honorifics",			dictID: 45,			ROMDictID: 24,			dictType: 0,			domainType: 4198400,			order: 0,			status: 0		},		{	_proto: @171,			name: "shared world cities",			dictID: 24,			ROMDictID: 29,			dictType: 0,			domainType: 4096,			order: 0,			status: 0		},		{	_proto: @171,			name: "shared countries",			dictID: 8,			ROMDictID: 30,			dictType: 0,			domainType: 4096,			order: 0,			status: 0		},		{	_proto: @171,			name: "shared world regions",			dictID: 26,			ROMDictID: 31,			dictType: 0,			domainType: 4198400,			order: 0,			status: 0		},		{	_proto: @171,			name: "local time",			dictID: 111,			localDictSlot: 'recogTimeDictionary,			dictType: 4,			domainType: 1048576,			order: 0,			status: 1		},		{	_proto: @171,			name: "local date",			dictID: 110,			localDictSlot: 'recogDateDictionary,			dictType: 4,			domainType: 524288,			order: 0,			status: 1		},		{	_proto: @171,			name: "local phone",			dictID: 112,			localDictSlot: 'recogPhoneDictionary,			dictType: 4,			domainType: 262144,			order: 0,			status: 1		},		{	_proto: @171,			name: "postal codes",			dictID: 116,			ROMDictID: 107,			dictType: 4,			domainType: 8192,			order: 0,			status: 0		},		{	_proto: @171,			name: "calcsheet",			dictID: 124,			ROMDictID: 109,			dictType: 4,			domainType: 0,			order: 0,			status: 0		},		{	_proto: @171,			name: "local numbers&money",			dictID: 113,			linkedDictID: 118,			localDictSlot: 'recogNumbersOnlyDictionary,			dictType: 4,			domainType: 8192,			order: 0,			status: 1		},		{	_proto: @171,			name: "local numbers only",			dictID: 117,			localDictSlot: 'recogNumbersOnlyDictionary,			dictType: 4,			domainType: 0,			order: 0,			status: 0		},		{	_proto: @171,			name: "local money only",			dictID: 118,			localDictSlot: 'recogMoneyOnlyDictionary,			dictType: 4,			domainType: 0,			order: 0,			status: 0		},		{	_proto: @171,			name: "Expand (forward)",			dictID: 35,			dictType: 0,			domainType: 0,			order: 0,			status: 0,			list: nil,			count: 0,			limit: 256		},		{	_proto: @171,			name: "Auto Add (forward)",			dictID: 36,			dictType: 0,			domainType: 0,			order: 0,			status: 0,			list: nil,			count: 0,			limit: 100		}	],/*------------------------------------------------------------------------------	@71*/	"DisconnectingÉ",/*------------------------------------------------------------------------------	@72	protoNumberPicker*/	{	viewClass: clPictureView,		viewFlags: vVisible,		viewFormat: nil,		viewBounds: SetBounds(20, 51, 180, 75),		declareSelf: 'digitBase,		icon: nil,		showLeadingZeros: nil,		hiOrd: 0,		fDigitsProto:		{	_proto: protoDigit,			viewBounds: SetBounds(-22, 0, 0, 28),			viewJustify: 0x1866,			increment: 1,			position: 0,			GetIndex: func(arg1)				begin				arg1 div increment mod 10				end,			viewDrawScript: func()				begin				if arrayPos <= hiOrd or showLeadingZeros then					DrawXBitmap(digitFrame, digits, currentIndex, copyMode)				end,			Advance: func(arg1)				begin				local local1, local2, local3, local4, local5, local6, local7, local8;				local1 := value + arg1;				if local1 > maxValue or local1 < minValue then					return;				local2 := self;				local3 := local2:GlobalBox();				local4 := local2:GetIndex(local1);				local5 := nil;				local6 := nil;				loop					begin					if local2.arrayPos > hiOrd and local4 <> 0 or (local2.arrayPos = hiOrd and local4 = 0) and not showLeadingZeros and not local5 then						begin						local5 := digitBase.hiOrd;						local6 := digitBase:ScanForHiOrd(local1)						end;					if local4 <> local2:GetIndex(value) then						begin						local2.currentIndex := local4;						local3.left := min(local3.left, (local2:GlobalBox()).left)						end					else						break;					local7 := local2.nextDigit;					if local7 then						local2 := if ClassOf(local7) = 'symbol then digitBase.(local7) else local7					else						break;					local4 := local2:GetIndex(local1)					end;				value := local1;				if local6 <> local5 then					begin					local5 := GetView(viewChildren[local5]):GlobalBox();					local6 := GetView(viewChildren[local6]):GlobalBox();					local3.left := min(min(local5.left, local6.left), local3.left);					local3.right := max(max(local6.left, local5.left), local3.right)					end;				local8 := digitBase:GlobalBox();				local3 := RelBounds(local3.left - local8.left, local3.top - local8.top, local3.right - local3.left, local3.bottom - local3.top);				digitBase:RevealEffect(local3.bottom * (if arg1 > 0 then -1 else 1), local3, ROM_click, nil, nil);				local1				end		},		viewSetupDoneScript: func()			begin			local local1 := AddView(self, {  _proto: fDigitsProto,														icon: ROM_digitFlapLowOrd,														viewBounds: SetBounds(-23, 0, 0, 28),														viewJustify: 102,														nextDigit: nil,														arrayPos: 0 });			local local2 := value div 10;			local local3 := maxValue div 10;			local local4 := 10;			local local5 := 1;			while local3 <> 0 do				begin				local local6 := { _proto: fDigitsProto,										icon: ROM_digitFlap,										increment: local4,										nextDigit: nil,										arrayPos: local5 };				local6 := AddView(self, local6);				local1.nextDigit := local6;				local1 := local6;				local2 := local2 div 10;				local3 := local3 div 10;				local4 := local4 * 10;				local5 := local5 + 1;				local5				end;			:ScanForHiOrd(value)			end,		viewChangedScript: func(arg1, arg2)			begin			if arg2 = self and arg1 = 'value then				arg2:RedoChildren()			end,		ScanForHiOrd: func(arg1)			begin			local local1 := arg1 div 10;			local local2 := 0;			while local1 <> 0 do				begin				local1 := local1 div 10;				local2 := local2 + 1				end;			hiOrd := local2			end,		debug: 5802140	},/*------------------------------------------------------------------------------	@73	newtStatusBarNoClose*/	{	_proto: protoStatus,		viewBounds: SetBounds(0, -18, 0, 0),		viewChildren: nil,		firstLeft: 6,		firstRight: -5,		outset: 6,		spacing: kStdButtonSpacing,		height: kStdButtonHeight,		menuLeftButtons: nil,		menuRightButtons: nil,		viewSetupChildrenScript: func()			begin			viewChildren := [];			local totalBtnWidth := 0;  // not actually used for anything			local numOfButtons := 0;			if menuLeftButtons then				begin				SetLength(viewChildren, numOfButtons + Length(menuLeftButtons));				foreach index, btn in menuLeftButtons do					begin					local width := :CalcWidth(btn);					totalBtnWidth := totalBtnWidth + width + 8;					viewChildren[numOfButtons] := if index = 0 then						{ _proto: btn, viewBounds: RelBounds(firstLeft, kStdButtonTop, width, height), viewJustify: vjCenterH + vjCenterV+ vjParentLeftH + vjParentTopV + vjOneLineOnly }					else						{ _proto: btn, viewBounds: RelBounds(spacing, 0, width, height), viewJustify: vjCenterH + vjCenterV + vjSiblingRightH + vjSiblingTopV + vjOneLineOnly };					numOfButtons := numOfButtons + 1					end				end;		//	local numOfLeftButtons := numOfButtons;			if menuRightButtons then				begin				SetLength(viewChildren, numOfButtons + Length(menuRightButtons));				foreach index, btn in menuRightButtons do					begin					width := :CalcWidth(btn);					totalBtnWidth := totalBtnWidth + width + 8;					viewChildren[numOfButtons] := if index = 0 then						begin						local btnRight := firstRight;						if not btnRight then							btnRight := -5;						{ _proto: btn, viewBounds: RelBounds(btnRight-width, kStdButtonTop, width, height), viewJustify: vjCenterH + vjCenterV + vjParentRightH + vjParentTopV + vjOneLineOnly }						end					else						{ _proto: btn, viewBounds: RelBounds(-spacing-width, 0, width, height), viewJustify: vjCenterH + vjCenterV + vjSiblingLeftH + vjSiblingTopV + vjOneLineOnly };					numOfButtons := numOfButtons + 1;					end				end			end,		CalcWidth: func(btn)			begin			if btn.text exists and btn.text then				StrFontWidth(btn.text, btn.viewFont) + outset			else				btn.viewBounds.right - btn.viewBounds.left			end	},/*------------------------------------------------------------------------------	@74			notification alert wavy border animation mask*/	MakeBinaryFromHexpicture),/*------------------------------------------------------------------------------	@75	protoSmartCluster*/	{	_proto: protoRadioCluster,		viewFormat: vfFillWhite,		viewFlags: vVisible + vReadOnly + vClipping,		childrenType: 'radioButton,		clusterValue: nil,		itemTitles: [ "knuckleHead" ],		itemViewBounds: SetBounds(3, 2, 0, 12),		GetLayout: func()			begin			local numRows := (:LocalBox()).bottom div (itemViewBounds.bottom + itemViewBounds.top);			local numCols := ceiling(Length(itemTitles) / numRows);			{ numRows: numRows, numColumns: numCols }			end,		GetTopColumnViewBounds: func(arg1, arg2)			begin			local vwLeft, vwWidth;			if itemViewBounds and itemViewBounds.right <> 0 then				vwWidth := itemViewBounds.right			else				vwWidth := (:LocalBox()).right div arg1.numColumns;			vwLeft := itemViewBounds.left + arg2 div arg1.numRows * vwWidth;			RelBounds(vwLeft, itemViewBounds.top, vwWidth, itemViewBounds.bottom)			end,		viewSetupChildrenScript: func()			begin			if childrenType <> 'radioButton and childrenType <> 'checkBox then				childrenType := 'radioButton;			local local1 := :GetLayout();			local local2 := {_proto: nil, viewBounds: RelBounds(0, itemViewBounds.top, 0, itemViewBounds.bottom), viewJustify: 9728};			local local3 := {_proto: nil, viewJustify: 0};			if childrenType = 'radioButton then				begin				local2._proto := protoRadioButton;				local3._proto := protoRadioButton				end			else if childrenType = 'checkBox then				begin				local2._proto := protoCheckbox;				local3._proto := protoCheckbox				end;			self.viewChildren := foreach local4, local5 in itemTitles collect				if local4 mod local1.numRows = 0 then					{_proto: local3, viewBounds: :GetTopColumnViewBounds(local1, local4), text: local5, buttonValue: local4}				else					{_proto: local2, text: local5, buttonValue: local4}			end,		GetItemText: func(arg1) :ChildViewFrames()[arg1].text,		SetItemText: func(arg1, arg2) SetValue(:ChildViewFrames()[itemText], 'text, Clone(arg2)),		GetItemState: func(arg1) :ChildViewFrames()[arg1].viewValue,		SetItemState: func(arg1, arg2) if childrenType = 'radioButton  then :SetClusterValue(arg1)																							else :ChildViewFrames()[arg1]:SetCheck(arg2),		GetAllStates: func() foreach kid in :ChildViewFrames() collect kid.viewValue,		SetAllStates: func(arg1)			begin			if childrenType = 'checkBox then				begin				local kids := :ChildViewFrames();				foreach index, value in arg1 do					kids[index]:SetCheck(value)				end			end,	},/*------------------------------------------------------------------------------	@76	ROM_drawerClose*/	{	sndFrameType: 'codec,		codecName: "TIMACodec",		dataType: 16,		bufferSize: 10240,		bufferCount: 4,		compressionType: 6,		compressionRatio: 1.88235294117647,		samplingRate: MakeBinaryFromHex("2A300000", 'fixed),		samples: MakeBinaryFromHexsamples)	},/*------------------------------------------------------------------------------	@77	ROM_drawerOpen*/	{	sndFrameType: 'codec,		codecName: "TIMACodec",		dataType: 16,		bufferSize: 10240,		bufferCount: 4,		compressionType: 6,		compressionRatio: 1.88235294117647,		samplingRate: MakeBinaryFromHex("2A300000", 'fixed),		samples: MakeBinaryFromHexsamples)	},/*------------------------------------------------------------------------------	@78*/	func()	begin	local local3, local4, local5;	local height := self.viewBounds.bottom - self.viewBounds.top;	local width := self.viewBounds.right - self.viewBounds.left;	inherited:?viewDrawScript();	local lines := [];	if BAnd(look, 256) <> 0 then		AddArraySlot(lines, MakeLine(-1, -edgeWidth - 1, width + 1, -edgeWidth - 1));	if BAnd(look, 512) <> 0 then		AddArraySlot(lines, MakeLine(-edgeWidth - 1, -1, -edgeWidth - 1, height + 1));	if BAnd(look, 1024) <> 0 then		AddArraySlot(lines, MakeLine(-1, height + 1, width + 1, height + 1));	if BAnd(look, 2048) <> 0 then		AddArraySlot(lines, MakeLine(width + 1, -1, width + 1, height + 1));	if Length(lines) > 0 then		begin		local pnSize := [self.drawPenSizeX, self.drawPenSizeY];		local pnPat := 5;		if self.drawPenPat then			pnPat := self.drawPenPat;		if not pnSize[0] then pnSize[0] := 1;		if not pnSize[1] then pnSize[1] := 1;		:DrawShape(lines, { pensize: pnSize, penPattern: pnPat })		end	end,/*------------------------------------------------------------------------------	@79	ROM_errorTable*/	[		-8100,	"A blank note could not be created.",		-8101,	"The item could not be moved.",		-8102,	"The changes could not be saved.",		-8103,	"Sorry, a problem has occurred.",		-8104,	"There is a problem with the card.",		-8105,	"The note could not be changed.",		-8003,	"There is nothing to undo.",		-8004,	"This routing slip is already open.",		-8005,	"Tap on the close box to hang up the modem after you have picked up the handset.",		-8006,	"There is nothing to print.",		-8008,	"A length in the styles slot is too short and has been extended.",		-8009,	"Could not display text.  A length in the read-only styles slot is too short.",		-8010,	"A communication card has been inserted.",		-8014,	"A new stationery form wasn't installed because it is a duplicate.",		-8301,	"Service is not available.",		-8302,	"No routing slip in Transport.",		-8303,	"Could not convert data.",		-8304,	"No formats were found for this item.",		-8305,	"This item uses data that has been removed.",		-8306,	"The format for this item is missing.",		-8501,	"Unable to open view.",		-8502,	"View missing viewClass.",		-8503,	"Unknown view Stationery.",		-8504,	"View missing viewflags.",		-8505,	"View missing viewBounds.",		-10078,	"Communications port is busy.",		-10039,	"Stopped.",		-16003,	"Communications resource is busy.",		-16009,	"A communications problem occurred.  Connection may have been dropped.",		-16013,	"A communications problem occurred.  Connection may have been dropped.",		-16014,	"A communications problem occurred.",		-18003,	"Bad connection.",		-12705,	"Printer busy.",		-38001,	"No response.",		-38002,	"Stopped.",		-38006,	"Bad connection.",		-38008,	"Beaming error.",		-38501,	"No response.",		-38504,	"Stopped.",		-38506,	"Bad connection.",		-38505,	"Beaming error.",		-50001,	"Sharp OZ/IQ communication failed.  Please try again.",		-50002,	"Application not found on Sharp OZ/IQ.  Please select another application.",		-50003,	"Sharp OZ/IQ not found.  Make sure the unit is connected and in PC-Link mode.",		-50004,	"No card installed in Sharp OZ/IQ.",		-50005,	"Import of Sharp OZ/IQ data stopped.",		-44006,	"Image too complex for printer.",		-44000,	"Printer problem.",		-44001,	"Newton is unable to print.",		-44002,	"No printer is connected.",		-44003,	"Printer busy.",		-44004,	"Stopped.",		-44005,	"Lost contact with the printer.",		-44100,	"Insert the next sheet of paper.",		-44101,	"Dial the phone number now.",		-44102,	"There is no paper tray.",		-44103,	"The wrong paper tray is attached.",		-44104,	"The printer has no paper.",		-44105,	"The printer has no ink.",		-44106,	"The printer is jammed.",		-44107,	"The printer door is open.",		-44108,	"The printer is off-line.",		-20001,	"Connect failed.",		-20002,	"Connect failed.",		-20003,	"Connection failed.",		-20004,	"Call aborted by disconnect.",		-20005,	"Bad connection.",		-20006,	"Bad connection.",		-20007,	"Bad connection.",		-20008,	"Already connected.",		-20009,	"Bad connection.",		-20010,	"Connect failed.",		-24000,	"No modem is connected or your modem isn't responding properly.",		-24003,	"The phone number is busy.",		-24004,	"There is no answer.",		-24002,	"There is no answer.",		-24001,	"There is no dial tone.",		-24007,	"Your modem isn't responding properly.",		-24005,	"Your modem isn't responding properly.",		-16009,	"The phone connection was cut off.",		-16021,	"No phone number was provided.",		-16013,	"Stopped.",		-16005,	"Stopped.",		-22001,	"The remote fax machine has dropped the connection.",		-22002,	"Fax machine is not compatible.",		-22003,	"Error occurred during transmission.",		-22006,	"Error occurred during transmission.",		-22007,	"Error occurred during transmission.",		-22005,	"The fax machine had a problem sending some pages.",		-42002,	"Lost connection to host.",		-42003,	"Lost connection to host.",		-42004,	"The host is not responding.",		-42005,	"There is a problem reading from the host.",		-42006,	"Failed to connect to local access number.",		-10511,	"This memory card could not be formatted.",		-10512,	"This memory card could not be formatted. (This memory card is write protected.)",		-10618,	"The battery on this memory card must be replaced.",		-10501,	"Newton cannot recognize this type of card.",		-10605,	"This memory card is write protected.",		-48020,	"This memory card cannot be changed.",		-10617,	"The internal memory or storage card is full.",		-48001,	"This is not a data storage card.",		-48002,	"This card was formatted with an older version of the system and cannot be used.",		-48003,	"This card was formatted with a newer version of the system and cannot be used.",		-48004,	"This card has been corrupted and cannot be used.",		-8001,	"The battery on the inserted card must be replaced.  Change the battery while the card information box is displayed.  Your data may be lost.",		-8002,	"The battery on the inserted card is running low.  For cards that must remain powered, replace it while the card information box is displayed.",		-10402,	"The same version of this application is already installed.",		-10409,	"A newer version of this application is already installed.",		-10410,	"An older version of this application is already installed.",		-10069,	"The system restarted because power was interrupted.",		-10070,	"The system restarted because the battery was dead.",		-10072,	"The system restarted because you removed a PCMCIA card while it was being used.",		-10075,	"Sorry, a system error caused the system to restart.",		-10076,	"Sorry, a system failure occurred.  Your data could not be recovered.",		-10077,	"New system software has been installed.",		-10080,	"This unit requires immediate repair. Factory calibration has been lost. It will not charge batteries until this problem is corrected.",		-10084,	"The internal store was erased because a different ROM has been installed.",		-10081,	"Your Newton hardware is obsolete.  Please do not file any hardware or power related bugs without first regressing them on DVT or later hardware.",		-10082,	"The system restarted because the reset button was pressed.",		-10083,	"The system restarted because all power was removed.",		-10085,	"The system restarted because the batteries were changed.",		-8011,	"The note has too many items.  Start a new note by drawing a horizontal line across the Notepad or tap the New button.",		-8012,	"The note is too big.  Start a new note by drawing a horizontal line across the Notepad or tap the New button.",		-8013,	"This note is too long.  Start a new note by drawing a horizontal line across the Notepad or tap the New button.",		-10021,	"A communications problem has occurred.",		-36003,	"A communications problem has occurred.",		-36006,	"A communications problem has occurred.  Connection may have been dropped.",		-36030,	"A communications problem has occurred.",		-7000,	"Newton does not have enough memory available to do what you asked.",		-108,		"Newton does not have enough memory available to do what you asked.",		-10007,	"Newton does not have enough memory available to do what you asked.",		-48216,	"The application does not have enough memory available to do what you asked.",		-10401,	"The package is damaged.",		-10403,	"The package version is not compatible with this Newton.",		-10404,	"The package is damaged.",		-10405,	"The package is damaged.",		-10408,	"The package could not be found.",		-10502,	"The PC card is not ready.",		0,			nil	],/*------------------------------------------------------------------------------	@80			System display font.*/	{  name: "System",		fontName: "HelveticaNeue-Bold",	// not original, obviously		encoding: 0, 		macFontID: 0, 		screenSym: 'espyFont, 		psName: 'helvetica, 		psScale: 65536, 		badFontMap: 1, 		plainData: nil, 		boldData: nil, 		italicData: nil, 		boldItalicData: nil, 		userSizes: [9, 10, 12, 18], 		usable: nil, 		tsID: 0	},/*------------------------------------------------------------------------------	@81*/	{	name: "Fax",		driverName: "TFaxDriver",		imagingName: "CDotPrinter",		type: 'serialSym,		printerPageBounds:		{	eightByEleven: { bottom: 841, right: 594 },			a4:				{ bottom: 841, right: 594 }		},		printableOrigin:  { top: 0, left: 0 }	},/*------------------------------------------------------------------------------	@82*/	{		viewClass: clView,		viewFlags: vVisible + vReadOnly,		viewFormat: 0,		viewBounds: SetBounds(20, 0, -20, 20),		viewJustify: vjParentFullH + vjParentTopV,		viewChildren: [ viewChildren: 			{	_proto: protoStaticText,				viewFlags: vVisible + vReadOnly,				viewBounds: SetBounds(0, 0, 0, 20),				viewJustify: vjCenterH + vjParentFullH,				viewFont: userFont9,				viewSetupFormScript: func()					begin					self.text := fromFrame.name;					local persona := GetUserConfig('currentPersona);					if IsEntryAlias(persona) then						persona := ResolveEntryAlias(persona);					if not persona then						return;					local faxNumber := GetRoot().cardfile:bcPhoneNumber(persona, 'faxPhone);					if faxNumber and StrFilled(faxNumber[0]) then						begin						self.text := self.text && MakeDisplayPhone(faxNumber[0]);						faxNumber := GetRoot().cardfile:bcPhoneNumber(persona, 'workPhone);						if faxNumber and StrFilled(faxNumber[0]) then							self.text := self.text && MakeDisplayPhone(faxNumber[0]);						return						end;					faxNumber := GetRoot().cardfile:bcPhoneNumber(persona, 'homefaxPhone);					if faxNumber and StrFilled(faxNumber[0]) then						begin						self.text := self.text && MakeDisplayPhone(faxNumber[0]);						faxNumber := GetRoot().cardfile:bcPhoneNumber(persona, 'homePhone);						if faxNumber and StrFilled(faxNumber[0]) then							self.text := self.text && MakeDisplayPhone(faxNumber[0])						end					end			},			{  _proto: protoStaticText,				viewBounds: SetBounds(0, 0, 0, 20),				viewJustify: vjRightH + vjParentFullH,				viewFont: userFont9,				viewSetupFormScript: func()					begin					_pageTurner := self;					:TurnPage()					end,				TurnPage: func()					begin					self.text := ParamStr("Page ^0 of ^1", [fields.pageNumber, fields.pageCount])					end			},			{	_proto: protoStaticText,				viewBounds: SetBounds(0, 0, 0, 20),				viewJustify: vjParentFullH + vjParentTopV,				viewFont: userFont9,				viewSetupFormScript: func()					begin					self.text := DateNTime(Time())					end			}		]	},/*------------------------------------------------------------------------------	@83			Fax routing slip.*/	{},/*------------------------------------------------------------------------------	@84			Filing slip.*/	{},/*------------------------------------------------------------------------------	@85	ROM_flip*/	{	sndFrameType: 'codec,		codecName: "TIMACodec",		dataType: 16,		bufferSize: 10240,		bufferCount: 4,		compressionType: 6,		compressionRatio: 1.88235294117647,		samplingRate: MakeBinaryFromHex("2A300000", 'fixed),		samples: MakeBinaryFromHexsamples)	},/*------------------------------------------------------------------------------	@86			Alarm notification roll item.*/	{	_proto: @127,		viewChildren: [ viewChildren: 			{				_proto: protoStaticText,				viewFlags: vVisible + vReadOnly + vClickable,				viewJustify: vjParentFullH + vjParentTopV + vjOneLineOnly,				viewBounds: SetBounds(0, 0, 0, 14),				viewFont: ROM_fontSystem10Bold,				viewSetupFormScript: func()					begin					self.text := kInfoDotChar & overview					end,				viewClickScript: func(arg1)					begin					timeStampField:Open();					true					end			},			kTimeStampField,			{				_proto: protoStaticText,				viewJustify: vjParentFullH + vjParentFullV,				viewSetupFormScript: func()					begin					self.text := nfText;					self.viewBounds := SetBounds(0, 14, 0, 0)					end			},			{				_proto: protoPopupButton,				viewJustify: vjCenterH + vjCenterV + vjParentLeftH + vjParentBottomV + vjOneLineOnly,				text: "  Snooze",				viewBounds: SetBounds(3, -18, 48, -5),				viewSetupFormScript: func()					begin					base._defaultButton := self					end,				viewQuitScript: func()					begin					RemoveSlot(base, '_defaultButton)					end,				buttonClickScript: func()					begin					popup := foreach paws in snoozeARoos collect						if paws = 60 then							"1 hour"						else if paws = 1440 then							"1 day"						else if paws < 60 then							ParamStr("^0 minutes", [paws])						else if paws < 1440 then							ParamStr("^0 hours", [paws div 60])						else							ParamStr("^0 days", [paws div 1440]);					inherited:buttonClickScript()					end,				pickActionScript: func(itemSelected)					begin					notification:YouSnoozeYouLose(snoozeARoos[itemSelected]);					inherited:?pickActionScript(itemSelected)					end			}		]	},/*------------------------------------------------------------------------------	@87	ROM_fontSystem10*/	{ family: 'espy, size: 10, face: 0 },/*------------------------------------------------------------------------------	@88	ROM_fontSystem10Bold*/	{ family: 'espy, size: 10, face: 1 },/*------------------------------------------------------------------------------	@89	ROM_fontSystem10Underline*/	{ family: 'espy, size: 10, face: 4 },/*------------------------------------------------------------------------------	@90	ROM_fontSystem12*/	{ family: 'espy, size: 12, face: 0 },/*------------------------------------------------------------------------------	@91	ROM_fontSystem12Bold*/	{ family: 'espy, size: 12, face: 1 },/*------------------------------------------------------------------------------	@92	ROM_fontSystem12Underline*/	{ family: 'espy, size: 12, face: 4 },/*------------------------------------------------------------------------------	@93	ROM_fontSystem14*/	{ family: 'espy, size: 14, face: 0 },/*------------------------------------------------------------------------------	@94	ROM_fontSystem14Bold*/	{ family: 'espy, size: 14, face: 1 },/*------------------------------------------------------------------------------	@95	ROM_fontSystem14Underline*/	{ family: 'espy, size: 14, face: 4 },/*------------------------------------------------------------------------------	@96	ROM_fontSystem18*/	{ family: 'espy, size: 18, face: 0 },/*------------------------------------------------------------------------------	@97	ROM_fontSystem18Bold*/	{ family: 'espy, size: 18, face: 1 },/*------------------------------------------------------------------------------	@98	ROM_fontSystem18Underline*/	{ family: 'espy, size: 18, face: 4 },/*------------------------------------------------------------------------------	@99	ROM_fontSystem9*/	{ family: 'espy, size: 9, face: 0 },/*------------------------------------------------------------------------------	@100	ROM_fontSystem9Bold*/	{ family: 'espy, size: 9, face: 1 },/*------------------------------------------------------------------------------	@101	ROM_fontSystem9Underline*/	{ family: 'espy, size: 9, face: 4 }];