DefineGlobalConstant('kFileIconFunc,	func(arg1)	begin	if IsReadOnly(fentry._tagList) then		fentry._tagList := Clone(fentry._tagList);	if fentry.labels then		SetRemove(fentry._tagList, fentry.labels);	if arg1 then		begin		SetAdd(fentry._tagList, arg1, true);		fentry.labels := arg1		end	else		fentry.labels := nil;	EntryChange(fentry);	true	end);DefineGlobalConstant('kPreflightIconFunc,	func(action, arg2)	begin	if action = 'filing or action = 'delete or action = 'freeze then		begin		if EntryStore(fentry):IsReadOnly() then			"locked"		else			'OK		end	else if action = 'route then		'OK	else if action = 'move then		begin		if :CopyProtected() then			"copy protected"		else if EntryStore(fentry):IsReadOnly() then			"locked"		else			'OK		end	else if action = 'send then		begin		if :CopyProtected() then			"copy protected"		else			'OK		end	else		"the wrong kind"	end);DefineGlobalConstant('kTapHelpBookFunc,	func()	begin	if :LookupSoupPackageAndActivate() then		begin		local app := GetRoot().tinyTim;		if app.viewCObject and StrEqual(app.isbn, fentry.isbn) then			begin			app:Close();			return			end;		AddDeferredSend(app, 'OpenHelpBook, [fentry.isbn]);		if fentry.closeControl	then fentry.closeControl = 'alwaysClose										else GetUserConfig('extraAlwaysClose)		end	end);DefineGlobalConstant('kSoupLocationFunc,	func()	begin	local str;	local allStores := GetValidStores();	foreach store in allStores do		foreach name in fentry.soupNames do			if store:HasSoup(name) then				begin				str := (if str then str & ", ") & store:GetName();				break				end;	if str then str else ""	end);DefineGlobalConstant('kDeleteSoupFunc,	func()	begin	local filter := GetRoot().extrasDrawer.storesFilter;	local stores := if filter then [filter] else GetStores();	foreach store in stores do		if not store:IsReadOnly() then			begin			local app := if fentry.ownerApp then GetRoot().(fentry.ownerApp);			if not app then				app := GetRoot().extrasDrawer;			foreach name in fentry.soupNames do				begin				local soup := store:GetSoup(name);				if soup then					try						soup:RemoveFromStoreXmit(app.appSymbol)					onexception |evt.ex| do						:Notify(kNotifyAlert, "Packages", ParamStr("Unable to delete the data from ^0",																				 [store:GetName()]))				end			end	end);DefineGlobalConstant('kPreflightSoupFunc,	func(action, arg2)	begin	if not fentry.emptyInternal	and action = 'route or action = 'delete then		'OK	else		"the wrong kind"	end);DefineGlobalConstant('kTapSoupFunc,	func()	begin	local souper := GetRoot().soupervisor;	if souper then		begin		souper:OpenTo(fentry);		if fentry.closeControl	then fentry.closeControl = 'alwaysClose										else GetUserConfig('extraAlwaysClose)		end	end);DefineGlobalConstant('kTapScriptFunc,	func()	begin	if fentry.TapAction and :LookupSoupPackageAndActivate() then		fentry:TapAction()	end);DefineGlobalConstant('kFormEntry,{	iconEntry: {		class: 'FormEntry,		text: "",		icon: 2,		sequence: nil,		labels: nil,		_tagList: '[ _icon ],		packageName: nil,		app: nil	},	New: func() Clone(iconEntry) ,	Name: func() ParamStr("Ò^0Ó", [fentry.text]),	Store: func() if IsSoupEntry(fentry) then EntryStore(fentry),	Where: func()		begin		local theStore := :Store();		if theStore then theStore:GetName() else ""		end,	Size: func() EntrySize(:LookupSoupPackage()) div 1024 & "K",	CopyProtected: func() GetPkgRefInfo((:LookupSoupPackage()).pkgRef).copyProtection,	File: kFileIconFunc,	Move: func(arg1) SafeMovePackageQT(:LookupSoupPackage(), arg1),	Delete: func()		begin		local pkg := :LookupSoupPackage();		if pkg then			SafeRemovePackageQT(pkg)		end,	LookupSoupPackage: func()		begin		local theStore := :Store();		local theName := fentry.packageName;		if theStore and theName then			GetPackageEntry(theName, theStore)		end,	LookupSoupPackageAndActivate: func()		begin		local pkg := :LookupSoupPackage();		if not pkg then			'noSoupPackage		else if SetContains(activePackageList, pkg.pkgRef) then			'alreadyActive		else if SafeActivatePackage(pkg.pkgRef, pkg.packageName, EntryStore(pkg)) then			'justActivated		end,	Preflight: func(action, arg2)		begin		if action = 'backdrop then			begin			if Length(arg2) = 1 then				begin				local app := GetRoot().(fentry.app);				if app.noBackdrop then					"the wrong kind"				else if displayParams.appAreaHeight < 320 and not app.ReOrientToScreen then					"not designed for this orientation"				else if EntryStore(fentry) <> GetStores()[0] then					"not stored internally"				else					'OK				end			end		else if action = 'filing or action = 'delete or action = 'freeze then			begin			if EntryStore(fentry):IsReadOnly() then				"locked"			else				'OK			end		else if action = 'move then			begin			if :CopyProtected() then				"copy protected"			else if EntryStore(fentry):IsReadOnly() then				"locked"			else				'OK			end		else if action = 'send then			begin			if :CopyProtected() then				"copy protected"			else				'OK			end		else			'OK		end,	TapAction: func()		begin		if :LookupSoupPackageAndActivate() then			begin			if fentry:?TapAction() then				(if fentry.closeControl	then fentry.closeControl = 'alwaysClose												else GetUserConfig('extraAlwaysClose))			else				:_Open(GetRoot().(fentry.app))			end		end,	_Open: func(view)		begin		if view then			begin			local closeCtrl := if not(view.viewCObject and Visible(view)) then				(if fentry.closeControl	then fentry.closeControl = 'alwaysClose												else GetUserConfig('extraAlwaysClose));			if closeCtrl then				AddDeferredSend(view, 'ButtonToggle, nil)			else				view:ButtonToggle();			closeCtrl			end		end});DefineGlobalConstant('kROMFormEntry,{	_proto: kFormEntry,	iconEntry: {		class: 'ROMFormEntry,		text: "",		icon: 2,		sequence: nil,		labels: nil,		_tagList: '[ _icon, _noBackup ],		app: nil	},	New: func() Clone(iconEntry),	Store: func() GetStores()[0],	Where: func() "Built-in",	Size: func() "--",	CopyProtected: func() nil,	File: func(arg1)		begin		if IsReadOnly(fentry._tagList) then			fentry._tagList := Clone(fentry._tagList);		if fentry.labels then			SetRemove(fentry._tagList, fentry.labels);		if arg1 then			begin			SetAdd(fentry._tagList, arg1, true);			fentry.labels := arg1			end		else			fentry.labels := nil;		EntryChange(fentry);		true		end,	Move: func() nil,	Delete: func() EntryRemoveFromSoup(fentry),	Preflight: func(action, arg2)		begin		if action = 'filing or action = 'route then			'OK		else if action = 'backdrop and Length(arg2) = 1 then			begin			local app := GetRoot().(fentry.app);			if app.noBackdrop then				"the wrong kind"			else if displayParams.appAreaHeight < 320 and not app.ReOrientToScreen then				"not designed for this orientation"			else				'OK			end		else			"built-in"		end});DefineGlobalConstant('kAnonEntry,{	_proto: kFormEntry,	iconEntry:	{		class: '|????Entry|,		text: "",		icon: 6,		sequence: nil,		labels: '_extensions,		_tagList: '[ _icon, _extensions ],		packageName: nil	},	Preflight: kPreflightIconFunc,	TapAction: func()		begin		local result := :LookupSoupPackageAndActivate();		if result then			begin			if fentry.TapAction then				fentry:TapAction()			else if result <> 'justActivated then				begin				GetRoot():Notify(kNotifyAlert, "Packages", "Tapping this does nothing.");				nil				end			end		end});DefineGlobalConstant('kAutoEntry,{	_proto: kFormEntry,	iconEntry:	{		class: 'AutoEntry,		text: "",		icon: 3,		sequence: nil,		labels: '_extensions,		_tagList: '[ _icon, _extensions ],		packageName: nil	}});/*----------------------------------------------------------------------	kPreSetupUserConfigFunc----------------------------------------------------------------------*/DefineGlobalConstant('kPreSetupUserConfigFunc, func()	begin	local cleanUserConfig := {};	local userConfig := userConfiguration;	local namesSoup := GetStores()[0]:GetSoup(ROM_cardfileSoupName);	local querySpec := Clone(@46);	querySpec.tagspec := { equal: '_ownerNames };	local namesCursor := namesSoup:Query(querySpec);	local myPersona := userConfig.currentPersona;	cleanUserConfig.currentPersona := nil;	cleanUserConfig.personae := [];	local myEmporium := userConfig.currentEmporium;	cleanUserConfig.currentEmporium := nil;	cleanUserConfig.emporia := [];	local namesEntry := namesCursor:entry();	while namesEntry do		begin		if namesEntry.class = 'owner then			AddArraySlot(cleanUserConfig.personae, MakeEntryAlias(namesEntry))		else			AddArraySlot(cleanUserConfig.emporia, MakeEntryAlias(namesEntry));		namesEntry := namesCursor:Next()		end;	SetUserConfigEnMasse('personae, cleanUserConfig);	if Length(cleanUserConfig.personae) = 0	and StrFilled(userConfig.phone & userConfig.faxPhone & userConfig.homePhone & userConfig.country & userConfig.mailAccount & userConfig.name & userConfig.address & userConfig.cityZip & userConfig.company & userConfig.mailPassword) then		begin		local cleanPhones := [];		if userConfig.phone then			AddArraySlot(cleanPhones, SetClass(Clone(userConfig.phone), 'workPhone));		if userConfig.faxPhone then			AddArraySlot(cleanPhones, SetClass(Clone(userConfig.faxPhone), 'faxPhone));		if userConfig.homePhone then			AddArraySlot(cleanPhones, SetClass(Clone(userConfig.homePhone), 'homePhone));		local cleanCountry := if userConfig.country then SetCountryClass(Clone(userConfig.country));		local cleanEmail := if StrFilled(userConfig.mailAccount) and not IsInstance(userConfig.mailAccount, '|string.email|) then SetClass(Clone(userConfig.mailAccount), '|string.email|);		local myCard := GetRoot().cardfile.conversion:Convert( { name: {first: Clone(userConfig.name)},																					address: Clone(userConfig.address),																					city: Clone(userConfig.cityZip),																					company: Clone(userConfig.company),																					country: cleanCountry,																					email: cleanEmail,																					emailPassword: Clone(userConfig.mailPassword),																					phones: cleanPhones }, 'oneO, 'twoO, nil);		GetRoot().cardfile:AddCard('owner, myCard)		end;	if Length(cleanUserConfig.emporia) = 0	and (userConfig.mailNetwork or StrFilled(userConfig.currentAreaCode & userConfig.country & userConfig.dialingPrefix & userConfig.mailPhone)) then		local myHome := GetRoot().cardfile:AddCard('worksite, {  place: Clone("Home"),																					areaCode: Clone(userConfig.currentAreaCode),																					countrySymbol: userConfig.currentCountry,																					country: if userConfig.currentCountry then GetCountryEntry(userConfig.currentCountry)[0].name,																					dialingPrefix: Clone(userConfig.dialingPrefix),																					printer: Clone(userConfig.currentPrinter),																					mailAccess: [{ mailPhone: Clone(userConfig.mailPhone),																										mailNetwork: userConfig.mailNetwork }] });	if myHome then		begin		local setupPrefs := GetAppPrefs('setup, {});		setupPrefs.homeWorksite := MakeEntryAlias(myHome);		EntryChange(setupPrefs)		end;	if myPersona and cleanUserConfig.personae and Length(cleanUserConfig.personae) > 0 then		begin		namesEntry := ResolveEntryAlias(myPersona);		if namesEntry and IsSubclass(namesEntry.class, 'owner) then			SetUserConfig('currentPersona, myPersona)		else			SetUserConfig('currentPersona, cleanUserConfig.personae[0]);		UseCurrentPersona()	end;	if myEmporium and cleanUserConfig.emporia and Length(cleanUserConfig.emporia) > 0 then		begin		namesEntry := ResolveEntryAlias(myEmporium);		if namesEntry and IsSubclass(namesEntry.class, 'worksite) then			SetUserConfig('currentEmporium, myEmporium)		else			SetUserConfig('currentEmporium, cleanUserConfig.emporia[0]);		UseCurrentEmporium()		end	end);/*------------------------------------------------------------------------------	Magic pointers 500 - 599------------------------------------------------------------------------------*/mp5xx := [/*------------------------------------------------------------------------------	@500*/	{},/*------------------------------------------------------------------------------	@501*/	{},/*------------------------------------------------------------------------------	@502*/	{},/*------------------------------------------------------------------------------	@503*/	{},/*------------------------------------------------------------------------------	@504	protoDisplayClock*/	{},/*------------------------------------------------------------------------------	@505*/	{},/*------------------------------------------------------------------------------	@506*/	{},/*------------------------------------------------------------------------------	@507	newtEntryLockedIcon*/	{},/*------------------------------------------------------------------------------	@508*/	{},/*------------------------------------------------------------------------------	@509*/	{},/*------------------------------------------------------------------------------	@510*/	{},/*------------------------------------------------------------------------------	@511			Space in which icons live - extras drawer or button bar.*/	GetLayout("iconSpace"),/*------------------------------------------------------------------------------	@512	protoLocationPicker*/	{},/*------------------------------------------------------------------------------	@513	ROM_AustralianStateName*/	"AustralianStates",/*------------------------------------------------------------------------------	@514	protoDigitalTimePopup*/	{},/*------------------------------------------------------------------------------	@515	ROM_faxRoutingIcon*/	{},/*------------------------------------------------------------------------------	@516*/	{},/*------------------------------------------------------------------------------	@517*/	{},/*------------------------------------------------------------------------------	@518*/	{},/*------------------------------------------------------------------------------	@519*/	{},/*------------------------------------------------------------------------------	@520*/	{},/*------------------------------------------------------------------------------	@521*/	{},/*------------------------------------------------------------------------------	@522*/	{},/*------------------------------------------------------------------------------	@523*/	{},/*------------------------------------------------------------------------------	@524*/	{},/*------------------------------------------------------------------------------	@525*/	{},/*------------------------------------------------------------------------------	@526*/	{},/*------------------------------------------------------------------------------	@527*/	{},/*------------------------------------------------------------------------------	@528*/	{},/*------------------------------------------------------------------------------	@529*/	{},/*------------------------------------------------------------------------------	@530*/	{},/*------------------------------------------------------------------------------	@531*/	{},/*------------------------------------------------------------------------------	@532*/	{},/*------------------------------------------------------------------------------	@533  SYS_fonts			All built-in display fonts, indexed by compact font face number.*/	[		@80,  // tsSystem		@131, // tsFancy		@104, // tsSimple		@571  // tsHWFont	],/*------------------------------------------------------------------------------	@534*/	{},/*------------------------------------------------------------------------------	@535*/	{},/*------------------------------------------------------------------------------	@536  protoAliasCursor*/	{  _proto: @505,		targetpath: nil,		New: func(arg1, arg2)		begin		local cursor;		if IsFrame(arg2) then			begin			cursor := inherited:New(arg1, arg2._cursor);			cursor.targetpath := arg2.targetpath			end		else			cursor := inherited:New(arg1, arg2);		cursor		end,		Goto: func(item)		begin		index := ArrayPos(things, item, 0, IsSameEntry(e, i));		if not index then			index := -1;		:Entry()		end,		Entry: func()		begin		if index >= 0 and index < Length(things) then			begin			local item := things[index];			if ClassOf(item) = 'alias then				item := ResolveEntryAlias(item);			if item then				begin				if targetpath and IsFrame(item) and item.(targetpath) then					item.(targetpath);				else					item				end			else				'deleted			end		end	},/*------------------------------------------------------------------------------	@537*/	{},/*------------------------------------------------------------------------------	@538  In Box soup def*/	{  name: "InBox",		userName: "In Box",		ownerApp: 'iobox,		ownerAppName: "InOut Box",		userDescr: "Received data for InBox",		indexes: @114,		initHook: nil },/*------------------------------------------------------------------------------	@539  Out Box soup def*/	{  name: "OutBox",		userName: "Out Box",		ownerApp: 'iobox,		ownerAppName: "InOut Box",		userDescr: "Outbox data",		indexes: @114,		initHook: nil },/*------------------------------------------------------------------------------	@540  			This really is an empty frame.*/	{ },/*------------------------------------------------------------------------------	@541  			Card events.*/	{	_proto:	{		StoreMounted: func(arg1)			begin			local local1, local2, local3, local4, local5, local6, local8, local9, local10;			local1 := arg1:GetName();			local2 := arg1:CardSlot();			local3 := arg1:IsReadOnly();			local4 := arg1:CheckUnion();			if local4 then				(if local3 then				ModalCardAlert('incompatibleSoups, local2, local1);			else			begin				local5 := ModalCardAlert('|ConvertIncompatibleSoups?|, local2, local1);				if local5 = 'cardYanked then					return;				else (if local5 then					foreach local6 in local4 do					arg1:ConvertSoupSortTables(local6));			end);			local8 := arg1:GetSignature() = GetUserConfig('defaultStoreSig);			if not local3 then				(if arg1:GetInfo('defaultStore) then				(if not local8 then			begin				local9 := ModalCardAlert('|MakeDefaultStore?|, local2, local1);				if local9 = 'cardYanked then					return;				else (if local9 then				begin					SetDefaultStore(arg1);					local8 := true;				end;				else					arg1:SetInfo('defaultStore, nil));			end);			else (if local8 then				arg1:SetInfo('defaultStore, true)));			if ActivateStorePackages(arg1) = 'cardYanked then				return;			if not GetRoot().sleepScreen.viewCObject then				begin				local10 := DESCreatePasswordKey(Downcase(Clone(local1)));				if BinEqual(MakeBinaryFromHex("6E5DB133590FAB4F", 'deskey), local10) then					BuildContext(@830):Open();				else (if BinEqual(MakeBinaryFromHex("A975975BB33737CB", 'deskey), local10) then					BuildContext(@831):Open();				else					OpenStoreSlip(arg1));				end;			if if local3 then				local8 then				CardAlert('LockedDefaultStore, local2, local1);			CheckCardBattery();			CallFrameBasedRegistryFns(StoreChangeRegistry, [arg1, 'StoreEnters, nil]);			XmitStoreSoupsEntering(arg1);			true			end,		StoreUnMounted: func(arg1)			begin			local local1;			local1 := GetKeyView();			if if local1 then				not IsValid(local1._proto) then				SetKeyView(nil, 0);			CloseStoreSlip(arg1);			DeActivateStorePackages(arg1);			AddDeferredCall(functions.CallFrameBasedRegistryFns, [StoreChangeRegistry, [arg1, 'storeLeaves, arg1:GetName()]]);			XmitStoreSoupsLeaving(arg1);			true			end,		CheckPassword: func(arg1)			begin			if GlobalFnExists('StorePasswordPrompt) then				StorePasswordPrompt(arg1);			else				begin				CardAlert('ProtectedStore, arg1, nil);				nil				end			end,		BadPassword: func(arg1)			begin			CardAlert('BadStorePassword, arg1, nil)			end,		CardRemoved: func(arg1)			begin			AddDeferredCall(functions.CallFrameBasedRegistryFns, [WeirdCardEventRegistry, [arg1, 'CardRemoved]]);			AbortCardAlerts(arg1, 'cardYanked)			end,		CardReInserted: func(arg1)			begin			ModalCardAlert('CardReInserted, arg1, nil)			end,		WeirdCardInserted: func(arg1, arg2)			begin			local local1, local2, local3, local5;			local1 := nil;			local2 := nil;			foreach local3 in arg2 do				if @271.(local3) then				(local2 := true);			else (if local3 = 'comm then				(local1 := true);			else			begin				local5 := GetRoot().(cardType);				if local5 then				begin					local5:Open();					local2 := true;				end;			end);			if not local2 then				(if local1 then				(if not AutoDock('Connect, true) then				CardAlert('CommCardInserted, arg1, nil));			else				CardAlert('UnrecognizedCardInserted, arg1, nil));			AddDeferredCall(functions.CallFrameBasedRegistryFns, [WeirdCardEventRegistry, [arg1, 'cardInserted]])			end,		|Convert1.XCard?|: func(arg1)			begin			local local1;			local1 := ModalCardAlert('|Convert1.XCard?|, arg1, nil);			if local1 = true then				ModalCardAlert('|Convert1.XCardReally?|, arg1, nil);			else				local1			end,		|FormatWithExtremePrejudice?|: func(arg1)			begin			local local1;			if GetRoot().preferenceRoll.viewCObject then			begin				local1 := ModalCardAlert('|FormatWithExtremePrejudice?|, arg1, nil);				HandleCardEvent('|FormatReally?|, [arg1, local1])			end			end,		|Format?|: func(arg1)			begin			local local1;			local1 := ModalCardAlert('|Format?|, arg1, nil);			HandleCardEvent('|FormatReallyNoCancel?|, [arg1, local1])			end,		FormatLockedCard: func(arg1)			begin			ModalCardAlert('FormatLockedCard, arg1, nil)			end,		FormatBadVppCard: func(arg1)			begin			ModalCardAlert('FormatBadVppCard, arg1, nil)			end,		|FormatAfterMountError?|: func(arg1, arg2)			begin			local local1;			local1 := ModalCardAlert('|FormatAfterMountError?|, arg1, arg2);			HandleCardEvent('|FormatReallyNoCancel?|, [arg1, local1])			end,		|FormatReallyNoCancel?|: func(arg1, arg2)			begin			if arg2 = true then				ModalCardAlert('|FormatReallyNoCancel?|, arg1, nil);			else				arg2			end,		|FormatReally?|: func(arg1, arg2)			begin			if arg2 = true then				ModalCardAlert('|FormatReally?|, arg1, nil);			else				arg2			end,		LockedCardMountError: func(arg1, arg2)			begin			if arg2 = -10621 then				CardAlert('RepairLockedCardError, arg1, nil);			else				CardAlert('SmileAfterMountError, arg1, arg2)			end,		MiscCardError: func(arg1, arg2)			begin			CardAlert('MiscCardError, arg1, arg2)			end,		SRAMCardLowBattery: func(arg1)			begin			CardAlert('SRAMCardLowBattery, arg1, nil)			end,		SRAMCardReplaceBattery: func(arg1)			begin			CardAlert('SRAMCardReplaceBattery, arg1, nil)			end,		FlashCardBadVpp: func(arg1)			begin			ModalCardAlert('FlashCardBadVpp, arg1, nil)			end	},	WeirdCardInserted: func(arg1, arg2)		begin		local isMemoryCard, isCommsCard, app;		foreach tag in arg2 do			if @271.(tag) then				isMemoryCard := true			else if tag = 'comm then				isCommsCard := true			else				begin				local app := GetRoot().(tag);				if app then					begin					app:Open();					isMemoryCard := true					end				end;		if not isMemoryCard then			(if isCommsCard then			(if not AutoDock('Connect, true) then			CardAlert('CommCardInserted, arg1, nil));		else			CardAlert('UnrecognizedCardInserted, arg1, nil));		AddDeferredCall(functions.CallFrameBasedRegistryFns, [WeirdCardEventRegistry, [arg1, 'cardInserted]])		end	},/*------------------------------------------------------------------------------	@542			Notification alert proto.*/	{  _proto: @839,		viewFlags: vApplication + vFloating,		viewFormat: vfFillWhite,		viewBounds:	SetBounds(0, 0, 208, 154),		viewJustify: vjParentCenterV + vjParentCenterH,		viewEffect: fxZoomOpenEffect,		textFlags: 0xC400,		icon: @13,		declareSelf: 'base,		ReOrientToScreen: ROM_DefRotateFunc,		gyreOn: nil,	// SHOULD BE true		gyreCount: 0,		gyreReps: 12,		gyreRate: 300,		copyBitsArgs: [ @74, 0, 0, 2 ],		viewSetupFormScript: func()			begin			if GetRoot().sleepScreen.viewCObject			and displayParams.appAreaWidth <> displayParams.scrWidth then				begin				local offset := (displayParams.scrWidth - displayParams.appAreaWidth) div 2;				if displayParams.appAreaGlobalLeft <> 0 then					offset := -offset;				self.viewBounds := OffsetRect(self._proto.viewBounds, offset, 0)				end			end,		viewSetupDoneScript: func()			begin			SetKeyView(self, 0);			if gyreOn then				:GyreStart()			end,		GyreStart: func()			begin			self.gyreCount := 0;			:SetupIdle(gyreRate)			end,		viewIdleScript: func()			begin			if gyreCount < gyreReps then				begin				:DoDrawing('CopyBits, copyBitsArgs);				gyreCount := gyreCount + 1;				gyreRate				end			end,		viewQuitScript: func()			begin			if HasSlot(self, 'viewBounds) then				RemoveSlot(self, 'viewBounds)			end,		viewKeyDownScript: func(char flags)			begin			if (char = kReturnKey or char = kEnterKey)			and (BAnd(flags, 0x02000000) = 0) then				begin				SendKeyMessage(self, '_DoDefaultButton);				true				end			end,		_DoDefaultButton: func(context)			begin			local btn := GetVariable(context, '_defaultButton);			if btn then				PressButton(btn)			end	},/*------------------------------------------------------------------------------	@543  			Alert dialog button configurations.*/	{	okCancel:				[  {	value: true,	text: "OK" },					{	value: nil,		text: "Cancel" } ],	okCancelDefaultOk:				[  {  value: true,	text: "OK",			keyValue: 'default },					{	value: nil,		text: "Cancel",	keyValue: 'close } ],	okCancelDefaultCancel:				[  {	value: true,	text: "OK",			keyValue: nil },					{	value: nil,		text: "Cancel",	keyValue: 'default } ],	yesNo:				[  {	value: true,	text: "Yes" },					{	value: nil,		text: "No" } ],	yesNoDefaultYes:				[  {	value: true,	text: "Yes",		keyValue: 'default },					{	value: nil,		text: "No",			keyValue: 'close } ],	yesNoDefaultNo:				[  {	value: true,	text: "Yes",		keyValue: nil },					{	value: nil,		text: "No",			keyValue: 'default } ]	},/*------------------------------------------------------------------------------	@544			Dialog box.*/	{},/*------------------------------------------------------------------------------	@545  */	[		"at",		"in"	],/*------------------------------------------------------------------------------	@546	initial vars - read-only data (unless generated by a function)*/	{	displayParams:	{		pixelDepth: 4,		orientation: 1,		scrTop: 0,		scrLeft: 0,		scrWidth: 480,		scrHeight: 320,		appAreaGlobalTop: 0,		appAreaGlobalLeft: 0,		appAreaTop: 0,		appAreaLeft: 0,		appAreaWidth: 434,		appAreaHeight: 320,		rootBounds:			SetBounds(0,   0, 320, 480),		appAreaBounds:		SetBounds(0,   0, 320, 434),		buttonBarBounds:	SetBounds(0, 434, 320, 480),		buttonBarPosition: 'right,		buttonBarControlsPosition: 'bottom,		bellyButtonPosition: 'inside,		buttonBarVThickness: 46,		buttonBarHThickness: 46 },	poweringOff: nil,	ioBusy: nil,	currentRouteSlip: nil,	entryForms: nil,	extras:	[		{	app:	'unsupported,			text:	"Unsupported",			icon:	{				bits:	MakeBinaryFromHex("000000000004009B009B00F000BB0110000000000000000000000000000FC000007FF80003F3FF000F83FFE01E03FDE01783F36010E39C60183EE060180780601981006018F10060187100601E0101E00F8107E003E13F8000F9FE00003FF000000FC000000000000000000000000000000000001E00000010010000108BA98C1C513050102121C8105122441E88A1D8",'bits),				bounds:	SetBounds(0, 0, 32, 32) },			viewBounds:	SetBounds(0, 0, 32, 32),			buttonClickScript: func()				begin				GetRoot():Notify(kNotifyAlert, "Newton",														 "This package uses information that is no longer supported. "														 "Contact the software publisher for further information.")				end,			autoClose: nil }	],	cardSlotIcons:	[		{	bounds:		SetBounds(0, 0, 144, 36),			colordata:	{				cbits: MakeBinaryFromHexcbits),				bitdepth: 4 } },		{	bounds:		SetBounds(0, 0, 144, 36),			colordata:	{				cbits: MakeBinaryFromHexcbits),				bitdepth: 4 } } ],	cardSlotLocations:	[		[	"Top PC Card",			"Right PC Card",			"Bottom PC Card",			"Left PC Card" ],		[	"Bottom PC Card",			"Left PC Card",			"Top PC Card",			"Right PC Card" ] ],	modemLocations:	[		{	title: "Default",			id:	 nil	},		{	},		{	title: [	"Top PC Card",						"Right PC Card",						"Bottom PC Card",						"Left PC Card"	],			id:	 "slt1"	},		{	title: [	"Bottom PC Card",						"Left PC Card",						"Top PC Card",						"Right PC Card"	],			id:	 "slt2"	},		{	title: "Any PC Card",			id:	 "slot"	},		{	title: "Serial Port",			id:	 "extr"	},		{	title: "Internal Modem",			id:	 "mdem"	} ],	busySlots: func()		begin		local cardSlots := [];		for index := 1 to GetCardInfo().totalSockets do			AddArraySlot(cardSlots,[]);		cardSlots		end,	storeSlipRegistry: func()		begin		{ miscSlips: [], storeSlips: [] }		end,	soupChangeRegistry: func()		begin		Sort(Clone([ {			soupName:	"Packages",			callBacks: {				extrasDrawer: func(soupNameString,appSymbol,changeTypeSymbol,changeData)					begin					GetRoot().extrasDrawer:HandleSoupChange(soupNameString,appSymbol,changeTypeSymbol,changeData)					end			} } ]),'|str<|,'soupName)		end,	unionSoupRegistry: func()		begin		Sort(Clone([			{	soupDef:	{					name: "SystemAlarmSoup",					userName: "Alarms",					ownerApp: 'alarms,					ownerAppName: "Alarms",					userDescr: "alarm data",					indexes:	[  {	structure: 'slot, type: 'int, path: 'timeInSeconds },									{	structure: 'slot, type: 'int, path: 'time },									{	structure: 'slot, type: 'string, path: 'key } ] },				apps:		[	'alarms	] },			{	soupDef:	@538,				apps:		[	'iobox	] },			{	soupDef: @539,				apps:		[	'iobox	] },			{	soupDef: @307,				apps:		[	'extrasDrawer	] },			{	soupDef: @365,				apps:		[	'calendar	] },			{	soupDef: @366,				apps:		[	'calendar	] },			{	soupDef: @368,				apps:		[	'calendar	] },			{	soupDef: @367,				apps:		[	'calendar	] },			{	soupDef: @369,				apps:		[	'calendar	] },			{	soupDef: @370,				apps:		[	'calendar	] },			{	soupDef: @364,				apps:		[	'paperroll	] },			{	soupDef: @361,				apps:		[	'cardfile	] }		]),'|str<|,'soupDef.name)		end	},/*------------------------------------------------------------------------------	@547	more initial vars - will be cloned, so mutable*/	{	fonts: {   _proto: { espy: @80,								geneva: @104,								newYork: @131,								handwriting: @571 }},	psFonts: { _proto: { helvetica: @109,								timesRoman: @278,								symbol: @272 }},	availablePrinters:	@245,	notifications: [ { _proto: @127,							 timestamp: 45124864,							 overview: "Newton",							 nfText: "Welcome to Newtonª",							 nfType: 1,							 seenByUser: true } ],	international:	{	_proto: @246 },	correctInfo:	{	_proto: {	// native functions										info: nil,										max: nil } },	_dataDefs:  {  _proto: { } }, // incomplete	_viewDefs:  {  _proto: { } },	// Additional System Services - Power Registry	powerOnRegistry: { _proto: {							|WakeUp&GoToSleep|: func(reason)														begin														GetRoot().wokeFromAlarmOrGPI := if reason = 'alarm or reason = 'serialGPI then Ticks();														if reason = 'user then DSTVerify(Time())														end,							FactoryCalibration: func(arg1)														if Gestalt(kGestalt_RebootInfo).rebootReason = -10080 then															GetRoot():Notify(kNotifyAlert, -10080, nil) }},	powerOffRegistry: {}, 	powerOffFenceSitters: nil, 	oldPowerOffHandlers: [], 	powerStatusChangeRegistry: {}, 	commConfigRegistry: {_proto: {speaker: {type: "TAPI", 														name: "Speaker", 														serviceId: nil,														config: {supportsMakeOutgoing: true,																	supportsSendDigit: true,																	outgoingNeededDelay: 3 } },											modem: {	type: "TAPI", 														name: "Modem", 														serviceId: "mods", 														config: {supportsMakeOutgoing: true,																	supportsSendDigit: true,																	supportsAnswerIncoming: true,																	supportsHangUp: true,																	supportsSpeaker: true,																	supportsEventIncoming: true,																	configOptions: func() [MakeModemOptions()] } }}},	commConfigChangeRegistry: {}, 	coverPageRegistry: { _proto: { standard: {name: "Standard", 															hasNotes: true, 															form: nil /*GetLayout(StandardCoverPage)*/ }}}, 	soundRegistry: { _proto: ROM_soundOff }, 	navigator: { _proto: {						modemNavigator: {	NavigateHelper: func(arg1, arg2) nil,												faxNavigate: func(arg1) nil,												voiceNavigate: func(arg1) nil,												modemNavigate: func(arg1) nil,												MakeModemProfile: func(arg1) nil,												MakeModemPrefs: func(arg1) nil,												MakeFaxCapabilities: func(arg1) nil }, 						voiceNavigator: {	NavigateHelper: func(arg1, arg2) nil,												faxNavigate: func(arg1) nil,												voiceNavigate: func(arg1) nil,												modemNavigate: func(arg1) nil,												MakeModemProfile: func(arg1) nil,												MakeModemPrefs: func(arg1) nil,												MakeFaxCapabilities: func(arg1) nil }, 						faxNavigator: {	NavigateHelper: func(arg1, arg2) nil,												faxNavigate: func(arg1) nil,												voiceNavigate: func(arg1) nil,												modemNavigate: func(arg1) nil,												MakeModemProfile: func(arg1) nil,												MakeModemPrefs: func(arg1) nil,												MakeFaxCapabilities: func(arg1) nil }}},	openCardViews: [], 	folderChangedRegistry: {}, 	storeChangeRegistry: { _proto: { calendar: func(arg1, arg2, arg3) if arg2 = 'storeEnters or arg2 = 'storeLeaves and not Visible(GetRoot().calendar) then GetRoot().calendar:initializeAlarms()}}, 	soupNotify: [], 	procrastinatedActions: {}, 	auxButtonRegistry: [], 	findApps: '[paperroll, cardfile, calendar, callapp, iobox, worldClock], 	transports: '[|print:newton|, |faxSend:newton|, |faxReceive:newton|, |beam:newton|, |phoneHome:newton|, onlineslip], 	emailSystems: { _proto: {							emailClasses:'[|string.email|,												|string.email.internet|,												|string.email.aol|,												|string.email.compuserve|,												|string.email.mcimail|,												|string.email.attmail|,												|string.email.easylink|,												|string.email.prodigy|,												|string.email.genie|,												|string.email.delphi|,												|string.email.msn|,												|string.email.interchange|,												|string.email.radiomail| ], 							emailText: {	string: "E-Mail",												|string.email|: "E-Mail",												|string.email.eworld|: "eWorld",												|string.email.internet|: "Internet",												|string.email.aol|: "America Online",												|string.email.compuserve|: "CompuServe",												|string.email.mcimail|: "MCI Mail",												|string.email.attmail|: "AT&T Mail",												|string.email.easylink|: "EasyLink",												|string.email.prodigy|: "Prodigy",												|string.email.genie|: "GEnie",												|string.email.delphi|: "Delphi",												|string.email.msn|: "Network",												|string.email.interchange|: "Interchange",												|string.email.radiomail|: "RadioMail" }, 							emailInternet: {|string.email.eworld|: "@eworld.com", 												|string.email.aol|: func(s) begin s := StringFilter(s, " ", 'rejectAll); if not StrPos(s, "@aol.com", 0) then (s := s & "@aol.com"); s end,												|string.email.compuserve|: func(s) begin StrReplace(s, ",", ".", nil); if not StrPos(s, "@compuserve.com", 0) then (s := s & "@compuserve.com"); s end,												|string.email.mcimail|: "@mcimail.com", 												|string.email.attmail|: "@attmail.com", 												|string.email.easylink|: "@eln.attmail.com", 												|string.email.prodigy|: "@prodigy.com", 												|string.email.genie|: "@genie.geis.com", 												|string.email.delphi|: "@delphi.com", 												|string.email.msn|: "@msn.com", 												|string.email.interchange|: "@ichange.com", 												|string.email.radiomail|: "@radiomail.net" }}}, 	baudTypes: { _proto: {						baudRates: '[1200, 2400, 9600, 14400, 28800], 						baudText: ["1200", "2400", "9600", "14400", "28800"] }}, 	phoneTypes: { _proto: {						phoneClasses: '[ phone, homePhone, workPhone, faxPhone, carPhone, mobilePhone, homefaxPhone ],						phoneLabels: { phone: $\A0, homePhone: $H, workPhone: $W, faxPhone: $F, carPhone: $A, mobilePhone: $C, homefaxPhone: $F },						phoneText: { phone: "Phone", homePhone: "Home", workPhone: "Work", faxPhone: "Fax", carPhone: "Car", mobilePhone: "Cellular", homefaxPhone: "Home Fax" } }},	pagerTypes: { _proto: {						pagerClasses: '[|string.pager|, |string.pager.skytel|, |string.pager.mobilecomm|, |string.pager.embarc|],						pagerText: { |string.pager|: "Pager", |string.pager.skytel|: "SkyTel", |string.pager.mobilecomm|: "MobileComm", |string.pager.embarc|: "EMBARC"}}},	creditCardTypes: { _proto: {								creditCardClasses: '[|string.card|,														|string.card.phonecard|,														|string.card.creditcard|,														|string.card.phonecard.att|,														|string.card.phonecard.mci|,														|string.card.phonecard.sprint|,														|string.card.creditcard.visa|,														|string.card.creditcard.mastercard|,														|string.card.creditcard.amex|,														|string.card.creditcard.discover| ],								creditCardText: {	|string.card|: "Card",														|string.card.phonecard|: "Phone Card",														|string.card.creditcard|: "Credit Card",														|string.card.phonecard.att|: "AT&T",														|string.card.phonecard.mci|: "MCI",														|string.card.phonecard.sprint|: "Sprint",														|string.card.creditcard.visa|: "Visa",														|string.card.creditcard.mastercard|: "MasterCard",														|string.card.creditcard.amex|: "AmEx",														|string.card.creditcard.discover|: "Discover" }, 								creditCardPhoneNums: {|string.card.phonecard.att|: "(800)225-5288x",														|string.card.phonecard.mci|: "(800)888-8000x",														|string.card.phonecard.sprint|: "(800)877-8000x",														|string.card.creditcard.visa|: "(800)336-8472x",														|string.card.creditcard.mastercard|: "(800)826-2181x",														|string.card.creditcard.amex|: "(800)227-2639x",														|string.card.creditcard.discover|: "(800)347-2683x"} }},	preferences: [], 	prefsRegistry: { _proto: { /*INCOMPLETE*/ }}, 	paperPrefs: { _proto: { scrollIndex: 0 }}, 	cardFilePrefs: { _proto: {						mode: 1, 						filter: nil, 						defaultCardType: 0, 						cardSize: 1, 						phoneTypes: [	// note similarity to phoneTypes above							["Phone", $ , 'phone_number], 							["Home", $H, 'home_phone], 							["Work", $W, 'work_phone], 							["Fax", $F, 'fax_phone], 							["Other", $O, 'other_phone], 							["Car", $A, 'car_phone], 							["Pager", $P, 'pager], 							["Cellular", $C, 'cellular_phone] ]}}, 	formulasRegistry: {}, 	activePackageList: [], 	busyPackages: [],	cardSoups: [], 	inboxApps: {}, 	appClassesRegistry: { _proto: {									paperroll: '[paperroll, list, checkList, text],									calendar: '[meeting],									extrasDrawer: '[packageFrame] }},	weirdCardEventRegistry: {}, 	setTimeRegistry: { _proto: { calendar: func(arg1) if GetRoot() and HasSlot(GetRoot(), 'calendar) then call func() AddProcrastinatedSend('calendarAlarm, GetRoot().calendar, 'nextCalendarAlarm, '[nil], 0) with () }},	stationeryChangeRegistry: {}, 	userConfigChangeRegistry: { _proto: {						buttonBar: func(arg1, arg2)							begin							local local1, local2, local3, local4;							if HasSlot(arg2, 'buttonBarPositions) then								Local1 := true;							if HasSlot(arg2, 'buttonBarControlsPositions)							or HasSlot(arg2, 'bellyButtonPositions) then								Local2 := Local3 := true;							if HasSlot(arg2, 'buttonBarIconSpacingH)							or HasSlot(arg2, 'buttonBarIconSpacingV)							or HasSlot(arg2, 'extrasIconSpacingH)							or HasSlot(arg2, 'extrasIconSpacingV)							or HasSlot(arg2, 'extraFont) then								Local4 := Local3 := true;							if Local1 then								SafeSetDisplayParams(CreateDisplayParams(nil))							else								begin								if Local2 then									displayParams := CreateDisplayParams(nil);								if Local4 then									GetRoot().extrasDrawer:InvalIcons()								else if Local3 then									GetRoot().buttons:RedoIcons()								end							end,						locationChange: func(arg1)							begin							if arg1 = 'location then								begin								local locTime := TimeInSeconds() + DSTVerify(Time()) * 60;								SetTimeInSeconds(locTime)								end							end,						locale: func(arg1) PerformIfDefined({ timeFormat: func()								begin								local utf := GetUserConfig('timeFormat);								if utf then									begin									utf := Clone(utf);									local tf := GetLocale().timeFormat;									foreach tag, val in utf do										if tf.(tag) = val then											RemoveSlot(utf, tag);									if Length(utf) > 0 then										begin										if IsReadOnly(international.currentLocaleBundle) then											international.currentLocaleBundle := {_proto: international.currentLocaleBundle};										if IsReadOnly(international.currentLocaleBundle.timeFormat) then											international.currentLocaleBundle.timeFormat := {_proto: international.currentLocaleBundle.timeFormat};										foreach tag, val in utf do											tf.(EnsureInternal(tag)) := EnsureInternal(val);										vars.setTimeSeed := Random(0, 10000000);										local root := GetRoot();										if root then root:Dirty()										end									end								end }, arg1, nil) }},	// Desktop Connection	autoDockRegistry: {}, 	soupBackupRegistry:  { _proto: { BuiltInExtrasState: func(arg1) GetRoot().extrasDrawer:SaveBuiltInExtrasState(arg1) }},	soupRestoreRegistry: { _proto: { BuiltInExtrasState: func(arg1) GetRoot().extrasDrawer:RestoreBuiltInExtrasState(arg1) }},	// Obsolete	|parts1.x|: [],	dataConversionRegistry: { _proto: {										alarms: @503,										calendar: 'calendar.conversion,										cardfile: 'cardfile.conversion,										paperroll: 'paperroll.conversion,										iobox: 'iobox.conversion, 										extrasDrawer: 'extrasDrawer.conversion, 										system: @569, 										systemDirectory: @570 }},	stdForms:	{ _proto: @269 },	// OS 1.x view protos. We donÕt need Õem.	dialinNetworkRegistry: {}, 	routing: { _proto: {} }	},/*------------------------------------------------------------------------------	@548  initial soup state*/	[		{  initialEntries: nil,			soupDef: {  name: "SystemAlarmSoup",							userName: "Alarms",							ownerApp: 'alarms,							ownerAppName: "Alarms",							userDescr: "alarm data",							indexes: [{ structure: 'slot, type: 'int, path: 'timeInSeconds },										 {	structure: 'slot, type: 'int, path: 'time },										 {	structure: 'slot, type: 'string, path: 'key }] } },		{  initialEntries: nil,			soupDef: @538 },  // In Box		{  initialEntries: nil,			soupDef: @539 },  // Out Box		{  initialEntries: [ {	class: 'ROMFormEntry,										text: ROM_paperRollSoupName,										icon: 11,										sequence: 2,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'paperroll,										iconPro: 11 },									{  class: 'ROMFormEntry,										text: "Calls",										icon: 12,										sequence: 3,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'callapp,										iconPro: 12,										autoClose: 'noAutoClose },									{  class: 'ROMScriptEntry,										text: @556, // Card										icon: 13,										sequence: 5,										labels: nil,										_tagList: '[_icon,_noBackup],										TapAction: func()														begin														OpenForCardIcon();														GetUserConfig('extraAlwaysClose)														end,										iconPro: 13,										app: 'card },									{  class: 'ROMFormEntry,										text: "Calculator",										icon: 14,										sequence: 7,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'calculator,										iconPro: 14,										autoClose: 'noAutoClose },									{  class: 'ROMFormEntry,										text: "Time\nZones",										icon: 15,										sequence: 9,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'worldClock,										iconPro: 15,										autoClose: 'noAutoClose },									{  class: 'ROMFormEntry,										text: "Clock",										icon: 16,										sequence: 10,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'alarm,										iconPro: 16,										autoClose: 'noAutoClose },									{  class: 'ROMFormEntry,										text: "Styles",										icon: 17,										sequence: 11,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'stylePalette,										iconPro: 17,										autoClose: 'noAutoClose },									{  class: 'ROMFormEntry,										text: "Prefs",										icon: 18,										sequence: 20,										labels: nil,										_tagList: '[_icon,_noBackup],										app: 'preferenceRoll,										iconPro: 18 },									{  class: 'ROMScriptEntry,										text: "Owner\nInfo",										icon: 19,										sequence: 21,										labels: nil,										_tagList: '[_icon,_noBackup],										TapAction: func()														begin														AddDeferredSend(GetRoot().cardfile, 'OpenAsOwner, '[true]);														GetUserConfig('extraAlwaysClose)														end,										iconPro: 19,										app: 'ownerInfo },									{  class: 'ROMFormEntry,										text: "Writing\nPractice",										icon: 20,										sequence: 23,										labels: '_setup,										_tagList: '[_icon,_noBackup,_setup],										app: 'handwritingpractice,										iconPro: 20,										autoClose: 'noAutoClose },									{  class: 'ROMSoupEntry,										text: "Calls",										icon: 4,										sequence: 25,										labels: '_soups,										_tagList: '[_icon,_soups,_noBackup],										soupNames: ["Calls"],										closeControl: 'leaveOpen,										ownerApp: 'callapp,										emptyInternal: true },									{  class: 'ROMSoupEntry,										text: "Dates",										icon: 4,										sequence: 26,										labels: '_soups,										_tagList: '[_icon,_soups,_noBackup],										soupNames: [ROM_calendarSoupName, ROM_repeatMeetingName, ROM_calendarNotesName, ROM_repeatNotesName],										closeControl: 'leaveOpen,										ownerApp: 'calendar,										emptyInternal: true },									{  class: 'ROMSoupEntry,										text: "In/Out\nItems",										icon: 4,										sequence: 27,										labels: '_soups,										_tagList: '[_icon,_soups,_noBackup],										soupNames: ["InBox", "OutBox"],										closeControl: 'leaveOpen,										ownerApp: 'iobox,										emptyInternal: true },									{  class: 'ROMSoupEntry,										text: "Names",										icon: 4,										sequence: 28,										labels: '_soups,										_tagList: '[_icon,_soups,_noBackup],										soupNames: [ROM_cardfileSoupName],										closeControl: 'leaveOpen,										ownerApp: 'cardfile,										emptyInternal: true },									{  class: 'ROMSoupEntry,										text: "Notes",										icon: 4,										sequence: 29,										labels: '_soups,										_tagList: '[_icon,_soups,_noBackup],										soupNames: [ROM_paperRollSoupName],										closeControl: 'leaveOpen,										ownerApp: 'paperroll,										emptyInternal: true },									{  class: 'ROMSoupEntry,										text: "To Do\nTasks",										icon: 4,										sequence: 30,										labels: '_soups,										_tagList: '[_icon,_soups,_noBackup],										soupNames: [ROM_todoSoupName, "To Do List"],										closeControl: 'leaveOpen,										ownerApp: 'calendar,										emptyInternal: true },									{  class: 'ROMFormEntry,										text: "InOut",										icon: 21,										sequence: 30,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										app: 'iobox,										iconPro: 21 },									{  class: 'ROMFormEntry,										text: "Names",										icon: 22,										sequence: 31,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										app: 'cardfile,										iconPro: 22 },									{  class: 'ROMFormEntry,										text: "Dates",										icon: 23,										sequence: 32,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										app: 'calendar,										iconPro: 23 },									{  class: 'ROMFormEntry,										text: "Extras",										icon: 24,										sequence: -1,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										app: 'extrasDrawer,										iconPro: 24 },									{  class: 'ROMScriptEntry,										text: "Undo",										icon: 25,										sequence: 34,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										TapAction: func()														begin														PostCommand('application, aeUndo);														GetUserConfig('extraAlwaysClose)														end,										iconPro: 25,										app: 'undo },									{  class: 'ROMScriptEntry,										text: "Find",										icon: 26,										sequence: 35,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										TapAction: func()														begin														GetRoot().findDrawer:PrimeAndOpen();														GetUserConfig('extraAlwaysClose)														end,										iconPro: 26,										app: 'findDrawer },									{  class: 'ROMScriptEntry,										text: "Assist",										icon: 27,										sequence: 36,										labels: '_buttonBar,										_tagList: '[_icon,_noBackup,_buttonBar],										TapAction: func()														begin														GetRoot().assistant:PrimeAndOpen();														GetUserConfig('extraAlwaysClose)														end,										iconPro: 27,										app: 'assistant } ],		soupDef: @307 },  // Extras	{  initialEntries: func() [],		soupDef: @364 },  // Notes	{  initialEntries: nil,		soupDef: @365 },  // Calendar	{  initialEntries: nil,		soupDef: @366 },  // Repeat Meetings	{  initialEntries: nil,		soupDef: @368 },  // Calendar Notes	{  initialEntries: nil,		soupDef: @367 },  // Repeat Notes	{  initialEntries: nil,		soupDef: @369 },  // To Do	{  initialEntries: nil,		soupDef: @370 },  // To Do List	{  initialEntries: [ { soup: "", app: 'calendar, builtInMetaData: true },								{ soup: "", app: 'cardfile, builtInMetaData: true },								{ soup: "", app: 'paperroll, builtInMetaData: true },								{ soup: "", app: 'iobox, builtInMetaData: true },								{ soup: "", app: 'extrasDrawer, builtInMetaData: true },								{ soup: "", app: 'system, builtInMetaData: true },								{ soup: "", app: 'systemDirectory, builtInMetaData: true } ],		soupDef: {  name: ROM_metaSoupName,						userName: ROM_metaSoupName,						ownerApp: 'systemDirectory,						userDescr: "private",						indexes: [{ structure: 'slot, path: 'soup, type: 'string },									 { structure: 'slot, path: 'app, type: 'symbol }] } }	],/*------------------------------------------------------------------------------	@549  initialization scripts*/	{	PreSetupUserConfig: func()		begin		AddDeferredCall(kPreSetupUserConfigFunc, nil)		end,	StartAutoFaxReceive: func()		begin		local appSym := '|faxReceive:newton|;		if userConfiguration.(appSym)		and userConfiguration.(appSym).faxAutoReceive then			AddDeferredCall(func() GetRoot().(appSym):Start(), nil)		end,	StartSniffing: func()		begin		if userConfiguration.zapAutoReceive then			AddDeferredCall(functions.StartIRSniffing, nil)		end,	StartAutoCallReceive: func()		begin		local appSym := '|phoneHome:newton|;		if userConfiguration.(appSym)		and userConfiguration.(appSym).phoneAutoReceive		and userConfiguration.(appSym).enableAutoUI then			AddDeferredCall(func() GetRoot().(appSym):StartAutoReceive(), nil)		end,	SetBatteryTypes: func()		begin		local batteryInfo := GetUserConfig('batteryTypes);		if batteryInfo then			foreach item in batteryInfo do				SetBatteryType(item.whichBattery, item.batteryType)		end,	CheckSerialNumber: func()		begin		local msg;		local ROMSignature := call ROM_GetSerialNumber with ();		local storeSignature := GetStores()[0]:GetSignature();		if ROMSignature then			begin			ROMSignature := ExtractLong(ROMSignature, 4);			if ROMSignature <> storeSignature then				begin				if storeSignature = 0 then					msg := "The internal storeÕs signature is invalid. A hard reset may correct the problem."				else					msg := "The internal storeÕs signature has been altered. A hard reset may correct the problem."				end			end		else			msg := "This unitÕs serial number cannot be read.";		if msg then			AddDeferredCall(func() GetRoot():Notify(kNotifyAlert, "Newton", msg), nil)		end,	ReadPreferences: func()		begin		Apply(script, parameters)		end	},/*------------------------------------------------------------------------------	@550*/	{},/*------------------------------------------------------------------------------	@551*/	{},/*------------------------------------------------------------------------------	@552*/	{},/*------------------------------------------------------------------------------	@553*/	{},/*------------------------------------------------------------------------------	@554*/	{},/*------------------------------------------------------------------------------	@555*/	{},/*------------------------------------------------------------------------------	@556			Card app name*/	"Card",/*------------------------------------------------------------------------------	@557*/	{},/*------------------------------------------------------------------------------	@558*/	{},/*------------------------------------------------------------------------------	@559*/	{},/*------------------------------------------------------------------------------	@560*/	{},/*------------------------------------------------------------------------------	@561*/	{},/*------------------------------------------------------------------------------	@562*/	{},/*------------------------------------------------------------------------------	@563*/	{},/*------------------------------------------------------------------------------	@564*/	{},/*------------------------------------------------------------------------------	@565*/	{},/*------------------------------------------------------------------------------	@566*/	{},/*------------------------------------------------------------------------------	@567*/{	declareSelf: 'Scroller,		viewClass: clView,		viewFlags: vVisible + vReadOnly,		viewFormat: vfFillWhite,		viewBounds: nil,		viewJustify: nil,		viewSetupFormScript: func()			begin			scrollerState := Array(arrowCount, 0);			if not scrollView then				scrollView := self;			:AdjustArrows()			end,		viewGestureScript: func(arg1, arg2)			begin			arg2 = 13			end,		scrollView: nil,		arrowCount: nil,		arrows: nil,		dirMap: nil,		stateMap: nil,		scrollerState: nil,		dataRect: nil,		viewRect: nil,		scrollRect: nil,		xPos: 0,		yPos: 0,		scrollXUnits: 1,		scrollYUnits: 1,		scrollAmounts: [ 1, 1, 1 ],		pageThreshold: 5,		AdjustArrows: func()			begin			local state;			if scrollRect then				begin				if dirMap.left then					begin					state := if dataRect and xPos > dataRect.left then 'more else 'normal;					:SetArrow('left, state)					end;				if dirMap.right then					begin					state := if xPos + (viewRect.right - viewRect.left) < dataRect.right then 'more else 'normal;					:SetArrow('right, state)					end;				if dirMap.up then					begin					state := if dataRect.bottom = 9999 then 'normal else (if yPos > dataRect.top then 'more else 'normal);					:SetArrow('up, state)					end;				if dirMap.down then					begin					state := if dataRect.bottom = 9999 then 'normal else (if yPos + (viewRect.bottom - viewRect.top) < dataRect.bottom then 'more else 'normal);					:SetArrow('down, state)					end				end			end,		GetArrow: func(arg1)			begin			local local1 := scrollerState[dirMap.(arg1)];			foreach local2, local3 in stateMap do				if local3 = local1 then					break local2			end,		SetArrow: func(arg1, arg2)			begin			scrollerState[dirMap.(arg1)] := stateMap.(arg2);			if scroller exists and Visible(scroller) then				scroller:Dirty()			end,		SetupExtras: func(arg1, arg2)			begin			arg2.axis := if arg1 = 'left or arg1 = 'right then 'horizontal else 'vertical;			local scrollAmount := if arg2.tap = 'double then scrollAmounts[2]								 else if arg2.count >= pageThreshold then scrollAmounts[1]								 else scrollAmounts[0];			local scrollUnits := if arg2.axis = 'horizontal then scrollXUnits else scrollYUnits;			arg2.amount := if arg1 = 'left or arg1 = 'up then -scrollAmount * scrollUnits else scrollAmount * scrollUnits;			if scrollRect then				begin				if arg2.axis = 'horizontal then					begin					if xPos + arg2.amount < 0 then						arg2.amount := -xPos					else if xPos + arg2.amount >= scrollRect.right - (viewRect.right - viewRect.left) then						arg2.amount := scrollRect.right - (viewRect.right - viewRect.left) - xPos;					xPos := xPos + arg2.amount					end				else					begin					if yPos + arg2.amount < 0 then						arg2.amount := -yPos					else if yPos + arg2.amount > scrollRect.bottom - (viewRect.bottom - viewRect.top) then						arg2.amount := scrollRect.bottom - (viewRect.bottom - viewRect.top) - yPos;					yPos := yPos + arg2.amount					end				end			end,		PlayStopSound: func()			begin			PlaySound(ROM_tockSound)			end,		DoScroll: func(inDirection)			begin			local kids := :ChildViewFrames();			foreach child in kids do				if inDirection = child.arrowDirection then					begin					if not child:EndOfTheLine(inDirection) then						begin						local local4 := Clone(child.baseFrame);						:SetupExtras(inDirection, local4);						scrollView:?viewScroll2DScript(inDirection, local4);						:AdjustArrows();						child:DoDrawing('viewDrawScript, [])						end;					break					end			end	},/*------------------------------------------------------------------------------	@568*/	{	viewClass: clView,		viewFlags: vVisible + vClickable,		viewFormat: vfNone,		lastTap: 0,		extras: nil,		baseFrame: {	tap: 'single,							count: 0,							unit: nil },		arrowIndex: nil,		arrowDirection: nil,		hilite: nil,		viewDrawScript: func()			begin			local index := if hilite then stateMap.hilite + arrowIndex else scrollerState[arrowIndex] + arrowIndex;			DrawXBitmap(:LocalBox(), arrows, index, 0)			end,		EndOfTheLine: func(dirn)			begin			if scrollRect and viewRect then				begin				if (dirn = 'up and yPos <= ScrollRect.top)				or (dirn = 'down and yPos >= ScrollRect.bottom - (ViewRect.bottom - ViewRect.top))				or (dirn = 'left and xPos <= ScrollRect.left)				or (dirn = 'right and xPos >= ScrollRect.right - (ViewRect.right - ViewRect.left)) then					begin					:PlayStopSound();					Sleep(10);					true					end				end			end,		viewClickScript: func(unit)			begin			InkOff(unit);			local aro := :GetArrow(arrowDirection);			hilite := true;			:DoDrawing('viewDrawScript, []);			if :EndOfTheLine(arrowDirection) then				begin				hilite := nil;				:DoDrawing('viewDrawScript, []);				return true				end;			Clicker();			extras := Clone(baseFrame);			extras.unit := unit;			if (Ticks() - lastTap) < 60 then				extras.tap := 'double;			lastTap := Ticks();			loop				begin				if :EndOfTheLine(arrowDirection) then					break;				:SetupExtras(arrowDirection, extras);				scrollView:?viewScroll2DScript(arrowDirection, extras);				:AdjustArrows();				aro := :GetArrow(arrowDirection);				extras.count := extras.count + 1;				if StrokeDone(unit) then					break				end;			scrollView:?viewScrollDoneScript();			hilite := nil;			:DoDrawing('viewDrawScript, []);			true			end},/*------------------------------------------------------------------------------	@569*/	{},/*------------------------------------------------------------------------------	@570*/	{},/*------------------------------------------------------------------------------	@571			Casual display font.*/	{  name: "Casual", 		fontName: "AppleCasual",	// not original, obviously		encoding: 0, 		macFontID: 5, 		screenSym: 'handwritingFont, 		psName: 'timesroman, 		psScale: 75366, 		badFontMap: 1, 		plainData: nil, 		boldData: nil, 		italicData: nil, 		boldItalicData: nil, 		userSizes: [10, 12, 18], 		usable: true, 		tsID: 3	},/*------------------------------------------------------------------------------	@572*/	{},/*------------------------------------------------------------------------------	@573*/	{},/*------------------------------------------------------------------------------	@574*/	{},/*------------------------------------------------------------------------------	@575*/	{},/*------------------------------------------------------------------------------	@576*/	{},/*------------------------------------------------------------------------------	@577*/	{},/*------------------------------------------------------------------------------	@578*/	{},/*------------------------------------------------------------------------------	@579*/	{},/*------------------------------------------------------------------------------	@580*/	{},/*------------------------------------------------------------------------------	@581*/	{},/*------------------------------------------------------------------------------	@582*/	{},/*------------------------------------------------------------------------------	@583*/	{},/*------------------------------------------------------------------------------	@584*/	{},/*------------------------------------------------------------------------------	@585*/	{	name: 'vBarber,		height: 105,		kids: [			protoStatusText,			protoStatusBarber,			{	_proto: protoTitleText,				viewBounds: SetBounds(10, 8, 180, 33)			},			@848		]	},/*------------------------------------------------------------------------------	@586*/	{},/*------------------------------------------------------------------------------	@587*/	{	_proto: newtAreaCodePhoneLine,		flavor: newtCustomFilter,		newRecFlags: 264705,		suppressAreaCode: true,		viewSetupFormScript: func()			begin			inherited:viewSetupFormScript();			phone.viewFlags := filter.recFlags;			phone.textFlags := filter.recTextFlags;			phone.dictionaries := filter.dictionaries;			phone.recConfig := filter.recConfig			end	},/*------------------------------------------------------------------------------	@588	ROM_DefRotateFunc*/	func()	begin	local box := :GlobalBox();	:_Close();	local display := displayParams;	if display.appAreaGlobalLeft + display.appAreaWidth < box.right	or display.appAreaGlobalLeft + display.appAreaHeight < box.bottom	or display.appAreaGlobalLeft > box.left	or display.appAreaGlobalLeft > box.top then		RemoveSlot(self, 'viewBounds);	:Open()	end,/*------------------------------------------------------------------------------	@589			Part entries.*/	{	|????Entry|: kAnonEntry,	FormEntry: kFormEntry,	ROMFormEntry: kROMFormEntry,	AutoEntry: kAutoEntry,	FontEntry: {		_proto: kAnonEntry,		iconEntry: {			class: 'FontEntry,			text: "",			icon: 7,			sequence: nil,			labels: '_extensions,			_tagList: '[ _icon, _extensions ],			packageName: nil		}	},	DictEntry: {		_proto: kAnonEntry,		iconEntry: {			class: 'DictEntry,			text: "",			icon: 8,			sequence: nil,			labels: '_extensions,			_tagList: '[ _icon, _extensions ],			packageName: nil		}	},	BookEntry: {		_proto: kFormEntry,		iconEntry: {			class: 'BookEntry,			text: "",			icon: 0,			sequence: nil,			labels: nil,			_tagList: '[ _icon ],			packageName: nil,			isbn: nil		},		Preflight: kPreflightIconFunc,		TapAction: func()			begin			if :LookupSoupPackageAndActivate() then				begin				local app := GetRoot().copperfield;				local book := app:CurrentBook();				if book then					begin					if not StrEqual(book.isbn, fentry.isbn) then						begin						app:Close();						app:viewPreOpenScript(fentry.isbn)						end					end				else					app:PrepBook(fentry.isbn);				:_Open(app)				end			end	},	HelpBookEntry: {		_proto: kFormEntry,		iconEntry: {			class: 'HelpBookEntry,			text: "",			icon: 1,			sequence: nil,			labels: '_help,			_tagList: '[ _icon, _help ],			packageName: nil,			isbn: nil		},		Preflight: kPreflightIconFunc,		TapAction: kTapHelpBookFunc	},	ROMHelpBookEntry: {		_proto: kROMFormEntry,		iconEntry: {			class: 'ROMHelpBookEntry,			text: "",			icon: 1,			sequence: nil,			labels: '_help,			_tagList: '[ _icon, _help, _noBackup ],			isbn: nil,			app: nil,			packageId: nil,			type: nil		},		File: func(arg1)			begin			fentry.labels := arg1;			true			end,		Preflight: func(action, arg2)			begin			if action = 'filing then				'OK			else				"built-in"			end,		TapAction: kTapHelpBookFunc	},	FrozenEntry: {		_proto: kFormEntry,		iconEntry: {			class: 'FrozenEntry,			text: "",			icon: 9,			sequence: nil,			labels: nil,			_tagList: '[ _icon, _snowflake ],			packageName: nil		},		Preflight: func(action, arg2)			begin			if action = 'filing or action = 'delete then				begin				if EntryStore(fentry):IsReadOnly() then					"locked"				else					'OK				end			else if action = 'move then				begin				if :CopyProtected() then					"copy protected"				else if EntryStore(fentry):IsReadOnly() then					"locked"				else					'OK				end			else if action = 'route then				'OK			else if action = 'freeze then				"already frozen"			else				"frozen"			end,		TapAction: func()			begin			ThawPackage(:LookupSoupPackage());			nil			end	},	SoupEntry: {		_proto: kFormEntry,		iconEntry: {			class: 'SoupEntry,			text: "",			icon: 4,			sequence: nil,			labels: '_soups,			_tagList: '[ _icon, _soups ],			soupNames: nil,			closeControl: 'leaveOpen		},		Store: func() nil,		Where: kSoupLocationFunc,		Size: func() "--",		Delete: kDeleteSoupFunc,		Preflight: kPreflightSoupFunc,		TapAction: kTapSoupFunc	},	ROMSoupEntry: {		_proto: kROMFormEntry,		iconEntry: {			class: 'ROMSoupEntry,			text: "",			icon: 4,			sequence: nil,			labels: '_soups,			_tagList: '[ _icon, _soups, _noBackup ],			soupNames: nil,			closeControl: 'leaveOpen		},		Where: kSoupLocationFunc,		Delete: kDeleteSoupFunc,		Preflight: kPreflightSoupFunc,		TapAction: kTapSoupFunc	},	ScriptEntry: {		_proto: kFormEntry,		iconEntry: {			class: 'ScriptEntry,			text: "",			icon: 5,			sequence: nil,			labels: nil,			_tagList: '[ _icon, _scriptIcon ],			packageName: nil,			TapAction: nil		},		Size: func() max(1, EntrySize(fentry) div 1024) & "K",		Delete: func()			begin			if :LookupSoupPackage() then				inherited:Delete()			else				EntryRemoveFromSoup(fentry)			end,		Move: func(arg1)			begin			if :LookupSoupPackage() then				inherited:Move(arg1)			else				begin				local soupName := EntrySoup(fentry):GetName();				local soup := arg1:GetSoup(soupName);				if EntryStore(fentry):IsReadOnly() then					EntryCopyXmit(fentry, soup, '_newt)				else					EntryMoveXmit(fentry, soup, '_newt);				true				end			end,		Preflight: func(action, arg2)			begin			if action = 'filing or action = 'move or action = 'delete then				begin				if EntryStore(fentry):IsReadOnly() then					"locked"				else					'OK				end			else if action = 'route then				'OK			else if :LookupSoupPackage() and action = 'freeze then				'OK			else				"the wrong kind"			end,		TapAction: kTapScriptFunc	},	ROMScriptEntry: {		_proto: kROMFormEntry,		iconEntry: {			class: 'ROMScriptEntry,			text: "",			icon: 5,			sequence: nil,			labels: nil,			_tagList: '[ _icon, _noBackup ],			TapAction: nil		},		Preflight: func(action, arg2)			begin			if action = 'filing or action = 'route then				'OK			else if action = 'delete or action = 'move then				"built-in"			else				"the wrong kind"			end,		File: kFileIconFunc,		Move: func() nil,		TapAction: kTapScriptFunc	},	PackageEntry: kFormEntry,	ROMPackageEntry: kROMFormEntry,	AutoPackageEntry: kAutoEntry},/*------------------------------------------------------------------------------	@590*/	{	_proto: protoStaticText,		viewBounds: SetBounds(10, 10, -10, 0),		viewJustify: 0xF2,		viewFont: 0x102800,		version: 1,		symbol: 'default,		type: 'editor,		name: "Missing Stationery",		text: nil,		missingStationery: true	},/*------------------------------------------------------------------------------	@591*/	{	bits: MakeBinaryFromHex("000000000004018501850011018F002209C8000053E500005775000096348000A7728000263200004C1900001FFC00001FFC000003000000", 'bits),		bounds: SetBounds(0, 0, 17, 10)	},/*------------------------------------------------------------------------------	@592*/	{},/*------------------------------------------------------------------------------	@593*/	{},/*------------------------------------------------------------------------------	@594			Diamond shape for protoDiamondButton.*/	{  bits: MakeBinaryFromHex("0000000000040153015300A9015800AE2000000070000000F80000007000000020000000", 'bits),		bounds: SetBounds(0, 0, 5, 5)	},/*------------------------------------------------------------------------------	@595*/	{},/*------------------------------------------------------------------------------	@596*/	{},/*------------------------------------------------------------------------------	@597*/	{},/*------------------------------------------------------------------------------	@598*/	{},/*------------------------------------------------------------------------------	@599*/	nil];