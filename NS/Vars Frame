vars := {	_curClick: nil,	_dataDefs: nil,	_viewDefs: nil,	actionDescription: nil,	activePackageList: nil,	appClassesRegistry: nil,	auxButtonRegistry: nil,	availablePrinters: nil,	baudTypes: nil,	busyPackages: nil,	busySlots: nil,	cardfilePrefs: nil,	cardSlotIcons: nil,	cardSoups: nil,	classes: nil,	commConfigChangeRegistry: nil,	commConfigRegistry: nil,	constantFunctions: nil,	correctInfo: nil,	coverPageRegistry: nil,	creditCardTypes: nil,	dataConversionRegistry: nil,	dictionaries: nil,	displayParams: nil,	emailSystems: nil,	entryForms: nil,	extras: nil,	findApps: nil,	folderChangedRegistry: nil,	fonts: nil,	formulaList: nil,	formulasRegistry: nil,	functions: nil,	inboxApps: nil,	international: nil,	ioBusy: nil,	lastTextChanged: nil,	lastTextHiliteChanged: nil,	modemLocations: nil,	navigator: nil,	notifications: nil,	oldPowerOffHandler: nil,	openCardViews: nil,	pagerTypes: nil,	paperPrefs: nil,	parts1x: nil,	phoneTypes: nil,	powerOffFenceSitters: nil,	powerOffRegistry: nil,	powerOnRegistry: nil,	preferences: nil,	prefs: nil,	prefsRegistry: nil,	prettyPrint: nil,	printDepth: nil,	printLength: nil,	procrastinatedActions: nil,	psFonts: nil,	registry: nil,	routing: nil,	setTimeRegistry: nil,	setTimeSeed: nil,	soundRegistry: nil,	soupChangedRegistry: nil,	storeSlipRegistry: nil,	trace: nil,	transports: nil,	unionSoupRegistry: nil,	userConfigChangeRegistry: nil,	userConfiguration: nil,	vars: nil};initGlobalsFunc := func()	begin	// update read-only vars programatically	foreach tag, item in @546 do		if not vars.(tag) then			vars.(tag) := if IsFunction(item) then call item with ()														 else item;	// update read/write vars	foreach tag, item in @547 do		if not vars.(tag) then			vars.(tag) := Clone(item);	// update user configuration from persistent storage	call @118 with ();	// set default print configuration	vars.printDepth := 1;				// 3 gives more information, but 1 in the original	vars.printLength := 16	end;initScriptsFunc := func()	begin// set up the internal store	local internalStore := GetStores()[0];	if StrEqual(internalStore:GetName(), "Untitled") then		internalStore:SetName("Internal");// set up initial soup state	foreach item in @548 do		begin		if not internalStore:HasSoup(item.soupDef.name) then			begin			local soupName := item.soupDef.name;			local soup := CreateSoupFromSoupDef(item.soupDef, internalStore, nil);			if item.initialEntries then				begin				local initialPopulation := item.initialEntries;				if IsFunction(initialPopulation) then					initialPopulation := call initialPopulation with ();				foreach entry in initialPopulation do					soup:AddFlushed(if IsReadOnly(entry) then Clone(entry) else entry)				end			end		end;/*// run the initialization scripts	foreach initScript in @549 do		begin	//	local now := Ticks();	// don’t know what that’s doing here		call initScript with ()		end;// start alarms	AddDeferredCall(functions.SetNextAlarm, nil)*/	end;