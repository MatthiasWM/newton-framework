DefineGlobalConstant('kLandscapeParams,{	pixelDepth: 4,	orientation: 1,	scrTop: 0,	scrLeft: 0,	scrWidth: 480,	scrHeight: 320,	rootBounds:			SetBounds(  0, 0, 480, 320),	appAreaGlobalTop: 0,	appAreaGlobalLeft: 0,	appAreaTop: 0,	appAreaLeft: 0,	appAreaWidth: 434,	appAreaHeight: 320,	appAreaBounds:		SetBounds(  0, 0, 434, 320),	buttonBarBounds:  SetBounds(434, 0, 480, 320),	buttonBarPosition: 'right,	buttonBarControlsPosition: 'bottom,	bellyButtonPosition: 'inside,	buttonBarVThickness: 46,	buttonBarHThickness: 46});DefineGlobalConstant('kPortraitParams,{	_proto: kLandscapeParams,	orientation: 0,	scrWidth: 320,	scrHeight: 480,	rootBounds:			SetBounds(  0,   0, 320, 480),	appAreaWidth: 320,	appAreaHeight: 434,	appAreaBounds:		SetBounds(  0,   0, 320, 434),	buttonBarBounds:  SetBounds(  0, 434, 320, 480),	buttonBarPosition: 'bottom,	buttonBarControlsPosition: 'right});{//	Display	GetLCDContrast: plainC.FGetLCDContrast,	SetLCDContrast: plainC.FSetLCDContrast/*contrast*/,	GetOrientation: plainC.FGetOrientation,//	SetOrientation: plainC.FSetOrientation/*orientation*/,	SetScreenOrientation: func(inOrientation)	SafeSetDisplayParams(CreateDisplayParams(inOrientation)),	SafeSetDisplayParams: func(parms)		begin		local local1, local2, local3, local4, local5;		if not SetContains(LegalOrientations(), parms.orientation) then			return;		local1 := parms.appAreaHeight < 320;		if local1 then		begin			local2 := GetRoot();			local3 := GetUserConfig('blessedapp);			if local3 and not local2.(local3).ReOrientToScreen then			begin				local2:Notify(3, "Rotate", parmstr("The backdrop icon^?0,\u201C\u^0\u201D\u,|| cannot operate while rotated.", [GetAppName(local3)]));				return;			end;			local4 := foreach local5 in GetRoot():ChildViewFrames() do				if not local5.ReOrientToScreen then				break true;			if local4 then				(if ModalConfirm("Some functions will not show after rotation because they can\u2019\ut operate while rotated.", 'okCancelDefaultOk) then				foreach local5 in GetRoot():ChildViewFrames() do					if not local5.ReOrientToScreen then						local5:Close();			else				return);		end;		SetDisplayParams(parms);		true		end,	SetDisplayParams: func(parms)		begin		SetUserConfig('screenOrientation, parms.orientation);		SetOrientation(parms.orientation);		displayParams := parms;		GetRoot():FixupDisplay();		VerifyCalibration()		end,	CreateDisplayParams: func(inOrientation)		begin		if not inOrientation then			inOrientation := GetOrientation();		local rawParms, disParms, bbParms;		rawParms := GetRawDisplayParams(inOrientation);		disParms := rawParms;		bbParms := GetBBParams(inOrientation);		if bbParms then			begin			disParms := {  _proto: rawParms,								appAreaBounds: nil, appAreaWidth: nil, appAreaHeight: nil,								buttonBarBounds: nil, buttonBarPosition: nil };			if bbParms.buttonBarPosition = 'right then				begin				disParms.appAreaWidth := rawParms.rootBounds.right - bbParms.buttonBarThickness;				disParms.appAreaHeight := rawParms.rootBounds.bottom;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.left := rawParms.rootBounds.right - bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'right				end			else if bbParms.buttonBarPosition = 'left then				begin				disParms.appAreaWidth := rawParms.rootBounds.right - bbParms.buttonBarThickness;				disParms.appAreaHeight := rawParms.rootBounds.bottom;				disParms.appAreaGlobalLeft := bbParms.buttonBarThickness;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.right := bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'left				end			else if bbParms.buttonBarPosition = 'top then				begin				disParms.appAreaWidth := rawParms.rootBounds.right;				disParms.appAreaHeight := rawParms.rootBounds.bottom - bbParms.buttonBarThickness;				disParms.appAreaGlobalTop := bbParms.buttonBarThickness;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.bottom := bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'top				end			else if bbParms.buttonBarPosition = 'bottom then				begin				disParms.appAreaWidth := rawParms.rootBounds.right;				disParms.appAreaHeight := rawParms.rootBounds.bottom - bbParms.buttonBarThickness;				disParms.buttonBarBounds := Clone(rawParms.rootBounds);				disParms.buttonBarBounds.top := rawParms.rootBounds.bottom - bbParms.buttonBarThickness;				disParms.buttonBarPosition := 'bottom				end			else if bbParms.buttonBarPosition = 'none then				begin				disParms.appAreaHeight := rawParms.rootBounds.bottom;				disParms.appAreaWidth := rawParms.rootBounds.right;				disParms.buttonBarBounds := { left: 0, top: 0, right: 0, bottom: 0 };				disParms.buttonBarPosition := 'none			end;			disParms.appAreaBounds := RelBounds(disParms.appAreaLeft, disParms.appAreaTop, disParms.appAreaWidth, disParms.appAreaHeight);			if bbParms.buttonBarControlsPosition and bbParms.buttonBarControlsPosition <> disParms.buttonBarControlsPosition then				disParms.buttonBarControlsPosition := bbParms.buttonBarControlsPosition;			if bbParms.bellyButtonPosition and bbParms.bellyButtonPosition <> disParms.bellyButtonPosition then				disParms.bellyButtonPosition := bbParms.bellyButtonPosition			end;		disParms		end,	GetBBParams: func(inOrientation)		begin		local bbParms;		if GlobalVarExists('buttonBarParams) then			bbParms := buttonBarParams[inOrientation];		if not bbParms then			begin			local bbPositions := GetUserConfig('buttonBarPositions);			local bbControlsPositions := GetUserConfig('buttonBarControlsPositions);			local bbBellyButtonPositions := GetUserConfig('bellyButtonPositions);			if bbPositions or bbControlsPositions or bbBellyButtonPositions then				begin				local rawParms := GetRawDisplayParams(inOrientation);				local barPosition := if bbPositions and bbPositions[inOrientation] then bbPositions[inOrientation] else rawParms.buttonBarPosition;				local ctrlsPosition := if bbControlsPositions and bbControlsPositions[inOrientation] then bbControlsPositions[inOrientation] else rawParms.buttonBarControlsPosition;				local bellyBtnPosition := if bbBellyButtonPositions and bbBellyButtonPositions[inOrientation] then bbBellyButtonPositions[inOrientation] else rawParms.bellyButtonPosition;				if barPosition = 'right or barPosition = 'left then					begin					if ctrlsPosition <> 'bottom then ctrlsPosition := 'top					end				else					begin					if ctrlsPosition <> 'right then ctrlsPosition := 'left					end;				if barPosition <> rawParms.buttonBarPosition or ctrlsPosition <> rawParms.buttonBarControlsPosition or bellyBtnPosition <> rawParms.bellyButtonPosition then					begin					if barPosition = 'right or barPosition = 'left then						bbParms := { buttonBarPosition: barPosition,										 buttonBarThickness: rawParms.buttonBarVThickness,										 buttonBarControlsPosition: ctrlsPosition,										 bellyButtonPosition: bellyBtnPosition }					else if barPosition = 'top or barPosition = 'bottom then						bbParms := { buttonBarPosition: barPosition,										 buttonBarThickness: rawParms.buttonBarHThickness,										 buttonBarControlsPosition: ctrlsPosition,										 bellyButtonPosition: bellyBtnPosition }					end				end			end;		bbParms		end,	GetRawDisplayParams: func(inOrientation) GetAllRawDisplayParams()[inOrientation],	GetAllRawDisplayParams: func()		begin		if GlobalVarExists('allRawDisplayParams) then			allRawDisplayParams		else			[	kPortraitParams,				kLandscapeParams,				{  _proto: kPortraitParams,					orientation: 2,					appAreaBounds: { left: 0, top: 0, right: 320, bottom: 434 } },				{  _proto: kLandscapeParams,					orientation: 3,					appAreaBounds: { left: 0, top: 0, right: 434, bottom: 320 } } ]		end,	KillStdButtonBar: func(bbParms)		begin		local local1 := GetRoot().buttons;		if bbParms then			begin			DefGlobalVar('buttonBarParams, bbParms);			if SafeSetDisplayParams(CreateDisplayParams(nil)) then				local1:Close()			end		else			begin			UnDefGlobalVar('buttonBarParams);			if SafeSetDisplayParams(CreateDisplayParams(nil)) then				local1:Open();			end;		GetRoot().extrasDrawer:InvalIcons()		end,	LegalOrientations: func()		begin		local orientations := [];		foreach index, param in GetAllRawDisplayParams() do			if param then				AddArraySlot(orientations, index);		orientations		end,// References to Views	GetRoot: plainC.FGetRoot,	GetView: plainC.FGetView,//	Redrawing Views//	RefreshViews: plainC.FRefreshViews,	SetValue: plainC.FSetValue,//	Dynamically Adding Views	AddStepView: plainC.FAddStepView,	RemoveStepView: plainC.FRemoveStepView,	AddView: plainC.FAddView,	RemoveView: plainC.FRemoveView,	BuildContext: plainC.FBuildContext,//	Making Modal Views	AsyncConfirm: func(confirmMsg, btnList, fn)		begin		local closure := fn;		if not IsArray(btnList) then			begin			if ClassOf(btnList) = 'symbol then				btnList := @543.(btnList);			if not btnList then				btnList := @543.okCancel;			end;		local view := BuildContext( {	_proto: @544,												message: confirmMsg,												buttonList: btnList,												viewQuitScript: func()													begin													AddDeferredCall(closure, [view.confirmedValue])													end } );		view:FilterDialog();		view		end,	ModalConfirm: func(confirmMsg, btnList)		begin		if not IsArray(btnList) then			begin			if ClassOf(btnList) = 'symbol then				btnList := @543.(btnList);			if not btnList then				btnList := @543.okCancel;			end;		local view := BuildContext( {	_proto: @544,												message: confirmMsg,												buttonList: btnList } );		view:ModalDialog();		view.confirmedValue		end,	Modalstate: plainC.Fmodalstate /* funcPtr: 508290, numArgs: 0 */,//	Setting the Bounds of Views	RelBounds: plainC.FRelBounds,	SetBounds: plainC.FSetBounds,	StdButtonWidth: func(str)	StrFontWidth(str, ROM_fontSystem9Bold) + kStdButtonExtra,//	Animating Views	DoScrubEffect: plainC.FDoScrubEffect /* funcPtr: 7034557, numArgs: 1 */,//	Dragging and Dropping	ConvertDropToShape: func(inType, inDropView)		begin		local local2, local3, local4, local5, local6, local7, local8, local9, local10;		local shape;		local bbox := inDropView.viewBounds;		if inType = 'shape then			shape := inDropView.shape;		else if inType = 'polygon or inType = 'ink then			begin			if inType = 'polygon then				shape := MakeShape(inDropView.points)			else				shape := MakeInk(inDropView.ink, bbox.left, bbox.top, bbox.right, bbox.bottom);			local3 := inDropView.viewFormat;			if local3 then				local2 := { fillPattern: BAnd(local3, 15), pensize: BAnd(local3, 3840) >> 8 }			else				local2 := { pensize: 2 }			end;		else if inType = 'picture then			shape := PictToShape(inDropView.icon.data, ShapeBounds(inDropView.icon))		else if inType = 'text and inDropView.text then			begin			if inDropView.viewFont then				local5 := inDropView.viewFont			else				local5 := GetUserConfig('userFont);			local6 := RecognizeTextInStyles(inDropView, local5);			if local6.styles then				local5 := local6.styles[1];			local7 := local6.text;			local8 := inDropView.viewBounds;			local9 := local8.right;			local8.bottom := local8.top;			local8.right := local8.left;			local8 := TextBounds(local7, local5, local8);			if local8.right > local9 then				begin				local8.right := local9;				local8.bottom := local8.top;				local8 := TextBounds(local7, local5, local8);				end;			shape := [{font: local5}, MakeTextBox(local7, local8.left, local8.top, local8.right, local8.bottom)];			end;		if shape then			begin			local shapeBox := ShapeBounds(shape);			OffsetShape(shape, bbox.left - shapeBox.left, bbox.top - shapeBox.top);			if local2 then				begin				if IsArray(shape) then					AddArraySlot(shape, local2)				else					shape := [local2, shape]				end;			shape			end		end,//	View Highlighting	HiliteOwner: plainC.FHiliteOwner,	GetHiliteOffsets: plainC.FGetHiliteOffsets,//	Creating View Dependencies	TieViews: plainC.FTieViews,//	Laying Out Multiple Child Views	FormatVertical: plainC.FFormatVertical /* funcPtr: 6967961, numArgs: 2 */,//	Miscellaneous View Operations	GetViewId: plainC.FGetId,	GetViewFlags: plainC.FGetFlags,	GetTextFlags: plainC.FGetTextFlags /* funcPtr: 7054626, numArgs: 1 */,	Visible: func(view)	BAnd(GetViewFlags(view), vVisible) <> 0,	PackRGB: plainC.FPackRGB /* funcPtr: 7045102, numArgs: 3 */,	GetRed: plainC.FGetRed /* funcPtr: 7045103, numArgs: 1 */,	GetGreen: plainC.FGetGreen /* funcPtr: 7045104, numArgs: 1 */,	GetBlue: plainC.FGetBlue /* funcPtr: 7045105, numArgs: 1 */,	GetTone: plainC.FGetTone /* funcPtr: 7045106, numArgs: 1 */,	IsEqualTone: plainC.FIsEqualTone /* funcPtr: 7045107, numArgs: 2 */,	GetPopup: plainC.FGetPopup,	ClearPopup: plainC.FClearPopup,	DoPopup: plainC.FDoPopup /* funcPtr: 7034556, numArgs: 4 */,	DismissPopup: plainC.FDismissPopup,	SetPopupMark: func(popup, index)		begin		ClearPopupMark(popup);		popup[index] := { item: popup[index], mark: kCheckMarkChar }		end,	ClearPopupMark: func(popup)		begin		if IsArray(popup) then			foreach index, item in popup do				if IsFrame(item) then					popup[index] := item.item		end,	WhoIsUp: func(appSym)		begin		local app := GetView('viewFrontmostApp);		app := GetVariable(app, 'appSymbol);		if appSym = app then			true		end,	OtherViewInUse: plainC.FOtherViewInUse /* funcPtr: 7037725, numArgs: 1 */,	ComputeParagraphHeight: plainC.FComputeParagraphHeight /* funcPtr: 7027158, numArgs: 3 */,	PressButton: func(inView)		begin		if inView and inView.viewCObject and BAnd(inView.viewFlags, 1) <> 0 then			begin			vars._hiliteMenuItem := true;			inView:TrackHilite(nil);			if inView.viewCObject and BAnd(inView.viewFlags, 1) <> 0 then				inView:buttonClickScript();			if inView.viewCObject and BAnd(inView.viewFlags, 1) <> 0 then				inView:Hilite(nil);			vars._hiliteMenuItem := nil			end		end,}