{// Filing	RegFolderChanged: func(arg1, arg2)		begin		folderChangedRegistry.(EnsureInternal(arg1)) := arg2;		nil		end,	UnRegFolderChanged: func(arg1)		begin		RemoveSlot(folderChangedRegistry, arg1);		nil		end,	AddFolder: func(arg1, arg2)	begin		local local1, local2, local3, local4, local5, local6;		local1 := call func()		begin			local local1;			local1 := GetUserConfig('userFolderGroups);			if IsReadOnly(local1) then				(local1 := userConfiguration.userFolderGroups := DeepClone(local1));			local1		end with ();		local2 := GenFolderSym(arg1);		if not arg2 then			(arg2 := '_Global);		if not local2 or (arg2 = '_Global and local1._Global and Length(local1._Global) >= 12) or (arg2 <> '_Global and local1.(arg2) and Length(local1.(arg2)) >= 12) then			return;		local4 := GetUserConfig('userFolders).(local2);		local5 := SetContains(local1._Global, local2);		if not local4 then		begin			local6 := call func()			begin				local local1;				local1 := GetUserConfig('userFolders);				if IsReadOnly(local1) then					(local1 := userConfiguration.userFolders := Clone(local1));				local1			end with ();			local6.(local2) := Clone(arg1);		end;		else (if arg2 = '_Global and not local5 or (arg2 <> '_Global and local5) then			return);		local3 := if not local1.(arg2) then			(local1.(arg2) := [local2]);		else			SetAdd(local1.(arg2), local2, true);		if local3 then		begin			EntryChange(userConfiguration);			XmitFolderChange(nil, local2, arg2);		end;		local2	end,	RemoveFolder: func(arg1, arg2)	begin		local local1, local2, local3;		if not arg1 then			return;		if if GetUserConfig('userFolders).(arg1) then			arg2 <> '_System then		begin			local1 := call func()			begin				local local1;				local1 := GetUserConfig('userFolderGroups);				if IsReadOnly(local1) then					(local1 := userConfiguration.userFolderGroups := DeepClone(local1));				local1			end with ();			if not arg2 then				(arg2 := '_Global);			local2 := if local1.(arg2) then				(if SetRemove(local1.(arg2), arg1) then				(if Length(local1.(arg2)) = 0 and arg2 <> '_Global then				RemoveSlot(local1, arg2);			else				true));			if local2 then			begin				local3 := call func()				begin					local local1;					local1 := GetUserConfig('userFolders);					if IsReadOnly(local1) then						(local1 := userConfiguration.userFolders := Clone(local1));					local1				end with ();				if Length(GetFolderGroups(arg1)) = 0 then					RemoveSlot(local3, arg1);				EntryChange(userConfiguration);				if arg2 = '_Global or not(local1._Global and SetContains(local1._Global, arg1)) then					XmitFolderChange(arg1, nil, arg2);				arg1			end		end	end,	GenFolderSym:	func(folderName)		begin		if not StrFilled(folderName) then			return;		local canonName := Downcase(Clone(folderName));		foreach tag, name in GetUserConfig('userFolders) do			if StrExactCompare(Downcase(Clone(name)), canonName) = 0 then				return tag;		local local5 := Clone(folderName);		local local6 := 0;		local local7 := 0;		local local8 := StrLen(local5);		local local9 := nil;		while local6 < local8 do			begin			local7 := ORD(Downcase(local5[local6]));			if local7 > 127 then				begin				local local10 := Clone("BobE");				local10[0] := "0123456789ABCDEF"[BAnd(local7 >> 12, 15)];				local10[1] := "0123456789ABCDEF"[BAnd(local7 >> 8, 15)];				local10[2] := "0123456789ABCDEF"[BAnd(local7 >> 4, 15)];				local10[3] := "0123456789ABCDEF"[BAnd(local7, 15)];				if not local9 then					begin					local9 := true;					local10 := "\\u" & local10					end;				StrMunger(local5, local6, 1, local10, 0, nil);				local6 := local6 + StrLen(local10);				local8 := local8 + StrLen(local10) - 1				end			else				begin				if local9 then					begin					local9 := nil;					StrMunger(local5, local6, 0, "\\u", 0, nil);					local6 := local6 + 2;					local8 := local8 + 2;					end;				if local5[local6] = $: then					begin					StrMunger(local5, local6, 1, nil, 0, 0);					local8 := local8 - 1					end				else					local6 := local6 + 1				end			end;		local5 := StringFilter(local5, "_", 'rejectBeginning);		Intern(local5)		end,	GetFolderStr: func(arg1)	begin		if not arg1 then			"Unfiled";		else			GetUserConfig('userFolders).(arg1)	end,	CheckThatFolderExists: func(arg1)	begin		if if arg1.labels then			ClassOf(arg1.labels) = 'symbol then			(if SetContains(GetFolderList(nil, nil), arg1.labels) = nil then			(arg1.labels := nil))	end,	GetFolderList: func(arg1, arg2) GetAppFolderSyms(arg1, arg2, nil),	GetAppFolderSyms: func(arg1, arg2, arg3)	begin		local local1, local2;		local2 := GetUserConfig('userFolderGroups);		local1 := if if arg1 then			local2.(arg1) then			Clone(local2.(arg1));		else			[];		if not arg2 then			(local1 := SetUnion(local1, local2._Global, true));		if arg3 then			(local1 := SetUnion(local1, local2._System, true));		Sort(local1, '|str<|, functions.GetFolderStr)	end,	GetFolderGroups: func(arg1)	begin		local local1, local2, local3;		local1 := [];		foreach local2, local3 in GetUserConfig('userFolderGroups) do			if SetContains(local3, arg1) then				AddArraySlot(local1, local2);		local1	end,	RemoveAppFolders: func(arg1)	begin		local local1, local2, local3;		local1 := GetUserConfig('userFolderGroups);		local2 := GetUserConfig('userFolders);		if if if local1.(arg1) then			arg1 <> '_Global then			arg1 <> '_System then		begin			foreach local3 in local1.(arg1) do				if Length(GetFolderGroups(local3)) = 1 then				RemoveSlot(local2, local3);			RemoveSlot(local1, arg1)		end	end,	RenameFolder: func(arg1, arg2, arg3)	begin		local local1, local2, local3, local4, local5;		if not arg1 then			return;		if if GetUserConfig('userFolders).(arg1) then			arg3 <> '_System then		begin			local1 := call func()			begin				local local1;				local1 := GetUserConfig('userFolderGroups);				if IsReadOnly(local1) then					(local1 := userConfiguration.userFolderGroups := DeepClone(local1));				local1			end with ();			local2 := GenFolderSym(arg2);			if not arg3 then				(arg3 := '_Global);			if not local2 then				return;			local3 := call func()			begin				local local1;				local1 := GetUserConfig('userFolders);				if IsReadOnly(local1) then					(local1 := userConfiguration.userFolders := Clone(local1));				local1			end with ();			if arg1 = local2 then				(if SetContains(local1._System, arg1) then				nil;			else			begin				local3.(arg1) := Clone(arg2);				arg1			end);			else			begin				local4 := GetUserConfig('userFolders).(local2);				local5 := SetContains(local1._Global, local2);				if local4 and (arg3 = '_Global and not local5 or (arg3 <> '_Global and local5)) then					return;				local3.(local2) := Clone(arg2);				local1.(arg3)[SetContains(local1.(arg3), arg1)] := local2;				if Length(GetFolderGroups(arg1)) = 0 then					RemoveSlot(local3, arg1);				EntryChange(userConfiguration);				XmitFolderChange(arg1, local2, arg3);				local2			end		end	end,	XmitFolderChange: func(arg1, arg2, arg3)		GetRoot().folderEdit:BroadcastFolderChange(arg1, arg2, arg3),}