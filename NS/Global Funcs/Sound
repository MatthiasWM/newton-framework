{// Sound	RegSound: func(sndSym, snd)		begin		soundRegistry.(EnsureInternal(sndSym)) := snd;		nil		end,	GetRegisteredSound: func(sndSym)		begin		local snd := soundRegistry.(sndSym);		if not snd then			snd := soundRegistry.simpleBeep;		return snd		end,	SoundList: func()		begin		local sndList := [];		foreach sndSym, snd deeply in soundRegistry do			if soundRegistry.(sndSym) = snd then				AddArraySlot(sndList, {item: snd.userName, soundSymbol: sndSym});		Sort(sndList, '|str<|, 'item);		EnsureInternal(sndList)		end,	UnRegSound: func(sndSym)		begin		RemoveSlot(soundRegistry, sndSym);		nil		end,	VolumeToDecibels: plainC.FVolumeToDecibels/*volume*/,	DecibelsToVolume: plainC.FDecibelsToVolume/*decibels*/,	GetVolume: plainC.FGetVolume,	SetVolume: plainC.FSetVolume/*volume*/,	GetSystemVolume: plainC.FGetSystemVolume,	SetSystemVolume: plainC.FSetSystemVolume/*volume*/,	ConvertToSoundFrame: plainC.FConvertToSoundFrame/*sound*/,	SetInputGain: plainC.FSetInputGain/*gain*/,	SetOutputDevice: plainC.FSetOutputDevice/*device*/,	PlaySoundSync: plainC.FPlaySoundSync/*sound*/,	PlaySound: plainC.FPlaySound/*sound*/,	PlaySoundAtVolume: func(snd, vol)		begin		local sound := Clone(snd);		sound := ConvertToSoundFrame(sound);		sound.volume := vol;		PlaySound(sound)		end,	PlaySoundIrregardless: plainC.FPlaySoundIrregardless/*sound*/,	PlaySoundIrregardlessAtVolume: func(snd, vol)		begin		local sound := Clone(snd);		sound := ConvertToSoundFrame(sound);		sound.volume := vol;	//	PlaySoundIrregardless(sound)		end,	Clicker: plainC.FClicker,	PlaySoundEffect: plainC.FPlaySoundEffect/*sound,volume,type*/,	PlaySounds: func(arg1, arg2, arg3)		begin		local local1, local2;		local1 := {_proto: @431, direction: 'play};		local1:Open();		foreach local2 in arg1 do			local1:schedule(local2);		local1:start(arg2)		end,	RawDial: func(arg1, arg2)	begin		local local1, local2;		local1 := CommConfigRegistry.(arg2);		if local1 then		begin			local2 := {_proto: @662, _parent: self, configOptions: local1.config.configOptions, serviceId: local1.serviceId};			local2:Open(true);			local2:MakeOutgoing(arg1, nil);			if local1.serviceId and local1.supportsLineCurrentSense = nil then				GetRoot():Notify(6, GetRoot():TranslateToOverview(-8005), GetRoot():TranslateToMessage(-8005));			local2:Close()		end	end,	SoundCheck: plainC.FSoundCheck,	SoundPlayEnabled: plainC.FSoundPlayEnabled/*sound*/,}