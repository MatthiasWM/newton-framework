{// Transport Interface	RegTransport: func(sym, transport)	begin		local local1, local2, local4;		sym := EnsureInternal(sym);		if sym then		begin			local1 := GetRoot().(sym) := BuildContext(transport);			local1.appSymbol := sym;			local1.ownerApp := GetRoot().(local1.owner);			local1:?InstallScript(sym);			SetAdd(transports, sym, true);			if transport.registeredAddresses then				(if IsFrame(transport.registeredAddresses) then				RegisterMailService(transport.registeredAddresses);			else				foreach local2 in transport.registeredAddresses do					RegisterMailService(local2));			if transport.group and not GetUserConfig(sym) then			begin				local4 := GetUserConfig('transportGroups);				if local4 = nil then					local4 := {};				local4.(EnsureInternal(transport.group)) := EnsureInternal(transport.appSymbol);				SetUserConfig('transportGroups, local4);			end;		end;		sym	end,	UnRegTransport: func(sym)		begin		SetRemove(transports, sym);		RemoveSlot(GetRoot(), sym)		end,	DeleteTransport: func(sym)		begin		RemoveSlot(userConfiguration, sym);		FlushUserConfig()		end,	GetGroupTransport: func(groupSym)	begin		local local1, local2, local3, local5;		if groupSym = nil then			return;		local1 := GetUserConfig('transportGroups);		if local1 = nil then			(local1 := {});		local2 := local1.(groupSym);		if local2 = nil or GetRoot().(local2) = nil then			foreach local3 in transports do		begin			local5 := GetRoot().(local3);			if local5 and local5.group = groupSym then			begin				local2 := local1.(EnsureInternal(groupSym)) := EnsureInternal(local5.appSymbol);				SetUserConfig('transportGroups, local1);			end;		end;		local2	end,	GetCurrentFormat: func(item)	begin		local local1, local2, local3, local4, local6, local7, local8, local10, local11, local12;		local1 := nil;		if item = nil then			return;		if item.currentFormat = 'bogus then			return {	type: 'routeFormat,						symbol: 'bogus,						title: "bogus",						SetupItem: func(item, arg2) item };		if item.currentFormat = nil then		begin			local2 := GetRouteFormats(item);			if local2 then			begin				local3 := GetItemTransport(item);				foreach local4 in local2 do					if SetOverlaps(local3.dataTypes, local4.dataTypes) then					(local1 := local4);			end;			if local2 = nil and item.appSymbol and Routing.(item.appSymbol) then			begin				local6 := nil;				if item.faxResolution then					(local7 := 'faxSlip);				else					(local7 := 'printSlip);				foreach local8 in Routing.(item.appSymbol) do				begin					if local8.routeform = local7 then						(local6 := local8);					break;				end;				if local6 and local6.formats and Length(local6.formats) > 0 then					(local1 := local6.formats[0]);			end;		end;		else		begin			local10 := DataClassOf(item);			if local10 then			begin				local11 := GetViewDefs(local10);				if local11 then					(local1 := local11.(item.currentFormat));			end;			if local1 = nil then			begin				local12 := nil;				if item.appSymbol then					(local12 := GetRoot().(item.appSymbol));				if local12 = nil then					(local12 := GetRoot());				local1 := GetVariable(local12, item.currentFormat);			end;		end;		local1	end,}