{//	Stationery	RegStationeryChange: func(arg1, arg2)		begin		stationeryChangeRegistry.(EnsureInternal(arg1)) := arg2;		nil		end,	UnRegStationeryChange: func(arg1)		begin		RemoveSlot(stationeryChangeRegistry, arg1);		nil		end,	RegDataDef: func(dataDefSym, defTemplate)		begin		_dataDefs.(EnsureInternal(dataDefSym)) := defTemplate;		CallFrameBasedRegistryFns(stationeryChangeRegistry, ['install, 'dataDef, dataDefSym, nil]);		nil		end,	UnRegDataDef: func(dataDefSym)		begin		RemoveSlot(_dataDefs, dataDefSym);		CallFrameBasedRegistryFns(stationeryChangeRegistry, ['remove, 'dataDef, dataDefSym, nil]);		nil		end,//	undocumented pair	RegisterDataDef: func(dataDef)						RegDataDef(dataDef.symbol, dataDef),	UnregisterDataDef: func(dataDefSym)					UnRegDataDef(dataDefSym),	RegisterViewDef: func(viewDef, dataDefSym)		RegDataView(dataDefSym, viewDef),	UnregisterViewDef: func(viewDefSym, dataDefSym)	UnRegDataView(dataDefSym, viewDefSym),	GetDefs: func(form, symbols, types)		begin		local defs := [];		if form = 'dataDef then			begin			if symbols then				foreach dDef deeply in _dataDefs do					if SetContains(symbols, dDef.superSymbol) then						AddArraySlot(defs, dDef);			else				foreach dDef deeply in _dataDefs do					if dDef.superSymbol then						AddArraySlot(defs, dDef)			end		else if form = 'viewDef then			begin			if symbols then				foreach sym in symbols do					begin					local viewDefs := GetViewDefs(sym);					foreach vDef in viewDefs do						if types then							begin							if SetContains(types, vDef.type) then								AddArraySlot(defs, vDef)							end						else							AddArraySlot(defs, vDef)					end			end;		defs		end,	GetAppDataDefs: func(superSym)		begin		local defs := {};		foreach tag, dDef deeply in _dataDefs do			if dDef.superSymbol = superSym then				defs.(tag) := dDef;		if Length(defs) > 0 then			defs		end,	GetEntryDataDef: func(soupEntry)		begin		local dataDefSym := DataClassOf(soupEntry);		if dataDefSym then			_dataDefs.dataDefSym		end,	GetEntryDataView: func(soupEntry, viewDefSym)		begin		local dataDefSym := DataClassOf(soupEntry);		local vDef := if dataDefSym then			_viewdefs.(dataDefSym);		if not vDef or (vDef and not vDef.(viewDefSym)) then			GetDataView(dataDefSym, viewDefSym)		else			vDef.(viewDefSym)		end,	GetDataDefs: func(dataDefSym)	if dataDefSym then _dataDefs.(dataDefSym),	GetViewDefs: func(dataDefSym)	GetDataViews(dataDefSym),//	Undocumented!	SetDataClass: func(item, class) if item then SetClass(item, class),	DataClassOf: func(item)		begin		local class := nil;		if item then			begin			if IsFrame(item) then				begin				if item.body then					begin					class := DataClassOf(item.body);					if class = 'frame then						class := nil					end;				if class = nil then					class := item.class;				if not class then					class := item.viewStationery;				end;			if class = nil then				class := ClassOf(item)			end;		class		end,	RegDataView: func(arg1, arg2)		begin		local local1, local2;		local1 := EnsureInternal(arg2.symbol);		arg1 := EnsureInternal(arg1);		local2 := _viewdefs.(arg1);		if not local2 then			(local2 := _viewdefs.(arg1) := {});		else (if IsReadOnly(local2) then			(_viewdefs.(arg1) := local2 := Clone(_viewdefs.(arg1))));		if local2.(local1) exists then			return;		local2.(local1) := arg2;		CallFrameBasedRegistryFns(stationeryChangeRegistry, ['install, 'viewDef, arg1, local1])		end,	UnRegDataView: func(arg1, arg2)		begin		local local1, local2, local3;		local1 := _viewdefs;		if not local1 then			return;		local2 := local1.(arg1);		if not local2 then			return;		local3 := local2.(arg2);		if not local3 then			return;		if Length(local2) = 1 then			RemoveSlot(local1, arg1);		else		begin			if IsReadOnly(local2) then				(local1.(arg1) := Clone(local1.(arg1)));			RemoveSlot(local2, arg2);		end;		CallFrameBasedRegistryFns(stationeryChangeRegistry, ['remove, 'viewDef, arg1, arg2]);		local3		end,	GetDataViews: func(arg1)		begin		local local1;		local1 := if arg1 then			_viewdefs.(arg1);		if not local1 then			{ default: GetDataView(arg1, 'default) }		else			local1		end,//	End of Undocumented!	GetDataView: func(dataDefSym, viewDefSym)		begin		local local1, local2;		local1 := if dataDefSym then			_viewdefs.(dataDefSym);		if if if local1 then			viewDefSym then			local1.(viewDefSym) then			local1.(viewDefSym);		else (if local1 and local1.default then			local1.default;		else			begin			local1 := Clone(@590);			local2 := GetDataDefs(dataDefSym);			if local2 then				dataDefSym := local2.name;			local1.text := ParamStr("This uses stationery that is not installed and\ncannot be displayed. (^0)", [dataDefSym]);			local1			end)		end,}