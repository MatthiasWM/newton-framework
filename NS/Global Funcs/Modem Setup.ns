{// Modem Setup Service	GetCurrentModemSetup: func()		begin		GetModemSetUp(GetUserConfig('currentModem))		end,	RemoveModemSetUp: func(arg1)		begin		local setup := GetModemSetUp(arg1);		if IsSoupEntry(setup) then			begin			EntryRemoveFromSoupXmit(setup, '_newt);			true			end		end,	AddModemSetUp: func(setup)		begin		local local1 := GetModemSetUp(setup.modemName);		if local1 then			begin			if local1.version >= setup.version then				return			else if IsSoupEntry(local1) then				EntryRemoveFromSoupXmit(local1, '_newt)			end;		local soupEntry := GetStores()[0]:GetSoup(ROM_systemSoupName):Add(setup);		soupEntry.tag := soupEntry.modemName & ":ModemConfig";		EntryFlush(soupEntry);		XmitSoupChange(ROM_systemSoupName, '_newt, 'entryAdded, soupEntry);		true		end,	GetModemSetUp: func(modemName)		begin		local cursor := GetStores()[0]:GetSoup(ROM_systemSoupName):Query({indexPath: 'modemName, beginKey: modemName, endKey: modemName});		local soupEntry := cursor:Entry();		if not soupEntry then			soupEntry := BFetch(@217, arg1, '|str<|, 'modemName);		soupEntry		end,	GetAllModemSetUpNames: func()		begin		local setupNames := GetAllSoupBasedModemSetUpNames();		local builtinSetupNames := foreach setup in @217 collect			setup.modemName;		BMerge(setupNames, builtinSetupNames, '|str<|, nil, true)		end,	GetAllSoupBasedModemSetUpNames: func()		begin		local setupNames := [];		local cursor := GetStores()[0]:GetSoup(ROM_systemSoupName):Query({indexPath: 'modemName});		local soupEntry := cursor:Entry();		while soupEntry do			begin			AddArraySlot(setupNames, cursor:EntryKey());			soupEntry := cursor:Next()			end;		setupNames		end,	GetModemPopUpList: func()		begin		constant kBuiltinSetups := '[	"28.8 and faster",												"14.4 Normal",												"14.4 Alternate 1",												"14.4 Alternate 2" ];		local menu := GetAllModemSetUpNames();		foreach setupName in kBuiltinSetups do			BDelete(menu, setupName, '|str<|, nil, nil);		ArrayInsert(menu, 'pickseparator, 0);		ArrayMunger(menu, 0, 0, kBuiltinSetups, 0, nil);		menu		end,}