{// Built-in Communications Tools	OpenAppleTalk: plainC.FOpenAppleTalk /* funcPtr: 7037723, numArgs: 0 */,	CloseAppleTalk: plainC.FCloseAppleTalk /* funcPtr: 7034543, numArgs: 0 */,	AppleTalkOpenCount: plainC.FAppleTalkOpenCount /* funcPtr: 7034533, numArgs: 0 */,	HaveZones: plainC.FHaveZones /* funcPtr: 7036654, numArgs: 0 */,	GetMyZone: plainC.FGetMyZone /* funcPtr: 7035609, numArgs: 0 */,	GetZoneList: plainC.FGetZoneList /* funcPtr: 7036653, numArgs: 0 */,	GetZoneFromName: plainC.FGetZoneFromName /* funcPtr: 7036652, numArgs: 1 */,	GetNames: plainC.FGetNames /* funcPtr: 7035610, numArgs: 1 */,	NBPStart: plainC.FNBPStart /* funcPtr: 7037716, numArgs: 1 */,	NBPGetCount: plainC.FNBPGetCount /* funcPtr: 7037714, numArgs: 1 */,	NBPGetNames: plainC.FNBPGetNames /* funcPtr: 7037715, numArgs: 1 */,	NBPStop: plainC.FNBPStop /* funcPtr: 7037717, numArgs: 1 */,	NBPStartLookup: plainC.FNBPStartLookup /* funcPtr: 7037712, numArgs: 1 */,	NBPLookupCount: plainC.FNBPLookupCount /* funcPtr: 7037711, numArgs: 0 */,	NBPGetLookupNames: plainC.FNBPGetLookupNames /* funcPtr: 7037710, numArgs: 0 */,	NBPStopLookup: plainC.FNBPStopLookup /* funcPtr: 7037713, numArgs: 0 */,	RegCommConfig: func(sym, arg2)		begin		commConfigRegistry.(EnsureInternal(sym)) := arg2;		nil		end,	RegCommConfigArray: func(arg1)		begin		if IsArray(arg1) then			foreach local1 in arg1 do				RegCommConfig(local1.uniqueId, local1);		else			RegCommConfig(arg1.uniqueId, arg1);		nil		end,	UnRegCommConfig: func(sym)		begin		RemoveSlot(commConfigRegistry, sym);		nil		end,	RegCommConfigChange: func(sym, arg2)		begin		commConfigChangeRegistry.(EnsureInternal(sym)) := arg2;		nil		end,	UnRegCommConfigChange: func(sym)		begin		RemoveSlot(commConfigChangeRegistry, sym);		nil		end,	GetCommConfig: func(arg1, arg2, arg3)		begin		local commConfig := [];		foreach tag, config deeply in commConfigRegistry do			if arg2 = nil or (config.type <> nil and StrEqual(config.type, arg2)) and (arg3 = nil or (config.serviceId <> nil and StrEqual(config.serviceId, arg3))) and (arg1 = nil or (config.name <> nil and StrEqual(config.name, arg1))) and not SetContains(commConfig, tag) then				AddArraySlot(commConfig, tag);		commConfig		end,	UnRegCommConfigArray: func(arg1)		begin		if IsArray(arg1) then			foreach local1 in arg1 do				UnRegCommConfig(local1.uniqueId);		else			UnRegCommConfig(arg1.uniqueId);		nil		end,	GetTAPICommFrame: func(sym)		begin		local telephoneFrame;		if sym and (telephoneFrame := commConfigRegistry.(sym)) then			telephoneFrame		else			{name: "Telephone"}		end,	StartIRSniffing: plainC.FStartIRSniffing /* funcPtr: 6982769, numArgs: 0 */,	StopIRSniffing: plainC.FStopIRSniffing /* funcPtr: 6982774, numArgs: 0 */,	OpenRemoteControl: plainC.FOpenRemoteControl /* funcPtr: 7037724, numArgs: 0 */,	SendRemoteControlCode: plainC.FSendRemoteControlCode /* funcPtr: 7018706, numArgs: 3 */,	CloseRemoteControl: plainC.FCloseRemoteControl /* funcPtr: 7034544, numArgs: 1 */,	LoadHardwareEntry: func()		begin		local local1 := GetUserConfig('modemHardwareLocation);		local local2 := GetUserConfig('appletalkLink);		local local3 := {_proto: @499};		local3:Instantiate("mods", "DefHWLoc");		local3:SetDefaultConfig(if StrFilled(local1) then local1);		local3:Dispose();		local3:Instantiate("atlk", "DefATLink");		local3:SetDefaultConfig(if StrFilled(local2) then local2 else "llap");		local3:Dispose()		end,}