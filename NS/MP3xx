/*------------------------------------------------------------------------------	Get required resources.------------------------------------------------------------------------------*///OpenResFile(home & "Resources1");//DefineGlobalConstant('kIcon_mail,     GetPictAsBits("email", nil));//DefineGlobalConstant('kSoundPackage,	 GetNamedResource("pkg ", "sound", 'package));//CloseResFile();DefineGlobalConstant('kPlaceList,{	_proto: @665,	preallocatedContext: 'placeList,	viewSetupFormScript: func()		begin		if options then			foreach tag, value in options do				self.(tag) := value;		inherited:?viewSetupFormScript()		end,	viewQuitScript: func()		begin		inherited:?viewQuitScript();		if context and context.pickActionScript then			'postQuit		end,	viewPostQuitScript: func()		begin		context:pickActionScript(selected)		end});DefineGlobalConstant('kBatteryGauge,{	_proto: protoGauge,	preallocatedContext: 'gauge,	viewBounds: SetBounds(0, 0, 0, 9),	viewJustify: vjParentFullH + vjParentTopV,	viewSetupFormScript: func()		nil});DefineGlobalConstant('kBatteryLabel,{	_proto: protoStaticText,	preallocatedContext: 'batteryLabelForm,	viewFlags: vVisible + vClickable,	viewBounds: SetBounds(0, -12, 0, 0),	viewJustify: vjCenterH + vjParentFullH + vjParentBottomV,	viewFont: ROM_fontSystem9,	text: "Battery",	lastClick: 0,	viewClickScript: func(unit)		begin		local thisClick := Ticks();		if thisClick - lastClick < 30 and HasSlot(GetRoot(), 'batteryInfo) then			GetRoot().batteryInfo:Open()		else			lastClick := thisClick;		true		end});/*------------------------------------------------------------------------------	Magic pointers 299 - 397------------------------------------------------------------------------------*/mp3xx := [/*------------------------------------------------------------------------------	@299	ROM_tickSound*/	{},/*------------------------------------------------------------------------------	@300	ROM_tockSound*/	{},/*------------------------------------------------------------------------------	@301	ROM_cuckooSound*/	{},/*------------------------------------------------------------------------------	@302	ROM_ratchetSound*/	{},/*------------------------------------------------------------------------------	@303	ROM_addSound*/	{},/*------------------------------------------------------------------------------	@304	ROM_removeSound*/	{},/*------------------------------------------------------------------------------	@305	protoLetterFormat*/	{},/*------------------------------------------------------------------------------	@306			TickleIAProgress*/	func(inStatusDialog)		begin		try			inStatusDialog:SetStatus('vBarber, { barber: true })		onexception |evt.ex.cancel| do			Rethrow()		end,/*------------------------------------------------------------------------------	@307			Extras soup def.*/	{  name: "Packages",		userName: "Extras",		ownerApp: 'extrasDrawer,		ownerAppName: "Extras",		userDescr: "private",		indexes: [{ structure: 'slot, type: 'tags, path: '_tagList, tags: '[_icon, _package, _frozen, _noBackup, _buttonBar, _soups, _extensions, _setup, _help] },					 { structure: 'slot, path: 'packageName, type: 'string },					 { structure: 'slot, path: 'sequence, type: 'int }] },/*------------------------------------------------------------------------------	@308*/	{},/*------------------------------------------------------------------------------	@309	newtEntryPageHeader*/	{},/*------------------------------------------------------------------------------	@310			Zone Chooser.*/	{},/*------------------------------------------------------------------------------	@311	ROM_cancelBitmap*/	{		mask: MakeBinaryFromHex("00000000000401C501C5025E01CE0267C1800000E38000004100000000000000000000000000000041000000E3800000C1800000", 'mask),		bits: MakeBinaryFromHex("00000000000401C501C5025E01CE0267C1800000E3800000770000003E0000001C0000003E00000077000000E3800000C1800000", 'bits),		bounds: SetBounds(0, 0, 9, 9)	},/*------------------------------------------------------------------------------	@312			Routing icon.*/	{	bits: MakeBinaryFromHex("0000000000040233023301EB023E01F800000000FFF80000FFF80000E0380000F0780000D8D80000CD980000C7180000C0180000FFF80000FFF80000", 'bits),		bounds: SetBounds(0, 0, 13, 11)	},/*------------------------------------------------------------------------------	@313	ROM_plunk*/	{	sndFrameType: 'codec,		samplingRate: MakeBinaryFromHex("2A300000", 'fixed),		codecName: "TIMACodec",		dataType: 16,		bufferSize: 10240,		bufferCount: 4,		compressionType: 6,		compressionRatio: 1.88235294117647,		samples: MakeBinaryFromHexsamples)	},/*------------------------------------------------------------------------------	@314  ROM_poof*/	{  sndFrameType: 'codec,		samplingRate: MakeBinaryFromHex("2A300000", 'fixed),		codecName: "TIMACodec",		dataType: 16,		bufferSize: 10240,		bufferCount: 4,		compressionType: 6,		compressionRatio: 1.88235294117647,		samples: MakeBinaryFromHexsamples)	},/*------------------------------------------------------------------------------	@315			protoBatteryGauge?*/	{  viewClass: clView,		viewFlags: vVisible + vReadOnly,		viewBounds: nil,		viewIdleFrequency: 10000,		viewIdleScript: func()			begin			:ReadBattery(nil);			viewIdleFrequency			end,		viewSetupChildrenScript: func()			begin			if BatteryCount() < 1 then				begin				gauge.viewFlags := 0;				if batteryLabelForm then					batteryLabelForm.viewFlags := 0				end			end,		viewSetupDoneScript: func()			begin			if gauge.viewFlags <> 0 then				begin				:ReadBattery(nil);				:SetupIdle(viewIdleFrequency);				self.powerStatusChangeSym := Intern("batteryGauge." & viewCObject);				RegPowerStatusChange(powerStatusChangeSym, func(status) :ReadBattery(status) )				end			end,		viewQuitScript: func()			begin			if self.powerStatusChangeSym then				UnRegPowerStatusChange(powerStatusChangeSym)			end,		ReadBattery: func(status)			begin			if not status then				status := BatteryStatus(0);			if batteryLabelForm then				begin				local statusMsg;				if status.chargeState = 'preliminaryCharge or status.chargeState = 'fastCharging then					statusMsg := "Charging"				else if status.chargeState = 'deepToast then					statusMsg := "Fault"				else if status.chargeState = 'trickleCharge or status.chargeState = 'trickleChargeContinuous then					statusMsg := "Charged"				else if status.acPower = 'yes and status.chargeState = 'discharging and (status.batteryType = 'nicd or status.batteryType = 'nimh) then					statusMsg := "Waiting"				else if status.acPower = 'yes then					statusMsg := "Adapter"				else					statusMsg := "Battery";				if batteryLabelForm.text <> statusMsg then					SetValue(batteryLabelForm, 'text, statusMsg)				end;			if gauge.viewValue <> status.batteryCapacity then				SetValue(gauge, 'viewValue, status.batteryCapacity)			end,		viewChildren: [ viewChildren: 			kBatteryGauge		],		gauge: nil,		batteryLabelForm: nil,  // is in protoLabeledBatteryGauge!		allocateContext: [			'gauge, kBatteryGauge		]	},/*------------------------------------------------------------------------------	@316	protoLabeledBatteryGauge*/	{		_proto: @315,		viewChildren: [ viewChildren: 			kBatteryGauge,			kBatteryLabel		],	//	gauge: nil,		is in proto		batteryLabelForm: nil,		allocateContext: [			'gauge, kBatteryGauge,			'batteryLabelForm, kBatteryLabel		]	},/*------------------------------------------------------------------------------	@317	protoDatePopup*/	{		_proto: protoGeneralPopup,		viewBounds: SetBounds(0, 0, 135, 156),		viewJustify: vjLeftH + vjTopV,		selectedDates: nil,		dates: nil,		stepChildren: [ stepChildren: /*			kRef444009*/		],		picker: nil,		stepallocatecontext: [/*			'picker, kRef444009*/		],		New: func(arg1, arg2, arg3)			begin			local local1, local2;			local1 := :Init();			local1.context := arg3;			local1.dates := arg1;			local2 := if arg1 then				arg1			else				[Time()];			if Date(local2[0]).year = 2920 then				(local1.viewBounds := RelBounds(0, 0, 135, 128));			local1:popup(arg2)			end,		Affirmative: func()			begin			context:?pickActionScript(picker.selectedDates)			end,	},/*------------------------------------------------------------------------------	@318*/	{ },/*------------------------------------------------------------------------------	@319*/	{ },/*------------------------------------------------------------------------------	@320  SYS_lightBulbPicture			Newton logo drawn at reset time.*/	MakeBinaryFromHex("89504E470D0A1A0A0000000D494844520000005A000000760403000000BAE8997C0000000467414D410000D90342D64FA100000030504C5445FFFFFFEEEEEEDDDDDDCCCCCCBBBBBBAAAAAA9999998888887777776666665555554444443333332222221111110000006F80BC41000000097048597300000B1300000B1301009A9C180000002474455874536F66747761726500517569636B54696D6520362E352E3120284D6163204F53205829004B23F8CA0000000774494D4507D4050D003B2E9F9541C30000029249444154789CDD9851D6AD2008859901F39F2533F01E15526063B5FE9E6E0F67957DE15641F0500317316AED2F409B506E157E43CFA6E73417B4BE7A41877689B4ECB7510B05DDB2771F691B09A62508B7E79D8663D0BE9AA77BEFD5125E5DB9A1950B6E14ED6D9594CBCC0E54C6D7DC926BC5C609D29516824A2A1C2B715AFAFCA74F933F6C6CE6AB7111C48B689894C4F505F46E31184731456E81F94407AD7EC5229D7C6B3DFFA63DD2C95796B7C268CD9D5D0A897C50E5E59335997105623C2E03DB7AB17F03E8D1C34FF78E23D393568464D302FD55E979DF56B443D3B3D1ED27361260DA99D835C020862BFF23A1104C37B7C9AE3752F9A0972D36968AF661B25605D1D161F65541B4D7D1B938704CCB65BA15B48F46687AA7F74432E81C1A88EE54D775D8D964F7726EE3839C6333AD9E0FF377A6A764469922D38302FB2BA445271AC751A475A271C68AAB733913CE4089E6965C0FD27C7D2318F699BB59B5555D913E5F8FF23CA20F4504A6EF8CFB1AE20E07C1F890BE371E779C339E6A88A3969CD34EC673BE3CE1203D1EB4A0FC581B8735C40BFAE42E309DBEA10F8EFE671AE7CD03FDE62C050BC76F680945CBBDEDA264858DD556F505FD6A4EEA61FE9DD6FCF0504951057D43976E75F09353BE04F421176F97BCA2754F0153F8C99C60F80BBA4CB1F719F57FA169DD3EA1C31F183734BDA3ABBF97A26369F157D0A846D653234DE713FB3B48787AEEF0DE59A8CE3999F5E54CAD1B3DC26DFC68BD60D8F87094BBA27DF4279A7B622F98599F9BF646D691D1531C0F4DE3D7E8F1EDD0F0EB9F1B5975AF03254F77E37AD4E4D14AC36845F7F2DCE82E9D980E74EFDC42A6DF08DB88202D449612D6E9A518A52AE76693D6F4802B3A8391966B0D162DD7EA447A5A1DF77C39D43C71989EF60FE760A18A35A076A40000000049454E44AE426082", 'picture),/*------------------------------------------------------------------------------	@321	ROM_worldMapBitmap*/	{},/*------------------------------------------------------------------------------	@322  ROM_phoneBitmap*/	{	bits: MakeBinaryFromHex("000000000004008B008B00BF009400CC1FC000007FF00000F8F80000EFB800000D80000018C000003DE000003FE000003FE00000", 'bits),		bounds: SetBounds(0, 0, 13, 9)	},/*------------------------------------------------------------------------------	@323  ROM_upBitmap*/	{	bits: MakeBinaryFromHex("000000000004004900490097005500A900C0000001E0000003F0000007F800000FFC00001FFE00003FFF00007FFF8000FFFFC000FFFFC00007F8000007F80000", 'bits),		bounds: SetBounds(0, 0, 18, 12)	},/*------------------------------------------------------------------------------	@324  ROM_downBitmap*/	{	bits: MakeBinaryFromHex("000000000004006800680097007400A907F8000007F80000FFFFC000FFFFC0007FFF80003FFF00001FFE00000FFC000007F8000003F0000001E0000000C00000", 'bits),		bounds: SetBounds(0, 0, 18, 12)	},/*------------------------------------------------------------------------------	@325  ROM_leftBitmap*/	{  mask: MakeBinaryFromHex("000000000004018D018D00D5019900DF000000000000000008000000180000003F8000007F8000007F8000003F80000018000000080000000000000000000000", 'mask),		bits: MakeBinaryFromHex("000000000004001F001F00BB002B00C5040000000C0000001C0000003FC000007FC00000FFC00000FFC000007FC000003FC000001C0000000C00000004000000", 'bits),		bounds: SetBounds(0, 0, 10, 12)	},/*------------------------------------------------------------------------------	@326  ROM_rightBitmap*/	{	mask: MakeBinaryFromHex("000000000004018D018D013C01990146000000000000000004000000060000007F0000007F8000007F8000007F00000006000000040000000000000000000000", 'mask),		bits: MakeBinaryFromHex("000000000004001F001F00BB002B00C5080000000C0000000E000000FF000000FF800000FFC00000FFC00000FF800000FF0000000E0000000C00000008000000", 'bits),		bounds: SetBounds(0, 0, 10, 12)	},/*------------------------------------------------------------------------------	@327  ROM_upArrowBitmap*/	{		unhilited: {			bounds: SetBounds(0, 0, 18, 17),			mask: MakeBinaryFromHex("0000000000040000000000000011001200C0000001E0000003F0000007F800000FFC00001FFE00003FFF00007FFF8000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC0000FFC00000FFC00000FFC000007F80000", 'mask),			colorData: [				{	cbits: MakeBinaryFromHex("00000000000C0000000000000011001200000000000000000000000000000000FF000000000000000000000FFFF0000000000000000000FFFFFF00000000000000000FFFFFFFF000000000000000FFFFFFFFFF0000000000000FFFFFFFFFFFF00000000000FFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFF00000000000FFFFFFFF0000000000000000FFFFFFFF0000000000000000FFFFFFFF00000000000000000FFFFFF000000000000000000000000000000000000", 'cbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("000000000004000000000000001100120000000000C0000001E0000003F0000007F800000FFC00001FFE00003FFF00007FFF8000FFFFC000FFFFC000FFFFC00007F8000007F8000007F8000003F0000000000000", 'bits),					bitdepth: 1 }			]		},		hilited: {			bounds: SetBounds(0, 0, 18, 17),			mask: MakeBinaryFromHex("0000000000040000000000000011001200C0000001E0000003F0000007F800000FFC00001FFE00003FFF00007FFF8000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC0000FFC00000FFC00000FFC000007F80000", 'mask),			colorData: [				{	cbits: MakeBinaryFromHex("00000000000C0000000000000011001200000000000000000000000000000000FF000000000000000000000FFFF0000000000000000000FFFFFF00000000000000000FFFAAFFF000000000000000FFFA66AFFF0000000000000FFFA6006AFFF00000000000FFFA600006AFFF000000000FFFA60000006AFFF0000000FFFAA66000066AAFFF000000FFFFFFF0000FFFFFFF000000FFFFFFF0000FFFFFFF00000000000FF0000FF0000000000000000FFAAAAFF0000000000000000FFFFFFFF00000000000000000FFFFFF000000000000000000000000000000000000", 'cbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("000000000004000000000000001100120000000000C0000001E0000003F0000007F800000F3C00001E1E00003C0F000078078000F003C000FE1FC000FF3FC0000738000007F8000007F8000003F0000000000000", 'bits),					bitdepth: 1 }			]		},		bw:{			mask: MakeBinaryFromHex("00000000000400000000000000110012000000000000000000000000000000000000000000C0000001E0000003F0000007F800000FFC000001E0000000C0000000C0000000000000000000000000000000000000", 'mask),			bits: MakeBinaryFromHex("000000000004000000000000001100120000000000C0000001E0000003F0000007F800000FFC00001FFE00003FFF00007FFF8000FFFFC000FFFFC000FFFFC00007F8000007F8000007F8000003F0000000000000", 'bits),			bounds: SetBounds(0, 0, 18, 17)		}	},/*------------------------------------------------------------------------------	@328  ROM_downArrowBitmap*/	{	unhilited: {		bounds: SetBounds(0, 0, 18, 17),		mask: MakeBinaryFromHex("0000000000040000000000000011001207F800000FFC00000FFC00000FFC0000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC0007FFF80003FFF00001FFE00000FFC000007F8000003F0000001E0000000C00000", 'mask),		colorData: [			{  cbits: MakeBinaryFromHex("00000000000C00000000000000110012000000000000000000000000000000FFFFFF00000000000000000FFFFFFFF0000000000000000FFFFFFFF0000000000000000FFFFFFFF00000000000FFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFF00000000000FFFFFFFFFFFF0000000000000FFFFFFFFFF000000000000000FFFFFFFF00000000000000000FFFFFF0000000000000000000FFFF000000000000000000000FF00000000000000000000000000000000000000", 'cbits),				bitdepth: 4 },			{	cbits: MakeBinaryFromHex("000000000004000000000000001100120000000003F0000007F8000007F8000007F80000FFFFC000FFFFC000FFFFC0007FFF80003FFF00001FFE00000FFC000007F8000003F0000001E0000000C0000000000000", 'bits),				bitdepth: 1 }		]	},	hilited: {		bounds: SetBounds(0, 0, 18, 17),		mask: MakeBinaryFromHex("0000000000040000000000000011001207F800000FFC00000FFC00000FFC0000FFFFC000FFFFC000FFFFC000FFFFC000FFFFC0007FFF80003FFF00001FFE00000FFC000007F8000003F0000001E0000000C00000", 'mask),		colorData: [			{	cbits: MakeBinaryFromHex("00000000000C00000000000000110012000000000000000000000000000000FFFFFF00000000000000000FFFFFFFF0000000000000000FFAAAAFF0000000000000000FF0000FF00000000000FFFFFFF0000FFFFFFF000000FFFFFFF0000FFFFFFF000000FFFAA66000066AAFFF0000000FFFA60000006AFFF000000000FFFA600006AFFF00000000000FFFA6006AFFF0000000000000FFFA66AFFF000000000000000FFFAAFFF00000000000000000FFFFFF0000000000000000000FFFF000000000000000000000FF00000000000000000000000000000000000000", 'cbits),				bitdepth: 4 },			{	cbits: MakeBinaryFromHex("000000000004000000000000001100120000000003F0000007F8000007F8000007380000FF3FC000FE1FC000F003C000780780003C0F00001E1E00000F3C000007F8000003F0000001E0000000C0000000000000", 'bits),				bitdepth: 1 }		]	},	bw: {		mask: MakeBinaryFromHex("000000000004000000000000001100120000000000000000000000000000000000C0000000C0000001E000000FFC000007F8000003F0000001E0000000C000000000000000000000000000000000000000000000", 'mask),		bits: MakeBinaryFromHex("000000000004000000000000001100120000000003F0000007F8000007F8000007F80000FFFFC000FFFFC000FFFFC0007FFF80003FFF00001FFE00000FFC000007F8000003F0000001E0000000C0000000000000", 'bits),		bounds: SetBounds(0, 0, 18, 17)	}},/*------------------------------------------------------------------------------	@329  ROM_overviewBitmap*/	{		unhilited: {			bounds: SetBounds(0, 0, 17, 16),			mask: MakeBinaryFromHex("0000000000040000000000000010001107F000001FFC00003FFE00007FFF00007FFF0000FFFF8000FFFF8000FFFF8000FFFF8000FFFF8000FFFF80007FFF00007FFF00003FFE00001FFC000007F00000", 'mask),			colorData: [				{	cbits: MakeBinaryFromHex("00000000000C0000000000000010001100000000000000000000000000000EFFFFFE000000000000000EFFFFFFFFFE000000000000EFFFFFFFFFFFE00000000000FFFFFFFFFFFFF0000000000EFFFFFFFFFFFFFE000000000FFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFE0000000000FFFFFFFFFFFFF00000000000EFFFFFFFFFFFE000000000000EFFFFFFFFFE000000000000000EFFFFFE000000000000000000000000000000000000", 'cbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("000000000004000000000000001000110000000007F000001FFC00003FFE00003FFE00007FFF00007FFF00007FFF00007FFF00007FFF00007FFF00003FFE00003FFE00001FFC000007F0000000000000", 'bits),					bitdepth: 1 }			]		},		hilited: {			bounds: SetBounds(0, 0, 17, 16),			mask: MakeBinaryFromHex("0000000000040000000000000010001107F000001FFC00003FFE00007FFF00007FFF0000FFFF8000FFFF8000FFFF8000FFFF8000FFFF8000FFFF80007FFF00007FFF00003FFE00001FFC000007F00000", 'mask),			colorData: [				{  cbits: MakeBinaryFromHex("00000000000C00000000000000100011000000000000000000000000000006FFFFF60000000000000006FFFEEEFFF30000000000006FFEA767AEFF300000000000FFE9600069EFF00000000006FFB6000006BFF6000000000FFE800000008EFF000000000FFE600000006EFF000000000FFE600000006EFF000000000FFE800000008EFF0000000006FFB6000006BFF60000000000FFE9600069EFF000000000006FFEA767AEFF30000000000006FFEEEEEFF30000000000000006FFFFF6000000000000000000000000000000000000", 'cbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("000000000004000000000000001000110000000007F000001FFC00003FFE00003C1E0000780F000070070000700700007007000070070000780F00003C1E00003FFE00001FFC000007F0000000000000", 'bits),					bitdepth: 1 }			]		},		bw: {			mask: MakeBinaryFromHex("000000000004000000000000001000110000000000000000000000000000000003E0000007F000000FF800000FF800000FF800000FF8000007F0000003E0000000000000000000000000000000000000", 'mask),			bits: MakeBinaryFromHex("000000000004000000000000001000110000000007F000001FFC00003FFE00003FFE00007FFF00007FFF00007FFF00007FFF00007FFF00007FFF00003FFE00003FFE00001FFC000007F0000000000000", 'bits),			bounds: SetBounds(0, 0, 17, 16)		}	},/*------------------------------------------------------------------------------	@330*/	{		unhilited: {			bounds: SetBounds(0, 0, 32, 25),			mask: MakeBinaryFromHex("00000000000400000000000000190020007FFE0003FFFFC00FFFFFF01FFFFFF83FFFFFFC7FFFFFFE7FFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFE7FFFFFFE3FFFFFFC1FFFFFF80FFFFFF003FFFFC0007FFE000000000000000000", 'mask),			colorData: [				{  cbits: MakeBinaryFromHexcbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("0000000000040000000000000019002000000000000FF000007FFE0001FFE380071FE8E00C7FD87018FFFE1830FFCE0C337F808C73FF01F6789F003E7D1F803E7E07E07E7E07F0FE3F07F0FC3F8FF1FC1F8FE3F80F9FF7F0079FFFE001DFFF80007FFE00000FF000000000000000000000000000", 'bits),					bitdepth: 1 }			]		},		hilited: {			bounds: SetBounds(0, 0, 32, 25),			mask: MakeBinaryFromHex("00000000000400000000000000190020007FFE0003FFFFC00FFFFFF01FFFFFF83FFFFFFC7FFFFFFE7FFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFE7FFFFFFE3FFFFFFC1FFFFFF80FFFFFF003FFFFC0007FFE000000000000000000", 'mask),			colorData: [				{	cbits: MakeBinaryFromHexcbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("0000000000040000000000000019002000000000000FF000007FFE0001FABF8007F47FE00FE01FF01FC001F83FC039FC37407FB46700FF0E73B0FFF669787FEE74FE1FF668FE0FCE347E0F9C3A3C0FAC1D380F580EB01EB007755DE001FAAF80007FFE00000FF000000000000000000000000000", 'bits),					bitdepth: 1 }			]		}	},/*------------------------------------------------------------------------------	@331  ROM_keyCapsBitmap*/	{  mask: MakeBinaryFromHex("000000000004012C012C0018013B003700000000000000003FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF81FFFFFF00000000000000000", 'mask),		bits: MakeBinaryFromHex("000000000004012C012C0018013B00377FFFFFFCFFFFFFFEC0000006D6DB6DB6D6DB6DB6C0000006CDB6DB66CDB6DB66C0000006DB7FFDB6DB7FFDB6C0000006E000000E7FFFFFFC3FFFFFF8", 'bits),		bounds: SetBounds(0, 0, 31, 15)	},/*------------------------------------------------------------------------------	@332  ROM_keyButtBitmap*/	{  mask: MakeBinaryFromHex("000000000004003800380097004900B600000000000000003FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF83FFFFFF81FFFFFF00000000000000000", 'mask),		bits: MakeBinaryFromHex("000000000004017401740187018501A67FFFFFFCFFFFFFFEC0000006DB6DB6D6DB6DB6D6C0000006D6DB6DB6D6DB6DB6C0000006CDB6DB66CDB6DB66C0000006C0FFFE06C0FFFE06E000000E7FFFFFFC3FFFFFF8", 'bits),		bounds: SetBounds(0, 0, 31, 17)	},/*------------------------------------------------------------------------------	@333*/	{		unhilited: {			bounds: SetBounds(0, 0, 22, 27),			mask: MakeBinaryFromHex("000000000004000000000000001B001600000000000000001FFFE0001FFFE0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0003FFFF0001FFFE0001FFFE00000000000", 'mask),			colorData: [				{	cbits: MakeBinaryFromHexcbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("000000000004000000000000001B001600000000000000000000000007FF80000FFFC0000FFFC0000C00C0000C00C0000C00C0000FFFC0000FFFC0000CCCC0000CCCC0000FFFC0000CCCC0000CCCC0000FFFC0000CCCC0000CCCC0000FFFC0000CCCC0000CCCC0000FFFC00007FF8000000000000000000000000000", 'bits),					bitdepth: 1 }			]		},		hilited: {			bounds: SetBounds(0, 0, 22, 27),			mask: MakeBinaryFromHex("000000000004000000000000001B00163FFFF8007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFFC007FFFF8003FFFF800", 'mask),			colorData: [				{	cbits: MakeBinaryFromHex("00000000000C000000000000001B00160000000000000000000000000008FFFFFFFFFFFFFFF80000003FFFFFFFFFFFFFFFFF3000005FF8888888888888FF5000005FF8333333333338FF5000005FF3000000000003FF5000005FF3000000000003FF5000005FFFFFFFFFFFFFFFFF5000005FFFFFFFFFFFFFFFFF5000005FF000FF000FF000FF5000005FF000FF000FF000FF5000005FFFFFFFFFFFFFFFFF5000005FFFFFFFFFFFFFFFFF5000005FF000FF000FF000FF5000005FF000FF000FF000FF5000005FFFFFFFFFFFFFFFFF5000005FFFFFFFFFFFFFFFFF5000005FF000FF000FF000FF5000005FF000FF000FF000FF5000005FFFFFFFFFFFFFFFFF5000005FFFFFFFFFFFFFFFFF5000005FF000FF000FF000FF5000005FF000FF000FF000FF5000005FFFFFFFFFFFFFFFFF50000008FFFFFFFFFFFFFFF80000000555555555555555550000000000000000000000000000", 'cbits),					bitdepth: 4 },				{	cbits: MakeBinaryFromHex("000000000004000000000000001B0016000000001FFFC0003FFFE0003FFFE0003000600030006000300060003FFFE0003FFFE00035AD6000318C60003FFFE0003FFFE00035AD6000318C60003FFFE0003FFFE00035AD6000318C60003FFFE0003FFFE00035AD6000318C60003FFFE0001FFFC0000000000000000000", 'bits),					bitdepth: 1 }			]		}	},/*------------------------------------------------------------------------------	@334  ROM_goAwayBitmap*/	{	mask: MakeBinaryFromHex("0000000000040041004101EC004E01F900000000000000000000000018C000001DC000000880000000000000088000001DC0000018C00000000000000000000000000000", 'mask),		bits: MakeBinaryFromHex("0000000000040041004101D7004E01E47FF00000FFF80000C0180000D8D80000DDD80000CF980000C7180000CF980000DDD80000D8D80000C0180000FFF800007FF00000", 'bits),		bounds: SetBounds(0, 0, 13, 13)	},/*------------------------------------------------------------------------------	@335*/	{},/*------------------------------------------------------------------------------	@336*/	{},/*------------------------------------------------------------------------------	@337*/	{},/*------------------------------------------------------------------------------	@338*/	{},/*------------------------------------------------------------------------------	@339  protoAZVertTabs*/	{},/*------------------------------------------------------------------------------	@340  ROM_AZTabsMaskA*/	{},/*------------------------------------------------------------------------------	@341*/	{	_proto: @680,		viewClass: 0x5E,		viewFlags: vReadOnly,		fields: nil,		printView: nil,		_setupChildrenNow: nil,		Render: func()			begin			_setupChildrenNow := true;			:?viewSetupChildrenScript();			PostCommand(self, 56)			end	},/*------------------------------------------------------------------------------	@342  ROM_markupBitmap*/	{},/*------------------------------------------------------------------------------	@343  ROM_noMarkupBitmap*/	{},/*------------------------------------------------------------------------------	@344  ROM_bookmarkBitmap*/	{},/*------------------------------------------------------------------------------	@345			protoDictionaryCursor (private)*/	{	dict: nil,		cursor: nil,		index: nil,		validTest: nil,		currentEntry: nil,		Initialize: func(arg1, arg2, arg3)			begin			self.prefix := arg1;			self.pin := arg2;			self.loc := arg3;			self.currentEntry := {};			self.currentEntry := {word: nil, attribute: nil, terminalClass: nil};			:PrivateReset(arg1, arg2, arg3)			end,		Dispose: func()			begin			if dict then				begin				SetRemove(dict.cursors, self);				RemoveSlot(self, 'dict)				end;			:PrivateDispose()			end,		PrivateDispose: plainC.FAirusIteratorDispose/* */,		Reset: func()			begin			if not prefix then				begin				self.prefix := "";				self.pin := true;				self.loc := 'first				end;			self.currentEntry := {word: nil, attribute: nil, terminalClass: nil};			:PrivateReset(prefix, pin, loc)			end,		PrivateReset: plainC.FAirusIteratorReset/* funcPtr: 6995426, numArgs: 3 */,		Clone: func()			begin			local curs := :PrivateClone();			curs.currentEntry := Clone(currentEntry);			curs.index := Clone(index);			curs.validTest := Clone(validTest);			curs			end,		PrivateClone: plainC.FAirusIteratorClone/* */,		Map: func(fn)			begin			:Reset();			while :ThisWord() do				begin				call fn with (currentEntry);				:Next()				end			end,		Move: func(offset)			begin			local fn := if offset < 0 then 'Prev else 'Next;			local i, count := abs(offset) - 1;			for i := 0 to count do				begin				if not Perform(self, fn, []) then					break;				end;			return i * (if offset < 0 then -1 else 1)			end,		GotoKey: func(key) Throw('|evt.ex.msg|, "GotoKey NYI"),		First: func() while :Prev() do nil,		Prev: plainC.FAirusIteratorPreviousWord/* */,		Next: plainC.FAirusIteratorNextWord/* */,		Last: func() while :Next() do nil,		Entry: func()			begin			if :PrivateEntry(currentEntry) then				Clone(currentEntry)			end,		PrivateEntry: plainC.FAirusIteratorThisWord/*entry*/,		Word: func()			begin			:PrivateEntry(nil)			end,		ThisWord: func()			begin			if :PrivateEntry(currentEntry) then				currentEntry.word			end,		TerminalClass: func()			begin			(:Entry()).terminalClass			end,		Attribute: func()			begin			(:Entry()).attribute			end,		ChangeAttribute: func(newAttribute)			begin			if dict and currentEntry.word then				dict:ChangeAttribute(currentEntry.word, newAttribute)			end,		MakeWindow: func(size)			begin			local window := {_proto: protoCursorWindow};			window:Initialize(self, size);			window			end,		protoCursorWindow:		{			buffer: nil,			bufferSize: nil,			dipStick: nil,			cursor: nil,			cursorLoc: nil,			lastQuery: nil,	// not used!			Initialize: func(curs, size)				begin				self.buffer := Array(size, nil);				self.bufferSize := size;				self.cursor := curs;				self.dipStick := :FillBuffer();				return self				end,			Reset: func()				begin				cursor:Reset();				:FillBuffer()				end,			EntryFilter: func(arg1)				begin				arg1				end,			EntryKey: func(arg1)				begin				if Length(buffer) > arg1 then					call entryFilter with (buffer[arg1])				end,			GetEntry: func(arg1)				begin				if Length(buffer) > arg1 then					buffer[arg1]				end,			GetBuffer: func() buffer,			GetBufferSize: func() bufferSize,			GetNumberEntries: func() dipStick,			GetCursor: func() cursor,			MoveCursor: func(arg1)				begin				local local1 := cursor:Move(arg1);				cursorLoc := cursorLoc + local1;				local1				end,			Scroll: func(arg1)				begin				if dipStick > 0 and not cursor:Entry() then					Throw('|evt.ex.msg|, "cursorLoc out of whack before Scroll");				local local1 := 0;				local local1 := :MoveCursor(arg1 - cursorLoc);				if not cursor:entry() then					:MoveCursor(if arg1 < 0 then 1 else -1);				:FillBuffer();				if dipStick > 0 and not cursor:Entry() then					Throw('|evt.ex.msg|, "cursorLoc out of whack after Scroll");				local1				end,			Reposition: func(arg1)				begin				cursor:Initialize(arg1, nil, 'First);				:FillBuffer()				end,			RepositionLast: func(arg1)				begin				cursor:Initialize(arg1, nil, 'Last);				:FillBuffer()				end,			FillBuffer: func()				begin				local local1 := :FillFromEntry(0, bufferSize);				if local1 = 0 then					cursorLoc := -1;				for local2 := local1 to bufferSize - 1 do					buffer[local2] := nil;				if not cursor:Entry() then					:MoveCursor(-1);				dipStick := cursorLoc + 1				end,			FillFromEntry: func(arg1, arg2)				begin				local local1 := arg1;				local local2 := arg1 + arg2;				local local3 := cursor:entry();				if if local3 then					local1 < local2 then					loop					begin					if not local3 then						break					else						buffer[local1] := local3;					local1 := local1 + 1;					if local1 = local2 then						break					else						begin						cursorLoc := local1;						if not cursor:Next() then							break;						local3 := cursor:entry()						end					end;				return local1 - arg1				end,			SlideUp: func(count)				begin				local local1 := dipStick - max(0, dipStick + count - bufferSize);				for i := local1 - 1 to 0 by -1 do					buffer[i + count] := buffer[i];				for i := 0 to count - 1 do					buffer[i] := nil;				cursorLoc := cursorLoc + count;				dipStick := count + local1				end,			SlideDown: func(count)				begin				local local1 := bufferSize - count;				for i := 0 to local1 - 1 do					buffer[i] := buffer[i + count];				for i := local1 to bufferSize - 1 do					buffer[i] := nil;				cursorLoc := cursorLoc - count;				dipStick := dipStick - count				end		}	},/*------------------------------------------------------------------------------	@346*/	{},/*------------------------------------------------------------------------------	@347  ROM_cardBitmap*/	{},/*------------------------------------------------------------------------------	@348*/	{	words: nil,		ink: nil	},/*------------------------------------------------------------------------------	@349  ROM_a2zBitmap*/	{},/*------------------------------------------------------------------------------	@350  ROM_zero2nineBitmap*/	{},/*------------------------------------------------------------------------------	@351  ROM_bookBitmap*/	{},/*------------------------------------------------------------------------------	@352*/	{	x: nil,		y: nil,		line: nil	},/*------------------------------------------------------------------------------	@353			Intelligent Assistant.*/	GetLayout("assistant"),/*------------------------------------------------------------------------------	@354*/	{},/*------------------------------------------------------------------------------	@355*/	{},/*------------------------------------------------------------------------------	@356  protoDateIntervalPopup*/	{},/*------------------------------------------------------------------------------	@357  protoMultiDatePopup*/	{},/*------------------------------------------------------------------------------	@358  protoYearPopup*/	{},/*------------------------------------------------------------------------------	@359  ROM_compatibleFinder*/	{},/*------------------------------------------------------------------------------	@360  protoMapPopup*/	{},/*------------------------------------------------------------------------------	@361			Names soup def.*/	{	name: ROM_cardfileSoupName,		userName: ROM_cardfileSoupName,		ownerApp: 'cardfile,		ownerAppName: ROM_cardfileSoupName,		userDescr: "Soup with Names and Addresses",		indexes: @44	},/*------------------------------------------------------------------------------	@362			Notes app.*/	{},/*------------------------------------------------------------------------------	@363			Card routing picker item.*/	{	GetTitle: func(item)			begin			if item and Length(GetStores()) > 1 then				begin				if EntryStore(item) = GetStores()[0] then					"Move to card"				else					begin					if EntryStore(item):IsReadOnly() then						"Copy from card"					else						"Move from card"					end				end			end,		routeScript: 'cardActionScript	},/*------------------------------------------------------------------------------	@364			Notes soup def*/	{  name: "Notes",		userName: "notepad",		ownerApp: 'paperroll,		ownerAppName: "Notes",		userDescr: "private",		indexes: [{ structure: 'slot, path: 'timestamp, type: 'int },					 { structure: 'slot, path: 'labels, type: 'tags }] },/*------------------------------------------------------------------------------	@365			Calendar soup def*/	{  name: "Calendar",		userName: "calendar meetings",		ownerApp: 'calendar,		ownerAppName: "Dates",		userDescr: "non-repeating meetings in the calendar",		indexes: [{ structure: 'slot, path: 'mtgStartDate, type: 'int },					 { structure: 'slot, path: 'mtgAlarm, type: 'int }] },/*------------------------------------------------------------------------------	@366			Repeat Meetings soup def*/	{  name: "Repeat Meetings",		userName: "repeating meetings",		ownerApp: 'calendar,		ownerAppName: "Dates",		userDescr: "repeating meetings in the calendar",		indexes: [{ structure: 'slot, path: 'mtgStopDate, type: 'int },					 { structure: 'slot, path: 'mtgAlarm, type: 'int }] },/*------------------------------------------------------------------------------	@367			Repeat Notes soup def*/	{  name: "Repeat Notes",		userName: "repeating events",		ownerApp: 'calendar,		ownerAppName: "Dates",		userDescr: "repeating events in the calendar",		indexes: [{ structure: 'slot, path: 'mtgStopDate, type: 'int},					 { structure: 'slot, path: 'mtgAlarm, type: 'int }] },/*------------------------------------------------------------------------------	@368			Calendar Notes soup def*/	{  name: "Calendar Notes",		userName: "calendar events",		ownerApp: 'calendar,		ownerAppName: "Dates",		userDescr: "non-repeating events in the calendar",		indexes: [{ structure: 'slot, path: 'mtgStartDate, type: 'int },					 { structure: 'slot, path: 'mtgAlarm, type: 'int }] },/*------------------------------------------------------------------------------	@369			To Do soup def*/	{  name: "To Do",		userName: "1.0 To Do items",		ownerApp: 'calendar,		ownerAppName: "Dates",		userDescr: "1.0 To Do items",		indexes: [{ structure: 'slot, path: 'mtgStartDate, type: 'int},					 { structure: 'slot, path: 'mtgAlarm, type: 'int }] },/*------------------------------------------------------------------------------	@370			To Do List soup def*/	{  name: "To Do List",		userName: "To Do tasks",		ownerApp: 'calendar,		ownerAppName: "Dates",		userDescr: "To Do tasks,both non-repeating and repeating",		indexes: [{ structure: 'slot, path: 'date, type: 'int }] },/*------------------------------------------------------------------------------	@371  protoPeoplePopup*/	{},/*------------------------------------------------------------------------------	@372			Calculator grind sound.*/	{},/*------------------------------------------------------------------------------	@373			An icon.*/	{},/*------------------------------------------------------------------------------	@374  newtRolloverLayout*/	{},/*------------------------------------------------------------------------------	@375  protoAlphaKeyboard*/	{},/*------------------------------------------------------------------------------	@376  protoNumericKeyboard*/	{},/*------------------------------------------------------------------------------	@377  protoPopinPlace*/	{  _proto: protoPopupButton,		viewBounds: nil,		viewJustify: vjCenterH + vjCenterV,		text: "*",		popup: nil,		viewSetupFormScript: func()			begin			inherited:viewSetupFormScript();			:SetBounds()			end,		SetBounds: func()			begin			local box := :GlobalBox();			local width := box.right - box.left;	// UNUSED!			local bounds := viewBounds := Clone(viewBounds);			bounds.right := bounds.left + StdButtonWidth(text)			end,		buttonClickScript: func()			begin			local local1, local2, local3, local4, local6;			local1 := StringFilter(text, kRef47CABD, 'rejectBeginning);			local2 := 0;			foreach local3, local4 in popup do				if ClassOf(local4) <> 'symbol then				begin				local6 := if IsFrame(local4) then					local4.item				else					local4;				if StrEqual(local6, local1) then					begin					if IsReadOnly(popup) then						(popup := Clone(popup));					if IsFrame(local4) then						((popup[local3] := Clone(local4)).mark := $\uFC0B);					else						(popup[local3] := {item: local4, mark: $\uFC0B});					local2 := -local3 * FontHeight(viewFont);					end;				else (if IsFrame(local4) and not IsReadOnly(local4) then					RemoveSlot(local4, 'mark));				end;			inherited:buttonClickScript()			end,		pickActionScript: func(itemSelected)			begin			local local1, local2;			inherited:pickActionScript(itemSelected);			local popupItem := popup[itemSelected];			local popupText := if IsFrame(popupItem) then				popupItem.item			else				popupItem;			:SetText(popupText);			:SyncView()			end,	},/*------------------------------------------------------------------------------	@378  protoNewSetClock*/	{},/*------------------------------------------------------------------------------	@379  protoAMPMCluster*/	{},/*------------------------------------------------------------------------------	@380  ROM_copier*/	{},/*------------------------------------------------------------------------------	@381  ROM_infoBitmap*/	{},/*------------------------------------------------------------------------------	@382*/	{  viewStationery: 'paperroll,		class: 'paperroll,		height: 200,		data: nil,		timestamp: 0,		_version: 2	},/*------------------------------------------------------------------------------	@383  protoBasicEndpoint*/	{		Instantiate: plainC.CINewInstantiate /* endpoint, options */,		InstantiateFromTEndpoint: plainC.CINewInstantiateFromEndpoint /* endpoint, options, CEndpoint */,		Option: plainC.CINewOption /* options, callback */,		State: plainC.CINewState,		SetState: plainC.CINewSetState /* state */,		Bind: plainC.CINewBind /* options, callback */,		Listen: plainC.CINewListen /* options, callback */,		Cancel: plainC.CINewAbort /* callback */,		Accept: plainC.CINewAccept /* options, callback */,		Connect: plainC.CINewConnect /* options, callback */,		SetInputSpec: plainC.CINewSetInputSpec /* inputSpec */,		Input: plainC.CINewInput,		FlushInput: plainC.CINewFlushInput,		Partial: plainC.CINewPartial,		FlushPartial: plainC.CINewFlushPartial,		RequestsPending: plainC.CINewRequestsPending /* funcPtr: 6990155, numArgs: 1 */,		Output: plainC.CINewOutput /* data, options, outputSpec */,		Unbind: plainC.CINewUnbind /* callback */,		Disconnect: plainC.CINewDisconnect /* cancelPending, callback */,		Dispose: plainC.CINewDispose,		DisposeLeavingTEndpoint: plainC.CINewDisposeLeavingCEndpoint,		DisposeLeavingTool: plainC.CINewDisposeLeavingTool	},/*------------------------------------------------------------------------------	@384*/	{  viewClass: clTextView,		viewFlags: vVisible + vReadOnly,		viewFormat: vfNone,		viewBounds: SetBounds(4, 1, 204, 16),		viewJustify: vjLeftH + vjTopV + vjOneLineOnly,		viewFont: ROM_fontSystem10Bold	},/*------------------------------------------------------------------------------	@385  protoPrefsRollItem*/	{  _proto: @847,		viewFlags: vVisible,		viewFormat: vfNone,		viewJustify: vjParentFullH + vjParentTopV,		pix: nil,		viewChildren: [ viewChildren:			{	_proto: protoTitle,				title: nil,				viewSetupFormScript: func()					begin					title := overview;					titleicon := icon;					inherited:viewSetupFormScript()					end			}		],		viewSetupFormScript: func()			begin			SetKeyView(self, 0)			end	},/*------------------------------------------------------------------------------	@386  protoPopupButton*/	{  _proto: protoDiamondButton,		viewBounds: nil,		viewJustify: vjCenterH + vjCenterV + vjSiblingRightH + vjOneLineOnly,		text: nil,		popup: [ "" ],		viewClickScript: func(unit)			begin			if :TrackHilite(unit) then				:buttonClickScript()			else				:Hilite(nil);			true			end,		buttonClickScript: func()			:PopupMenu(popup, nil),		pickActionScript: func(itemSelected)			:Hilite(nil),		pickCancelledScript: func()			:Hilite(nil)	},/*------------------------------------------------------------------------------	@387  protoDatePicker*/	{},/*------------------------------------------------------------------------------	@388			AOL mail transport.*/	{},/*------------------------------------------------------------------------------	@389  protoTransport*/	{},/*------------------------------------------------------------------------------	@390*/	{	text: "Show status dialogs",		configuration: 'autoStatus	},/*------------------------------------------------------------------------------	@391*/	{},/*------------------------------------------------------------------------------	@392*/	{  _proto: protoFloatNGo,		viewFlags: vApplication + vFloating,		viewFormat: vfFillWhite + vfRound(2),		viewBounds: SetBounds(0, -235, 238, 0),		viewJustify: vjParentCenterH + vjParentCenterV,		viewEffect: fxDrawerEffect,		ReOrientToScreen: ROM_DefRotateFunc,		selected: nil,		dataClass: nil,		context: nil,		stepChildren: [ stepChildren: 			kPlaceList		],		placeList: nil,		stepallocatecontext: [			'placeList, kPlaceList		],		Init: func()			begin			BuildContext({_proto: self})			end,		New: func(arg1, arg2, arg3, arg4)			begin			local local1;			local1 := :Init();			local1.dataClass := arg1;			local1.context := arg3;			local1.selected := arg2;			local1.options := arg4;			local1:Open();			local1			end	},/*------------------------------------------------------------------------------	@393  protoCharEdit*/	{},/*------------------------------------------------------------------------------	@394			Word picker?*/	{},/*------------------------------------------------------------------------------	@395			Correction slip?*/	{},/*------------------------------------------------------------------------------	@396  ROM_AZTabsBitmap*/	{},/*------------------------------------------------------------------------------	@397  ROM_AZTabsMaskCZ*/	nil];