/*	File:		DynamicArray.h	Contains:	Interface to the CDynamicArray class.	Written by:	Newton Research Group.*/#if !defined(__DYNAMICARRAY_H)#define __DYNAMICARRAY_H 1#if !defined(__NEWTON_H)#include "Newton.h"#endif/*------------------------------------------------------------------------------	Forward and external class declarations------------------------------------------------------------------------------*/class CArrayIterator;	// CArrayIterator knows how to traverse a CDynamicArray.	// In particular, it will bend indices to account for on-the-fly	// element insertion and deletion./*------------------------------------------------------------------------------	C D y n a m i c A r r a y------------------------------------------------------------------------------*/class CDynamicArray : public SingleObject{public:	enum Parameters	{		kDefaultElementSize = sizeof(OpaqueRef),		kDefaultChunkSize = sizeof(OpaqueRef)	};						CDynamicArray();						CDynamicArray(size_t inElementSize, ArrayIndex inChunkSize = kDefaultChunkSize);						~CDynamicArray();// array manipulation primitives	ArrayIndex		count(void);									// was getArraySize()	NewtonErr		setArraySize(ArrayIndex inSize);	NewtonErr		setElementCount(ArrayIndex inSize);		// like setArraySize, but sets logical size, too	void *			elementPtrAt(ArrayIndex index);	void *			safeElementPtrAt(ArrayIndex index);	NewtonErr		getElementsAt(ArrayIndex index, void * outElements, ArrayIndex inCount);	NewtonErr		addElement(void * inElement);	NewtonErr		insertElementsBefore(ArrayIndex index, void * inElements, ArrayIndex inCount);	NewtonErr		replaceElementsAt(ArrayIndex index, void  * inElements, ArrayIndex inCount);	NewtonErr		removeElementsAt(ArrayIndex index, ArrayIndex inCount);	NewtonErr		removeAll(void);// miscellaneous functions	bool				isEmpty(void);	NewtonErr		merge(CDynamicArray * inArray);// don't call this unless you know what you are doing.  Just say false!	void				nukeIterator(void);		// Dangerousprotected:	size_t			computeByteCount(ArrayIndex inCount);	ArrayIndex		fSize;				// logical size of arrayprivate:	friend void MoveLow(CDynamicArray * inArray);	friend class CArrayIterator;	size_t			fElementSize;		// size of a single element	ArrayIndex		fChunkSize;			// grow/shrink array by this many elements	ArrayIndex		fAllocatedSize;	// physical size of array	Ptr				fArrayBlock;		// element storage	CArrayIterator *	fIterator;		// linked list of iterators active on this array};/*------------------------------------------------------------------------------	C D y n a m i c A r r a y   I n l i n e s------------------------------------------------------------------------------*/inline ArrayIndex CDynamicArray::count(void){ return fSize; }inline bool CDynamicArray::isEmpty(void){ return (fSize == 0); }inline void * CDynamicArray::elementPtrAt(ArrayIndex index){ return (Ptr)fArrayBlock + fElementSize * index; }inline size_t CDynamicArray::computeByteCount(ArrayIndex inCount){ return (fElementSize * inCount); }inline NewtonErr CDynamicArray::addElement(void * inElement){ return insertElementsBefore(fSize, inElement, 1); }inline NewtonErr CDynamicArray::removeAll(void){ return removeElementsAt(0, fSize); }inline void CDynamicArray::nukeIterator(void){ fIterator = NULL; }#endif	/*	__DYNAMICARRAY_H	*/