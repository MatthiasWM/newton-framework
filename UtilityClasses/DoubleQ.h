/*	File:		DoubleQ.h	Contains:	Support for doubly linked lists.	Written by:	Newton Research Group.*/#if !defined(__DOUBLEQ_H)#define __DOUBLEQ_H 1#if !defined(__NEWTON_H)#include "Newton.h"#endif/*------------------------------------------------------------------------------	C D o u b l e Q I t e m------------------------------------------------------------------------------*/class CDoubleQContainer;class CDoubleQItem{public:				CDoubleQItem();	CDoubleQItem *			fNext;		// +00	CDoubleQItem *			fPrev;		// +04	CDoubleQContainer *	fContainer;	// +08};/*------------------------------------------------------------------------------	C D o u b l e Q C o n t a i n e r	This is the container class for CDoubleQItems.	You specify the offset into the Class that has the CDoubleQItem within it	so we can return the Outer Level class item, not the address of the	CDoubleQItem to the caller. ------------------------------------------------------------------------------*/typedef void (*DestructorProcPtr)(void *, void *);		// instance pointer, data to destroyclass CDoubleQContainer{public:				CDoubleQContainer();				CDoubleQContainer(ULong inOffsetToDoubleQItem);				CDoubleQContainer(ULong inOffsetToDoubleQItem, DestructorProcPtr, void*);	void		add(void * inItem);	void		addBefore(void * inBeforeItem, void * inItem);	void		addToFront(void * inItem);	void		checkBeforeAdd(void * inItem);	void *	peek(void);	void *	getNext(void * inItem);	void *	remove(void);	bool		removeFromQueue(void * inItem);	bool		deleteFromQueue(void * inItem);private:	void		init(ULong inOffsetToDoubleQItem);	CDoubleQItem *		fHead;						// +00	CDoubleQItem *		fTail;						// +04	ULong					fOffsetToDoubleQItem;	// +08	DestructorProcPtr	fDestructor;				// +0C	void *				fDestructorInstance;		// +10};#endif	/* __DOUBLEQ_H */